
    export default [
      "@pixi\\utils\\index.d.ts",
      "import type { BaseTexture } from '@pixi/core';\r\nimport { default as earcut_2 } from 'earcut';\r\nimport EventEmitter from 'eventemitter3';\r\nimport { isMobile } from '@pixi/settings';\r\nimport type { ITypedArray } from '@pixi/core';\r\nimport type { Program } from '@pixi/core';\r\nimport type { Texture } from '@pixi/core';\r\n\r\nexport declare type ArrayFixed<T, L extends number> = [T, ...Array<T>] & {\r\n    length: L;\r\n};\r\n\r\n/**\r\n * @todo Describe property usage\r\n * @static\r\n * @name BaseTextureCache\r\n * @memberof PIXI.utils\r\n * @type {object}\r\n */\r\nexport declare const BaseTextureCache: {\r\n    [key: string]: BaseTexture;\r\n};\r\n\r\n/**\r\n * Creates a Canvas element of the given size to be used as a target for rendering to.\r\n * @class\r\n * @memberof PIXI.utils\r\n */\r\nexport declare class CanvasRenderTarget {\r\n    /** The Canvas object that belongs to this CanvasRenderTarget. */\r\n    canvas: HTMLCanvasElement;\r\n    /** A CanvasRenderingContext2D object representing a two-dimensional rendering context. */\r\n    context: CanvasRenderingContext2D;\r\n    /**\r\n     * The resolution / device pixel ratio of the canvas\r\n     * @default 1\r\n     */\r\n    resolution: number;\r\n    /**\r\n     * @param width - the width for the newly created canvas\r\n     * @param height - the height for the newly created canvas\r\n     * @param {number} [resolution=PIXI.settings.RESOLUTION] - The resolution / device pixel ratio of the canvas\r\n     */\r\n    constructor(width: number, height: number, resolution?: number);\r\n    /**\r\n     * Clears the canvas that was created by the CanvasRenderTarget class.\r\n     * @private\r\n     */\r\n    clear(): void;\r\n    /**\r\n     * Resizes the canvas to the specified width and height.\r\n     * @param desiredWidth - the desired width of the canvas\r\n     * @param desiredHeight - the desired height of the canvas\r\n     */\r\n    resize(desiredWidth: number, desiredHeight: number): void;\r\n    /** Destroys this canvas. */\r\n    destroy(): void;\r\n    /**\r\n     * The width of the canvas buffer in pixels.\r\n     * @member {number}\r\n     */\r\n    get width(): number;\r\n    set width(val: number);\r\n    /**\r\n     * The height of the canvas buffer in pixels.\r\n     * @member {number}\r\n     */\r\n    get height(): number;\r\n    set height(val: number);\r\n}\r\n\r\n/**\r\n * Removes all textures from cache, but does not destroy them\r\n * @memberof PIXI.utils\r\n * @function clearTextureCache\r\n */\r\nexport declare function clearTextureCache(): void;\r\n\r\n/**\r\n * changes blendMode according to texture format\r\n * @memberof PIXI.utils\r\n * @function correctBlendMode\r\n * @param {number} blendMode - supposed blend mode\r\n * @param {boolean} premultiplied - whether source is premultiplied\r\n * @returns {number} true blend mode for this texture\r\n */\r\nexport declare function correctBlendMode(blendMode: number, premultiplied: boolean): number;\r\n\r\n/**\r\n * Generic Mask Stack data structure\r\n * @memberof PIXI.utils\r\n * @function createIndicesForQuads\r\n * @param {number} size - Number of quads\r\n * @param {Uint16Array|Uint32Array} [outBuffer] - Buffer for output, length has to be `6 * size`\r\n * @returns {Uint16Array|Uint32Array} - Resulting index buffer\r\n */\r\nexport declare function createIndicesForQuads(size: number, outBuffer?: Uint16Array | Uint32Array): Uint16Array | Uint32Array;\r\n\r\n/**\r\n * Regexp for data URI.\r\n * Based on: {@link https://github.com/ragingwind/data-uri-regex}\r\n * @static\r\n * @constant {RegExp|string} DATA_URI\r\n * @memberof PIXI\r\n * @example data:image/png;base64\r\n */\r\nexport declare const DATA_URI: RegExp;\r\n\r\n/**\r\n * @memberof PIXI.utils\r\n * @interface DecomposedDataUri\r\n */\r\n/**\r\n * type, eg. `image`\r\n * @memberof PIXI.utils.DecomposedDataUri#\r\n * @member {string} mediaType\r\n */\r\n/**\r\n * Sub type, eg. `png`\r\n * @memberof PIXI.utils.DecomposedDataUri#\r\n * @member {string} subType\r\n */\r\n/**\r\n * @memberof PIXI.utils.DecomposedDataUri#\r\n * @member {string} charset\r\n */\r\n/**\r\n * Data encoding, eg. `base64`\r\n * @memberof PIXI.utils.DecomposedDataUri#\r\n * @member {string} encoding\r\n */\r\n/**\r\n * The actual data\r\n * @memberof PIXI.utils.DecomposedDataUri#\r\n * @member {string} data\r\n */\r\n/**\r\n * Split a data URI into components. Returns undefined if\r\n * parameter `dataUri` is not a valid data URI.\r\n * @memberof PIXI.utils\r\n * @function decomposeDataUri\r\n * @param {string} dataUri - the data URI to check\r\n * @returns {PIXI.utils.DecomposedDataUri|undefined} The decomposed data uri or undefined\r\n */\r\nexport declare function decomposeDataUri(dataUri: string): DecomposedDataUri;\r\n\r\nexport declare interface DecomposedDataUri {\r\n    mediaType: string;\r\n    subType: string;\r\n    charset: string;\r\n    encoding: string;\r\n    data: string;\r\n}\r\n\r\n/**\r\n * Helper for warning developers about deprecated features & settings.\r\n * A stack track for warnings is given; useful for tracking-down where\r\n * deprecated methods/properties/classes are being used within the code.\r\n * @memberof PIXI.utils\r\n * @function deprecation\r\n * @param {string} version - The version where the feature became deprecated\r\n * @param {string} message - Message should include what is deprecated, where, and the new solution\r\n * @param {number} [ignoreDepth=3] - The number of steps to ignore at the top of the error stack\r\n *        this is mostly to ignore internal deprecation calls.\r\n */\r\nexport declare function deprecation(version: string, message: string, ignoreDepth?: number): void;\r\n\r\n/**\r\n * Destroys all texture in the cache\r\n * @memberof PIXI.utils\r\n * @function destroyTextureCache\r\n */\r\nexport declare function destroyTextureCache(): void;\r\n\r\n/**\r\n * Sets the `crossOrigin` property for this resource based on if the url\r\n * for this resource is cross-origin. If crossOrigin was manually set, this\r\n * function does nothing.\r\n * Nipped from the resource loader!\r\n * @ignore\r\n * @param {string} url - The url to test.\r\n * @param {object} [loc=window.location] - The location object to test against.\r\n * @returns {string} The crossOrigin value to use (or empty string for none).\r\n */\r\nexport declare function determineCrossOrigin(url: string, loc?: Location): string;\r\n\r\nexport declare type Dict<T> = {\r\n    [key: string]: T;\r\n};\r\n\r\nexport { earcut_2 as earcut }\r\n\r\nexport { EventEmitter }\r\n\r\ndeclare type FormatFunction = {\r\n    (URL: URL, options?: URLFormatOptions): string;\r\n    (urlObject: UrlObject | string): string;\r\n};\r\n\r\nexport declare function getBufferType(array: ITypedArray): 'Float32Array' | 'Uint32Array' | 'Int32Array' | 'Uint16Array' | 'Uint8Array' | null;\r\n\r\n/**\r\n * get the resolution / device pixel ratio of an asset by looking for the prefix\r\n * used by spritesheets and image urls\r\n * @memberof PIXI.utils\r\n * @function getResolutionOfUrl\r\n * @param {string} url - the image path\r\n * @param {number} [defaultValue=1] - the defaultValue if no filename prefix is set.\r\n * @returns {number} resolution / device pixel ratio of an asset\r\n */\r\nexport declare function getResolutionOfUrl(url: string, defaultValue?: number): number;\r\n\r\n/**\r\n * Converts a hexadecimal color number to an [R, G, B] array of normalized floats (numbers from 0.0 to 1.0).\r\n * @example\r\n * PIXI.utils.hex2rgb(0xffffff); // returns [1, 1, 1]\r\n * @memberof PIXI.utils\r\n * @function hex2rgb\r\n * @param {number} hex - The hexadecimal number to convert\r\n * @param  {number[]} [out=[]] - If supplied, this array will be used rather than returning a new one\r\n * @returns {number[]} An array representing the [R, G, B] of the color where all values are floats.\r\n */\r\nexport declare function hex2rgb(hex: number, out?: Array<number> | Float32Array): Array<number> | Float32Array;\r\n\r\n/**\r\n * Converts a hexadecimal color number to a string.\r\n * @example\r\n * PIXI.utils.hex2string(0xffffff); // returns \"#ffffff\"\r\n * @memberof PIXI.utils\r\n * @function hex2string\r\n * @param {number} hex - Number in hex (e.g., `0xffffff`)\r\n * @returns {string} The string color (e.g., `\"#ffffff\"`).\r\n */\r\nexport declare function hex2string(hex: number): string;\r\n\r\nexport declare function interleaveTypedArrays(arrays: PackedArray[], sizes: number[]): Float32Array;\r\n\r\nexport { isMobile }\r\n\r\n/**\r\n * Checks if a number is a power of two.\r\n * @function isPow2\r\n * @memberof PIXI.utils\r\n * @param {number} v - input value\r\n * @returns {boolean} `true` if value is power of two\r\n */\r\nexport declare function isPow2(v: number): boolean;\r\n\r\n/**\r\n * Helper for checking for WebGL support.\r\n * @memberof PIXI.utils\r\n * @function isWebGLSupported\r\n * @returns {boolean} Is WebGL supported.\r\n */\r\nexport declare function isWebGLSupported(): boolean;\r\n\r\n/**\r\n * Computes ceil of log base 2\r\n * @function log2\r\n * @memberof PIXI.utils\r\n * @param {number} v - input value\r\n * @returns {number} logarithm base 2\r\n */\r\nexport declare function log2(v: number): number;\r\n\r\n/**\r\n * Rounds to next power of two.\r\n * @function nextPow2\r\n * @memberof PIXI.utils\r\n * @param {number} v - input value\r\n * @returns {number} - next rounded power of two\r\n */\r\nexport declare function nextPow2(v: number): number;\r\n\r\ndeclare type PackedArray = Float32Array | Uint32Array | Int32Array | Uint8Array;\r\n\r\n/**\r\n * This file contains redeclared types for Node `url` and `querystring` modules. These modules\r\n * don't provide their own typings but instead are a part of the full Node typings. The purpose of\r\n * this file is to redeclare the required types to avoid having the whole Node types as a\r\n * dependency.\r\n */\r\ndeclare interface ParsedUrlQuery {\r\n    [key: string]: string | string[];\r\n}\r\n\r\ndeclare interface ParsedUrlQueryInput {\r\n    [key: string]: unknown;\r\n}\r\n\r\ndeclare type ParseFunction = {\r\n    (urlStr: string): UrlWithStringQuery;\r\n    (urlStr: string, parseQueryString: false | undefined, slashesDenoteHost?: boolean): UrlWithStringQuery;\r\n    (urlStr: string, parseQueryString: true, slashesDenoteHost?: boolean): UrlWithParsedQuery;\r\n    (urlStr: string, parseQueryString: boolean, slashesDenoteHost?: boolean): Url;\r\n};\r\n\r\n/**\r\n * maps premultiply flag and blendMode to adjusted blendMode\r\n * @memberof PIXI.utils\r\n * @constant premultiplyBlendMode\r\n * @type {Array<number[]>}\r\n */\r\nexport declare const premultiplyBlendMode: number[][];\r\n\r\n/**\r\n * combines rgb and alpha to out array\r\n * @memberof PIXI.utils\r\n * @function premultiplyRgba\r\n * @param {Float32Array|number[]} rgb - input rgb\r\n * @param {number} alpha - alpha param\r\n * @param {Float32Array} [out] - output\r\n * @param {boolean} [premultiply=true] - do premultiply it\r\n * @returns {Float32Array} vec4 rgba\r\n */\r\nexport declare function premultiplyRgba(rgb: Float32Array | number[], alpha: number, out?: Float32Array, premultiply?: boolean): Float32Array;\r\n\r\n/**\r\n * premultiplies tint\r\n * @memberof PIXI.utils\r\n * @function premultiplyTint\r\n * @param {number} tint - integer RGB\r\n * @param {number} alpha - floating point alpha (0.0-1.0)\r\n * @returns {number} tint multiplied by alpha\r\n */\r\nexport declare function premultiplyTint(tint: number, alpha: number): number;\r\n\r\n/**\r\n * converts integer tint and float alpha to vec4 form, premultiplies by default\r\n * @memberof PIXI.utils\r\n * @function premultiplyTintToRgba\r\n * @param {number} tint - input tint\r\n * @param {number} alpha - alpha param\r\n * @param {Float32Array} [out] - output\r\n * @param {boolean} [premultiply=true] - do premultiply it\r\n * @returns {Float32Array} vec4 rgba\r\n */\r\nexport declare function premultiplyTintToRgba(tint: number, alpha: number, out: Float32Array, premultiply?: boolean): Float32Array;\r\n\r\n/**\r\n * @todo Describe property usage\r\n * @static\r\n * @name ProgramCache\r\n * @memberof PIXI.utils\r\n * @type {object}\r\n */\r\nexport declare const ProgramCache: {\r\n    [key: string]: Program;\r\n};\r\n\r\n/**\r\n * Remove items from a javascript array without generating garbage\r\n * @function removeItems\r\n * @memberof PIXI.utils\r\n * @param {Array<any>} arr - Array to remove elements from\r\n * @param {number} startIdx - starting index\r\n * @param {number} removeCount - how many to remove\r\n */\r\nexport declare function removeItems(arr: any[], startIdx: number, removeCount: number): void;\r\n\r\ndeclare type ResolveFunction = {\r\n    (from: string, to: string): string;\r\n};\r\n\r\n/**\r\n * Converts a color as an [R, G, B] array of normalized floats to a hexadecimal number.\r\n * @example\r\n * PIXI.utils.rgb2hex([1, 1, 1]); // returns 0xffffff\r\n * @memberof PIXI.utils\r\n * @function rgb2hex\r\n * @param {number[]} rgb - Array of numbers where all values are normalized floats from 0.0 to 1.0.\r\n * @returns {number} Number in hexadecimal.\r\n */\r\nexport declare function rgb2hex(rgb: number[] | Float32Array): number;\r\n\r\n/**\r\n * Logs out the version and renderer information for this running instance of PIXI.\r\n * If you don't want to see this message you can run `PIXI.utils.skipHello()` before\r\n * creating your renderer. Keep in mind that doing that will forever make you a jerk face.\r\n * @static\r\n * @function sayHello\r\n * @memberof PIXI.utils\r\n * @param {string} type - The string renderer type to log.\r\n */\r\nexport declare function sayHello(type: string): void;\r\n\r\n/**\r\n * Returns sign of number\r\n * @memberof PIXI.utils\r\n * @function sign\r\n * @param {number} n - the number to check the sign of\r\n * @returns {number} 0 if `n` is 0, -1 if `n` is negative, 1 if `n` is positive\r\n */\r\nexport declare function sign(n: number): -1 | 0 | 1;\r\n\r\n/**\r\n * Skips the hello message of renderers that are created after this is run.\r\n * @function skipHello\r\n * @memberof PIXI.utils\r\n */\r\nexport declare function skipHello(): void;\r\n\r\n/**\r\n * Converts a string to a hexadecimal color number.\r\n * It can handle:\r\n *  hex strings starting with #: \"#ffffff\"\r\n *  hex strings starting with 0x: \"0xffffff\"\r\n *  hex strings without prefix: \"ffffff\"\r\n *  css colors: \"black\"\r\n * @example\r\n * PIXI.utils.string2hex(\"#ffffff\"); // returns 0xffffff\r\n * @memberof PIXI.utils\r\n * @function string2hex\r\n * @param {string} string - The string color (e.g., `\"#ffffff\"`)\r\n * @returns {number} Number in hexadecimal.\r\n */\r\nexport declare function string2hex(string: string): number;\r\n\r\n/**\r\n * @todo Describe property usage\r\n * @static\r\n * @name TextureCache\r\n * @memberof PIXI.utils\r\n * @type {object}\r\n */\r\nexport declare const TextureCache: {\r\n    [key: string]: Texture;\r\n};\r\n\r\n/**\r\n * Trim transparent borders from a canvas\r\n * @memberof PIXI.utils\r\n * @function trimCanvas\r\n * @param {HTMLCanvasElement} canvas - the canvas to trim\r\n * @returns {object} Trim data\r\n */\r\nexport declare function trimCanvas(canvas: HTMLCanvasElement): {\r\n    width: number;\r\n    height: number;\r\n    data?: ImageData;\r\n};\r\n\r\n/**\r\n * Gets the next unique identifier\r\n * @memberof PIXI.utils\r\n * @function uid\r\n * @returns {number} The next unique identifier to use.\r\n */\r\nexport declare function uid(): number;\r\n\r\ndeclare interface Url extends UrlObjectCommon {\r\n    port?: string;\r\n    query?: string | null | ParsedUrlQuery;\r\n}\r\n\r\nexport declare const url: {\r\n    parse: ParseFunction;\r\n    format: FormatFunction;\r\n    resolve: ResolveFunction;\r\n};\r\n\r\ndeclare interface URLFormatOptions {\r\n    auth?: boolean;\r\n    fragment?: boolean;\r\n    search?: boolean;\r\n    unicode?: boolean;\r\n}\r\n\r\ndeclare interface UrlObject extends UrlObjectCommon {\r\n    port?: string | number;\r\n    query?: string | null | ParsedUrlQueryInput;\r\n}\r\n\r\ndeclare interface UrlObjectCommon {\r\n    auth?: string;\r\n    hash?: string;\r\n    host?: string;\r\n    hostname?: string;\r\n    href?: string;\r\n    path?: string;\r\n    pathname?: string;\r\n    protocol?: string;\r\n    search?: string;\r\n    slashes?: boolean;\r\n}\r\n\r\ndeclare interface UrlWithParsedQuery extends Url {\r\n    query: ParsedUrlQuery;\r\n}\r\n\r\ndeclare interface UrlWithStringQuery extends Url {\r\n    query: string | null;\r\n}\r\n\r\nexport { }\r\n"
    ]
  