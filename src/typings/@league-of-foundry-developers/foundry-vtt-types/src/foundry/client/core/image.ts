
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\client\\core\\image.d.ts",
      "/**\n * A helper class to provide common functionality for working with Image objects\n */\n// eslint-disable-next-line @typescript-eslint/no-extraneous-class\ndeclare class ImageHelper {\n  /**\n   * Create thumbnail preview for a provided image path.\n   * @param src     - The string URL or DisplayObject of the texture to render to a thumbnail\n   * @param options - Additional named options passed to the {@link ImageHelper.compositeCanvasTexture} method\n   *                  (default: `{}`)\n   * @returns The parsed and converted thumbnail data\n   */\n  static createThumbnail(\n    src: string | PIXI.DisplayObject,\n    options?: ImageHelper.CompositeOptions & ImageHelper.TextureToImageOptions\n  ): Promise<ImageHelper.ThumbnailReturn>;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Composite a canvas object by rendering it to a single texture\n   * @param object  - The DisplayObject to render to a texture\n   * @param options - Additional named options\n   *                  (default: `{}`)\n   * @returns The composite Texture object\n   */\n  static compositeCanvasTexture(object: PIXI.DisplayObject, options?: ImageHelper.CompositeOptions): PIXI.Texture;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Extract a texture to a base64 PNG string\n   * @param texture - The Texture object to extract\n   * @param options - (default: `{}`)\n   * @returns A base64 png string of the texture\n   */\n  static textureToImage(texture: PIXI.Texture, { format, quality }?: ImageHelper.TextureToImageOptions): string;\n\n  /**\n   * Asynchronously convert a DisplayObject container to base64 using Canvas#toBlob and FileReader\n   * @param target  - A PIXI display object to convert\n   * @param type    - The requested mime type of the output, default is image/png\n   * @param quality - A number between 0 and 1 for image quality if image/jpeg or image/webp\n   * @returns A processed base64 string\n   */\n  static pixiToBase64(target: PIXI.DisplayObject, type: string, quality: number): Promise<string>;\n}\n\ndeclare namespace ImageHelper {\n  /**\n   * An interface for options for the {@link ImageHelper.createThumbnail} and {@link ImageHelper.compositeCanvasTexture}\n   * methods.\n   */\n  interface CompositeOptions {\n    /**\n     * Center the texture in the rendered frame?\n     * @defaultValue `true`\n     */\n    center?: boolean;\n\n    /**\n     * The desired height of the output texture\n     * @defaultValue The height of the object passed to {@link ImageHelper.compositeCanvasTexture}\n     */\n    height?: number;\n\n    /**\n     * A horizontal translation to apply to the object\n     * @defaultValue `0`\n     */\n    tx?: number;\n\n    /**\n     * A vertical translation to apply to the object\n     * @defaultValue `0`\n     */\n    ty?: number;\n\n    /**\n     * The desired width of the output texture\n     * @defaultValue The width of the object passed to {@link ImageHelper.compositeCanvasTexture}\n     */\n    width?: number;\n  }\n\n  interface TextureToImageOptions {\n    /**\n     * Image format, e.g. \"image/jpeg\" or \"image/webp\".\n     * @defaultValue `\"image/png\"`\n     */\n    format?: string;\n\n    /**\n     * JPEG or WEBP compression from 0 to 1. Default is 0.92.\n     * @defaultValue `0.92`\n     */\n    quality?: number;\n  }\n\n  /**\n   * An interface for return values of the {@link ImageHelper.createThumbnail} method.\n   */\n  interface ThumbnailReturn {\n    /**\n     * The height of the {@link PIXI.Sprite}, created by {@link ImageHelper.createThumbnail}\n     */\n    height: number;\n\n    /**\n     * The originally passed `string` URL or DisplayObject\n     */\n    src: string | PIXI.DisplayObject;\n\n    /**\n     * The Texture, returned from {@link ImageHelper.compositeCanvasTexture}, with `destroy(true)` already called on it.\n     */\n    texture: PIXI.Texture;\n\n    /**\n     * The base64 encoded image data, returned from {@link ImageHelper.textureToImage}\n     */\n    thumb: string;\n\n    /**\n     * The width of the {@link PIXI.Sprite}, created by {@link ImageHelper.createThumbnail}\n     */\n    width: number;\n  }\n}\n"
    ]
  