
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\common\\constants.mjs.d.ts",
      "/**\n * The shortened software name\n */\nexport const vtt: 'Foundry VTT';\n\n/**\n * The full software name\n */\nexport const VTT: 'Foundry Virtual Tabletop';\n\n/**\n * The software website URL\n */\nexport const WEBSITE_URL: 'https://foundryvtt.com';\n\n/**\n * An ASCII greeting displayed to the client\n */\nexport const ASCII = `_______________________________________________________________\n _____ ___  _   _ _   _ ____  ______   __ __     _______ _____\n|  ___/ _ \\\\| | | | \\\\ | |  _ \\\\|  _ \\\\ \\\\ / / \\\\ \\\\   / |_   _|_   _|\n| |_ | | | | | | |  \\\\| | | | | |_) \\\\ V /   \\\\ \\\\ / /  | |   | |\n|  _|| |_| | |_| | |\\\\  | |_| |  _ < | |     \\\\ V /   | |   | |\n|_|   \\\\___/ \\\\___/|_| \\\\_|____/|_| \\\\_\\\\|_|      \\\\_/    |_|   |_|\n===============================================================`;\n\n/**\n * Define the allowed ActiveEffect application modes\n */\nexport const ACTIVE_EFFECT_MODES: Readonly<{\n  CUSTOM: 0;\n  MULTIPLY: 1;\n  ADD: 2;\n  DOWNGRADE: 3;\n  UPGRADE: 4;\n  OVERRIDE: 5;\n}>;\nexport type ACTIVE_EFFECT_MODES = ValueOf<typeof ACTIVE_EFFECT_MODES>;\n\n/**\n * Define the string name used for the base document type when specific sub-types are not defined by the system\n */\nexport const BASE_DOCUMENT_TYPE: 'base';\n\n/**\n * Define the methods by which a Card can be drawn from a Cards stack\n * TOP and FIRST are synonymous, as are BOTTOM and LAST.\n */\nexport const CARD_DRAW_MODES: Readonly<{\n  FIRST: 0;\n  TOP: 0;\n  LAST: 1;\n  BOTTOM: 1;\n  RANDOM: 2;\n}>;\nexport type CARD_DRAW_MODES = ValueOf<typeof CARD_DRAW_MODES>;\n\n/**\n * An enumeration of canvas performance modes.\n */\nexport const CANVAS_PERFORMANCE_MODES: Readonly<{\n  LOW: 0;\n  MED: 1;\n  HIGH: 2;\n  MAX: 3;\n}>;\nexport type CANVAS_PERFORMANCE_MODES = ValueOf<typeof CANVAS_PERFORMANCE_MODES>;\n\n/**\n * Valid Chat Message types\n */\nexport const CHAT_MESSAGE_TYPES: Readonly<{\n  OTHER: 0;\n  OOC: 1;\n  IC: 2;\n  EMOTE: 3;\n  WHISPER: 4;\n  ROLL: 5;\n}>;\nexport type CHAT_MESSAGE_TYPES = ValueOf<typeof CHAT_MESSAGE_TYPES>;\n\n/**\n * Define the set of languages which have built-in support in the core software\n */\nexport const CORE_SUPPORTED_LANGUAGES: readonly ['en'];\n\n/**\n * The default artwork used for Token images if none is provided\n */\nexport const DEFAULT_TOKEN: 'icons/svg/mystery-man.svg';\n\n/**\n * The default artwork used for Note placeables if none is provided\n * @deprecated since v9, use NoteData.DEFAULT_ICON instead.\n */\nexport const DEFAULT_NOTE_ICON: 'icons/svg/book.svg';\n\n/**\n * The default icon image used for Macro documents if no other image is provided\n * @deprecated since v9, use MacroData.DEFAULT_ICON instead.\n */\nexport const DEFAULT_MACRO_ICON: 'icons/svg/dice-target.svg';\n\n/**\n * Define the allowed Document class types.\n */\nexport const DOCUMENT_TYPES: readonly [\n  'Actor',\n  'Cards',\n  'ChatMessage',\n  'Combat',\n  'Item',\n  'Folder',\n  'JournalEntry',\n  'Macro',\n  'Playlist',\n  'RollTable',\n  'Scene',\n  'User'\n];\nexport type DOCUMENT_TYPES = ValueOf<typeof DOCUMENT_TYPES>;\n\n/**\n * The allowed Document types which may exist within a Compendium pack.\n */\nexport const COMPENDIUM_DOCUMENT_TYPES: readonly [\n  'Actor',\n  'Cards',\n  'Item',\n  'JournalEntry',\n  'Macro',\n  'Playlist',\n  'RollTable',\n  'Scene',\n  'Adventure'\n];\nexport type COMPENDIUM_DOCUMENT_TYPES = ValueOf<typeof COMPENDIUM_DOCUMENT_TYPES>;\n\n/**\n * Define the allowed permission levels for a non-user Document.\n * Each level is assigned a value in ascending order. Higher levels grant more permissions.\n */\nexport const DOCUMENT_PERMISSION_LEVELS: Readonly<{\n  NONE: 0;\n  LIMITED: 1;\n  OBSERVER: 2;\n  OWNER: 3;\n}>;\nexport type DOCUMENT_PERMISSION_LEVELS = ValueOf<typeof DOCUMENT_PERMISSION_LEVELS>;\n\n/**\n * Define the allowed Document types which may be dynamically linked in chat\n */\nexport const DOCUMENT_LINK_TYPES: readonly [\n  'Actor',\n  'Cards',\n  'Item',\n  'Scene',\n  'JournalEntry',\n  'Macro',\n  'RollTable',\n  'PlaylistSound'\n];\nexport type DOCUMENT_LINK_TYPES = ValueOf<typeof DOCUMENT_LINK_TYPES>;\n\n/**\n * The supported dice roll visibility modes\n */\nexport const DICE_ROLL_MODES: Readonly<{\n  PUBLIC: 'publicroll';\n  PRIVATE: 'gmroll';\n  BLIND: 'blindroll';\n  SELF: 'selfroll';\n}>;\nexport type DICE_ROLL_MODES = ValueOf<typeof DICE_ROLL_MODES>;\n\n/**\n * The allowed Drawing types which may be saved\n */\nexport const DRAWING_TYPES: Readonly<{\n  RECTANGLE: 'r';\n  ELLIPSE: 'e';\n  TEXT: 't';\n  POLYGON: 'p';\n  FREEHAND: 'f';\n}>;\nexport type DRAWING_TYPES = ValueOf<typeof DRAWING_TYPES>;\n\n/**\n * The allowed fill types which a Drawing object may display\n * NONE: The drawing is not filled\n * SOLID: The drawing is filled with a solid color\n * PATTERN: The drawing is filled with a tiled image pattern\n */\nexport const DRAWING_FILL_TYPES: Readonly<{\n  NONE: 0;\n  SOLID: 1;\n  PATTERN: 2;\n}>;\nexport type DRAWING_FILL_TYPES = ValueOf<typeof DRAWING_FILL_TYPES>;\n\n/**\n * Define the allowed Document types which Folders may contain\n */\nexport const FOLDER_DOCUMENT_TYPES: readonly [\n  'Actor',\n  'Item',\n  'Scene',\n  'JournalEntry',\n  'Playlist',\n  'RollTable',\n  'Cards',\n  'Macro'\n];\nexport type FOLDER_DOCUMENT_TYPES = ValueOf<typeof FOLDER_DOCUMENT_TYPES>;\n\n/**\n * The maximum allowed level of depth for Folder nesting\n */\nexport const FOLDER_MAX_DEPTH: 3;\n\n/**\n * A list of allowed game URL names\n */\nexport const GAME_VIEWS: readonly ['game', 'stream'];\n\n/**\n * The minimum allowed grid size which is supported by the software\n */\nexport const GRID_MIN_SIZE: 50;\n\n/**\n * The allowed Grid types which are supported by the software\n */\nexport const GRID_TYPES: Readonly<{\n  GRIDLESS: 0;\n  SQUARE: 1;\n  HEXODDR: 2;\n  HEXEVENR: 3;\n  HEXODDQ: 4;\n  HEXEVENQ: 5;\n}>;\nexport type GRID_TYPES = ValueOf<typeof GRID_TYPES>;\n\n/**\n * A list of supported setup URL names\n */\nexport const SETUP_VIEWS: readonly ['license', 'setup', 'players', 'join', 'auth'];\n\n/**\n * An Array of valid MacroAction scope values\n */\nexport const MACRO_SCOPES: readonly ['global', 'actors', 'actor'];\nexport type MACRO_SCOPES = ValueOf<typeof MACRO_SCOPES>;\n\n/**\n * An enumeration of valid Macro types\n */\nexport const MACRO_TYPES: Readonly<{\n  SCRIPT: 'script';\n  CHAT: 'chat';\n}>;\nexport type MACRO_TYPES = ValueOf<typeof MACRO_TYPES>;\n\n/**\n * The allowed playback modes for an audio Playlist\n * DISABLED: The playlist does not play on its own, only individual Sound tracks played as a soundboard\n * SEQUENTIAL: The playlist plays sounds one at a time in sequence\n * SHUFFLE: The playlist plays sounds one at a time in randomized order\n * SIMULTANEOUS: The playlist plays all contained sounds at the same time\n */\nexport const PLAYLIST_MODES: Readonly<{\n  DISABLED: -1;\n  SEQUENTIAL: 0;\n  SHUFFLE: 1;\n  SIMULTANEOUS: 2;\n}>;\nexport type PLAYLIST_MODES = ValueOf<typeof PLAYLIST_MODES>;\n\n/**\n * The available sort modes for an audio Playlist.\n * ALPHABETICAL (default): Sort sounds alphabetically.\n * MANUAL: Sort sounds by manual drag-and-drop.\n */\nexport const PLAYLIST_SORT_MODES: Readonly<{\n  ALPHABETICAL: 'a';\n  MANUAL: 'm';\n}>;\nexport type PLAYLIST_SORT_MODES = ValueOf<typeof PLAYLIST_SORT_MODES>;\n\n/**\n * The allowed package types\n */\nexport const PACKAGE_TYPES: readonly ['world', 'system', 'module'];\nexport type PACKAGE_TYPES = ValueOf<typeof PACKAGE_TYPES>;\n\n/**\n * Encode the reasons why a package may be available or unavailable for use\n */\nexport const PACKAGE_AVAILABILITY_CODES: Readonly<{\n  UNKNOWN: -1;\n  REQUIRES_UPDATE: 0;\n  AVAILABLE: 1;\n  REQUIRES_SYSTEM: 2;\n  REQUIRES_DEPENDENCY: 3;\n  REQUIRES_CORE: 4;\n}>;\nexport type PACKAGE_AVAILABILITY_CODES = ValueOf<typeof PACKAGE_AVAILABILITY_CODES>;\n\n/**\n * A safe password string which can be displayed\n */\nexport const PASSWORD_SAFE_STRING: '••••••••••••••••';\n\n/**\n * The allowed software update channels\n */\nexport const SOFTWARE_UPDATE_CHANNELS: Readonly<{\n  stable: 'SETUP.UpdateStable';\n  testing: 'SETUP.UpdateTesting';\n  development: 'SETUP.UpdateDevelopment';\n  prototype: 'SETUP.UpdatePrototype';\n}>;\nexport type SOFTWARE_UPDATE_CHANNELS = ValueOf<typeof SOFTWARE_UPDATE_CHANNELS>;\n\n/**\n * The default sorting density for manually ordering child objects within a parent\n */\nexport const SORT_INTEGER_DENSITY: 100000;\n\n/**\n * The allowed types of a TableResult document\n */\ndeclare const tableResultTypes: Readonly<{\n  TEXT: 0;\n  DOCUMENT: 1;\n  COMPENDIUM: 2;\n  /**\n   * @deprecated TABLE_RESULT_TYPES.ENTITY is deprecated. Please use TABLE_RESULT_TYPES.DOCUMENT instead.\n   */\n  get ENTITY(): 1;\n}>;\n\n/**\n * The allowed types of a TableResult document\n */\nexport const TABLE_RESULT_TYPES: typeof tableResultTypes;\nexport type TABLE_RESULT_TYPES = ValueOf<typeof TABLE_RESULT_TYPES>;\n\n/**\n * Define the valid anchor locations for a Tooltip displayed on a Placeable Object\n */\nexport const TEXT_ANCHOR_POINTS: Readonly<{\n  CENTER: 0;\n  BOTTOM: 1;\n  TOP: 2;\n  LEFT: 3;\n  RIGHT: 4;\n}>;\nexport type TEXT_ANCHOR_POINTS = ValueOf<typeof TEXT_ANCHOR_POINTS>;\n\n/**\n * Define the valid occlusion modes which an overhead tile can use\n */\nexport const TILE_OCCLUSION_MODES: Readonly<{\n  NONE: 0;\n  FADE: 1;\n  ROOF: 2;\n  RADIAL: 3;\n}>;\nexport type TILE_OCCLUSION_MODES = ValueOf<typeof TILE_OCCLUSION_MODES>;\n\n/**\n * Describe the various thresholds of token control upon which to show certain pieces of information\n * NONE - no information is displayed\n * CONTROL - displayed when the token is controlled\n * OWNER HOVER - displayed when hovered by a GM or a user who owns the actor\n * HOVER - displayed when hovered by any user\n * OWNER - always displayed for a GM or for a user who owns the actor\n * ALWAYS - always displayed for everyone\n */\nexport const TOKEN_DISPLAY_MODES: Readonly<{\n  NONE: 0;\n  CONTROL: 10;\n  OWNER_HOVER: 20;\n  HOVER: 30;\n  OWNER: 40;\n  ALWAYS: 50;\n}>;\nexport type TOKEN_DISPLAY_MODES = ValueOf<typeof TOKEN_DISPLAY_MODES>;\n\n/**\n * The allowed Token disposition types\n * HOSTILE - Displayed as an enemy with a red border\n * NEUTRAL - Displayed as neutral with a yellow border\n * FRIENDLY - Displayed as an ally with a cyan border\n */\nexport const TOKEN_DISPOSITIONS: Readonly<{\n  HOSTILE: -1;\n  NEUTRAL: 0;\n  FRIENDLY: 1;\n}>;\nexport type TOKEN_DISPOSITIONS = ValueOf<typeof TOKEN_DISPOSITIONS>;\n\n/**\n * Define the allowed User permission levels.\n * Each level is assigned a value in ascending order. Higher levels grant more permissions.\n */\nexport const USER_ROLES: Readonly<{\n  NONE: 0;\n  PLAYER: 1;\n  TRUSTED: 2;\n  ASSISTANT: 3;\n  GAMEMASTER: 4;\n}>;\nexport type USER_ROLES = ValueOf<typeof USER_ROLES>;\n\n/**\n * Invert the User Role mapping to recover role names from a role integer\n */\nexport const USER_ROLE_NAMES: Readonly<{ [Key in keyof typeof USER_ROLES as typeof USER_ROLES[Key]]: Key }>;\nexport type USER_ROLE_NAMES = ValueOf<typeof USER_ROLE_NAMES>;\n\n/**\n * An enumeration of the allowed types for a MeasuredTemplate embedded document\n */\nexport const MEASURED_TEMPLATE_TYPES: Readonly<{\n  CIRCLE: 'circle';\n  CONE: 'cone';\n  RECTANGLE: 'rect';\n  RAY: 'ray';\n}>;\nexport type MEASURED_TEMPLATE_TYPES = ValueOf<typeof MEASURED_TEMPLATE_TYPES>;\n\nexport interface UserCapability {\n  disableGM: boolean;\n  hint: string;\n  label: string;\n  defaultRole: USER_ROLES;\n}\n\n/**\n * Define the recognized User capabilities which individual Users or role levels may be permitted to perform\n */\nexport const USER_PERMISSIONS: Readonly<{\n  /**\n   * @defaultValue\n   * ```typescript\n   * {\n   *    label: \"PERMISSION.ActorCreate\",\n   *    hint: \"PERMISSION.ActorCreateHint\",\n   *    disableGM: false,\n   *    defaultRole: USER_ROLES.ASSISTANT\n   * }\n   * ```\n   */\n  ACTOR_CREATE: UserCapability;\n\n  /**\n   * @defaultValue\n   * ```typescript\n   * {\n   *    label: \"PERMISSION.BroadcastAudio\",\n   *    hint: \"PERMISSION.BroadcastAudioHint\",\n   *    disableGM: true,\n   *    defaultRole: USER_ROLES.TRUSTED\n   * }\n   * ```\n   */\n  BROADCAST_AUDIO: UserCapability;\n\n  /**\n   * @defaultValue\n   * ```typescript\n   * {\n   *    label: \"PERMISSION.BroadcastVideo\",\n   *    hint: \"PERMISSION.BroadcastVideoHint\",\n   *    disableGM: true,\n   *    defaultRole: USER_ROLES.TRUSTED\n   * }\n   * ```\n   */\n  BROADCAST_VIDEO: UserCapability;\n\n  /**\n   * @defaultValue\n   * ```typescript\n   * {\n   *    label: \"PERMISSION.DrawingCreate\",\n   *    hint: \"PERMISSION.DrawingCreateHint\",\n   *    disableGM: false,\n   *    defaultRole: USER_ROLES.TRUSTED\n   * }\n   * ```\n   */\n  DRAWING_CREATE: UserCapability;\n\n  /**\n   * @defaultValue\n   * ```typescript\n   * {\n   *    label: \"PERMISSION.ItemCreate\",\n   *    hint: \"PERMISSION.ItemCreateHint\",\n   *    disableGM: false,\n   *    defaultRole: USER_ROLES.ASSISTANT\n   * }\n   * ```\n   */\n  ITEM_CREATE: UserCapability;\n\n  /**\n   * @defaultValue\n   * ```typescript\n   * {\n   *    label: \"PERMISSION.FilesBrowse\",\n   *    hint: \"PERMISSION.FilesBrowseHint\",\n   *    disableGM: false,\n   *    defaultRole: USER_ROLES.TRUSTED\n   * }\n   * ```\n   */\n  FILES_BROWSE: UserCapability;\n\n  /**\n   * @defaultValue\n   * ```typescript\n   * {\n   *    label: \"PERMISSION.FilesUpload\",\n   *    hint: \"PERMISSION.FilesUploadHint\",\n   *    disableGM: false,\n   *    defaultRole: USER_ROLES.ASSISTANT\n   * }\n   * ```\n   */\n  FILES_UPLOAD: UserCapability;\n\n  /**\n   * @defaultValue\n   * ```typescript\n   * {\n   *    label: \"PERMISSION.JournalCreate\"\n   *    hint: \"PERMISSION.JournalCreateHint\",\n   *    disableGM: false,\n   *    defaultRole: USER_ROLES.TRUSTED\n   * }\n   * ```\n   */\n  JOURNAL_CREATE: UserCapability;\n\n  /**\n   * @defaultValue\n   * ```typescript\n   * {\n   *    label: \"PERMISSION.MacroScript\",\n   *    hint: \"PERMISSION.MacroScriptHint\",\n   *    disableGM: false,\n   *    defaultRole: USER_ROLES.PLAYER\n   * }\n   * ```\n   */\n  MACRO_SCRIPT: UserCapability;\n\n  /**\n   * @defaultValue\n   * ```typescript\n   * {\n   *    label: \"PERMISSION.MessageWhisper\",\n   *    hint: \"PERMISSION.MessageWhisperHint\",\n   *    disableGM: false,\n   *    defaultRole: USER_ROLES.PLAYER\n   * }\n   * ```\n   */\n  MESSAGE_WHISPER: UserCapability;\n\n  /**\n   * @defaultValue\n   * ```typescript\n   * {\n   *    label: \"PERMISSION.NoteCreate\",\n   *    hint: \"PERMISSION.NoteCreateHint\",\n   *    disableGM: false,\n   *    defaultRole: USER_ROLES.TRUSTED\n   * }\n   * ```\n   */\n  NOTE_CREATE: UserCapability;\n\n  /**\n   * @defaultValue\n   * ```typescript\n   * {\n   *    label: \"PERMISSION.SettingsModify\",\n   *    hint: \"PERMISSION.SettingsModifyHint\",\n   *    disableGM: false,\n   *    defaultRole: USER_ROLES.ASSISTANT\n   * }\n   * ```\n   */\n  SETTINGS_MODIFY: UserCapability;\n\n  /**\n   * @defaultValue\n   * ```typescript\n   * {\n   *    label: \"PERMISSION.ShowCursor\",\n   *    hint: \"PERMISSION.ShowCursorHint\",\n   *    disableGM: true,\n   *    defaultRole: USER_ROLES.PLAYER\n   * }\n   * ```\n   */\n  SHOW_CURSOR: UserCapability;\n\n  /**\n   * @defaultValue\n   * ```typescript\n   * {\n   *    label: \"PERMISSION.ShowRuler\",\n   *    hint: \"PERMISSION.ShowRulerHint\",\n   *    disableGM: true,\n   *    defaultRole: USER_ROLES.PLAYER\n   * }\n   * ```\n   */\n  SHOW_RULER: UserCapability;\n\n  /**\n   * @defaultValue\n   * ```typescript\n   * {\n   *    label: \"PERMISSION.TemplateCreate\",\n   *    hint: \"PERMISSION.TemplateCreateHint\",\n   *    disableGM: false,\n   *    defaultRole: USER_ROLES.PLAYER\n   * }\n   * ```\n   */\n  TEMPLATE_CREATE: UserCapability;\n\n  /**\n   * @defaultValue\n   * ```typescript\n   * {\n   *    label: \"PERMISSION.TokenCreate\",\n   *    hint: \"PERMISSION.TokenCreateHint\",\n   *    disableGM: false,\n   *    defaultRole: USER_ROLES.ASSISTANT\n   * }\n   * ```\n   */\n  TOKEN_CREATE: UserCapability;\n\n  /**\n   * @defaultValue\n   * ```typescript\n   * {\n   *    label: \"PERMISSION.TokenConfigure\",\n   *    hint: \"PERMISSION.TokenConfigureHint\",\n   *    disableGM: false,\n   *    defaultRole: USER_ROLES.TRUSTED\n   * }\n   * ```\n   */\n  TOKEN_CONFIGURE: UserCapability;\n\n  /**\n   * @defaultValue\n   * ```typescript\n   * {\n   *    label: \"PERMISSION.WallDoors\",\n   *    hint: \"PERMISSION.WallDoorsHint\",\n   *    disableGM: false,\n   *    defaultRole: USER_ROLES.PLAYER\n   * }\n   * ```\n   */\n  WALL_DOORS: UserCapability;\n}>;\n\n/**\n * The allowed directions of effect that a Wall can have\n * BOTH: The wall collides from both directions\n * LEFT: The wall collides only when a ray strikes its left side\n * RIGHT: The wall collides only when a ray strikes its right side\n */\nexport const WALL_DIRECTIONS: Readonly<{\n  BOTH: 0;\n  LEFT: 1;\n  RIGHT: 2;\n}>;\nexport type WALL_DIRECTIONS = ValueOf<typeof WALL_DIRECTIONS>;\n\n/**\n * The allowed door types which a Wall may contain\n * NONE: The wall does not contain a door\n * DOOR: The wall contains a regular door\n * SECRET: The wall contains a secret door\n */\nexport const WALL_DOOR_TYPES: Readonly<{\n  NONE: 0;\n  DOOR: 1;\n  SECRET: 2;\n}>;\nexport type WALL_DOOR_TYPES = ValueOf<typeof WALL_DOOR_TYPES>;\n\n/**\n * The allowed door states which may describe a Wall that contains a door\n * CLOSED: The door is closed\n * OPEN: The door is open\n * LOCKED: The door is closed and locked\n */\nexport const WALL_DOOR_STATES: Readonly<{\n  CLOSED: 0;\n  OPEN: 1;\n  LOCKED: 2;\n}>;\nexport type WALL_DOOR_STATES = ValueOf<typeof WALL_DOOR_STATES>;\n\n/**\n * The wall properties which restrict the way interaction occurs with a specific wall\n */\nexport const WALL_RESTRICTION_TYPES: readonly ['light', 'sight', 'sound', 'move'];\nexport type WALL_RESTRICTION_TYPES = ValueOf<typeof WALL_RESTRICTION_TYPES>;\n\n/**\n * The types of sensory collision which a Wall may impose\n * NONE: Senses do not collide with this wall\n * NORMAL: Senses collide with this wall\n * LIMITED: Senses collide with the second intersection, bypassing the first\n */\nexport const WALL_SENSE_TYPES: Readonly<{\n  NONE: 0;\n  LIMITED: 10;\n  NORMAL: 20;\n}>;\nexport type WALL_SENSE_TYPES = ValueOf<typeof WALL_SENSE_TYPES>;\n\n/**\n * The types of movement collision which a Wall may impose\n * NONE: Movement does not collide with this wall\n * NORMAL: Movement collides with this wall\n */\nexport const WALL_MOVEMENT_TYPES: Readonly<{\n  NONE: typeof WALL_SENSE_TYPES.NONE;\n  NORMAL: typeof WALL_SENSE_TYPES.NORMAL;\n}>;\nexport type WALL_MOVEMENT_TYPES = ValueOf<typeof WALL_MOVEMENT_TYPES>;\n\n/**\n * The possible precedence values a Keybinding might run in\n * PRIORITY: Runs in the first group along with other PRIORITY keybindings\n * NORMAL: Runs after the PRIORITY group along with other NORMAL keybindings\n * DEFERRED: Runs in the last group along with other DEFERRED keybindings\n */\nexport const KEYBINDING_PRECEDENCE: Readonly<{\n  PRIORITY: 0;\n  NORMAL: 1;\n  DEFERRED: 2;\n}>;\nexport type KEYBINDING_PRECEDENCE = ValueOf<typeof KEYBINDING_PRECEDENCE>;\n\n/**\n * The allowed set of HTML template extensions\n */\nexport const HTML_FILE_EXTENSIONS: readonly ['html', 'handlebars', 'hbs'];\n\n/**\n * The supported file extensions for image-type files, and their corresponding mime types.\n */\nexport const IMAGE_FILE_EXTENSIONS: Readonly<{\n  apng: 'image/apng';\n  avif: 'image/avif';\n  bmp: 'image/bmp';\n  gif: 'image/gif';\n  jpg: 'image/jpeg';\n  jpeg: 'image/jpeg';\n  png: 'image/png';\n  svg: 'image/svg+xml';\n  tiff: 'image/tiff';\n  webp: 'image/webp';\n}>;\nexport type IMAGE_FILE_EXTENSIONS = ValueOf<typeof IMAGE_FILE_EXTENSIONS>;\n\n/**\n * The supported file extensions for video-type files, and their corresponding mime types.\n */\nexport const VIDEO_FILE_EXTENSIONS: Readonly<{\n  m4v: 'video/mp4';\n  mp4: 'video/mp4';\n  ogg: 'video/ogg';\n  webm: 'video/webm';\n}>;\nexport type VIDEO_FILE_EXTENSIONS = ValueOf<typeof VIDEO_FILE_EXTENSIONS>;\n\n/**\n * The supported file extensions for audio-type files, and their corresponding mime types.\n */\nexport const AUDIO_FILE_EXTENSIONS: Readonly<{\n  aac: 'audio/aac';\n  flac: 'audio/flac';\n  m4a: 'audio/mp4';\n  mid: 'audio/midi';\n  mp3: 'audio/mpeg';\n  ogg: 'audio/ogg';\n  opus: 'audio/opus';\n  wav: 'audio/wav';\n  webm: 'audio/webm';\n}>;\nexport type AUDIO_FILE_EXTENSIONS = ValueOf<typeof AUDIO_FILE_EXTENSIONS>;\n\n/**\n * The supported file extensions for text files, and their corresponding mime types.\n */\nexport const TEXT_FILE_EXTENSIONS: Readonly<{\n  json: 'application/json';\n  md: 'text/markdown';\n  pdf: 'application/pdf';\n  txt: 'text/plain';\n  xml: 'application/xml';\n}>;\nexport type TEXT_FILE_EXTENSIONS = ValueOf<typeof TEXT_FILE_EXTENSIONS>;\n\n/**\n * A list of MIME types which are treated as uploaded \"media\", which are allowed to overwrite existing files.\n * Any non-media MIME type is not allowed to replace an existing file.\n */\nexport const MEDIA_MIME_TYPES: readonly [\n  'image/apng',\n  'image/avif',\n  'image/bmp',\n  'image/gif',\n  'image/jpeg',\n  'image/jpeg',\n  'image/png',\n  'image/svg+xml',\n  'image/tiff',\n  'image/webp',\n  'video/mp4',\n  'video/mp4',\n  'video/ogg',\n  'video/webm',\n  'audio/aac',\n  'audio/flac',\n  'audio/mp4',\n  'audio/midi',\n  'audio/mpeg',\n  'audio/ogg',\n  'audio/opus',\n  'audio/wav',\n  'audio/webm',\n  'application/json',\n  'text/markdown',\n  'application/pdf',\n  'text/plain'\n];\n\n/**\n * Stores shared commonly used timeouts, measured in MS\n */\nexport const TIMEOUTS: Readonly<{\n  FOUNDRY_WEBSITE: 10000;\n  PACKAGE_REPOSITORY: 5000;\n  IP_DISCOVERY: 5000;\n}>;\nexport type TIMEOUTS = ValueOf<typeof TIMEOUTS>;\n\n/**\n * Enumerate the source types which can be used for an AmbientLight placeable object\n * @deprecated since v9\n */\nexport const SOURCE_TYPES: Readonly<{\n  LOCAL: 'l';\n  GLOBAL: 'g';\n  UNIVERSAL: 'u';\n}>;\n/**\n * Enumerate the source types which can be used for an AmbientLight placeable object\n * @deprecated since v9\n */\nexport type SOURCE_TYPES = ValueOf<typeof SOURCE_TYPES>;\n\n/**\n * Define the allowed Entity class types\n * @deprecated since v9 - use CONST.DOCUMENT_TYPES instead.\n */\nexport const ENTITY_TYPES: typeof DOCUMENT_TYPES;\n/**\n * Define the allowed Entity class types\n * @deprecated since v9 - use CONST.DOCUMENT_TYPES instead.\n */\nexport type ENTITY_TYPES = ValueOf<typeof ENTITY_TYPES>;\n\n/**\n * Define the allowed Document types which Folders may contain\n * @deprecated since v9 - use CONST.FOLDER_DOCUMENT_TYPES instead.\n */\nexport const FOLDER_ENTITY_TYPES: typeof FOLDER_DOCUMENT_TYPES;\n/**\n * Define the allowed Document types which Folders may contain\n * @deprecated since v9 - use CONST.FOLDER_DOCUMENT_TYPES instead.\n */\nexport type FOLDER_ENTITY_TYPES = ValueOf<typeof FOLDER_ENTITY_TYPES>;\n\n/**\n * Define the allowed permission levels for a non-user Entity.\n * Each level is assigned a value in ascending order. Higher levels grant more permissions.\n * @deprecated since v9 - use CONST.DOCUMENT_PERMISSION_LEVELS instead.\n */\nexport const ENTITY_PERMISSIONS: typeof DOCUMENT_PERMISSION_LEVELS;\n/**\n * Define the allowed permission levels for a non-user Entity.\n * Each level is assigned a value in ascending order. Higher levels grant more permissions.\n * @deprecated since v9 - use CONST.DOCUMENT_PERMISSION_LEVELS instead.\n */\nexport type ENTITY_PERMISSIONS = ValueOf<typeof ENTITY_PERMISSIONS>;\n\n/**\n * Define the allowed Entity types which may be dynamically linked in chat\n * @deprecated since v9 - use CONST.DOCUMENT_LINK_TYPES instead.\n */\nexport const ENTITY_LINK_TYPES: typeof DOCUMENT_LINK_TYPES;\n/**\n * Define the allowed Entity types which may be dynamically linked in chat\n * @deprecated since v9 - use CONST.DOCUMENT_LINK_TYPES instead.\n */\nexport type ENTITY_LINK_TYPES = ValueOf<typeof ENTITY_LINK_TYPES>;\n\n/**\n * The allowed Entity types which may exist within a Compendium pack\n * This is a subset of ENTITY_TYPES\n * @deprecated sinve v9 - use CONST.COMPENDIUM_DOCUMENT_TYPES instead.\n */\nexport const COMPENDIUM_ENTITY_TYPES: typeof COMPENDIUM_DOCUMENT_TYPES;\n/**\n * The allowed Entity types which may exist within a Compendium pack\n * This is a subset of ENTITY_TYPES\n * @deprecated sinve v9 - use CONST.COMPENDIUM_DOCUMENT_TYPES instead.\n */\nexport type COMPENDIUM_ENTITY_TYPES = ValueOf<typeof COMPENDIUM_ENTITY_TYPES>;\n"
    ]
  