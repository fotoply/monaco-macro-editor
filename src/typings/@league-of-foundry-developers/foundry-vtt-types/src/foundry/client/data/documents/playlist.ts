
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\client\\data\\documents\\playlist.d.ts",
      "import type { ConfiguredDocumentClass } from '../../../../types/helperTypes';\nimport type { DocumentModificationOptions } from '../../../common/abstract/document.mjs';\nimport type { PlaylistDataConstructorData } from '../../../common/data/data.mjs/playlistData';\n\ndeclare global {\n  /**\n   * The client-side Playlist document which extends the common BasePlaylist model.\n   * Each Playlist document contains PlaylistData which defines its data schema.\n   *\n   * @see {@link data.PlaylistData}               The Playlist data schema\n   * @see {@link documents.Playlists}             The world-level collection of Playlist documents\n   * @see {@link embedded.PlaylistSound}          The PlaylistSound embedded document within a parent Playlist\n   * @see {@link applications.PlaylistConfig}     The Playlist configuration application\n   *\n   */\n  class Playlist extends ClientDocumentMixin(foundry.documents.BasePlaylist) {\n    /**\n     * @param data - Initial data provided to construct the Playlist document\n     */\n    constructor(\n      data: ConstructorParameters<typeof foundry.documents.BasePlaylist>[0],\n      context?: ConstructorParameters<typeof foundry.documents.BasePlaylist>[1]\n    );\n\n    /**\n     * Playlists may have a playback order which defines the sequence of Playlist Sounds\n     * @defaultValue `undefined`\n     * @internal\n     */\n    protected _playbackOrder: string[] | undefined;\n\n    /**\n     * The playback mode for the Playlist instance\n     */\n    get mode(): foundry.CONST.PLAYLIST_MODES;\n\n    /**\n     * The order in which sounds within this playlist will be played (if sequential or shuffled)\n     * Uses a stored seed for randomization to guarantee that all clients generate the same random order.\n     */\n    get playbackOrder(): string[];\n\n    /**\n     * An indicator for whether any Sound within the Playlist is currently playing\n     */\n    get playing(): boolean;\n\n    override get visible(): boolean;\n\n    /**\n     * Begin simultaneous playback for all sounds in the Playlist.\n     * @returns The updated Playlist document\n     */\n    playAll(): Promise<InstanceType<ConfiguredDocumentClass<typeof Playlist>> | undefined>;\n\n    /**\n     * Play the next Sound within the sequential or shuffled Playlist.\n     * @param soundId - The currently playing sound ID, if known\n     * @param options - Additional options which configure the next track\n     * @returns The updated Playlist document\n     */\n    playNext(\n      soundId?: string,\n      options?: Partial<Playlist.PlayNextOptions>\n    ): Promise<InstanceType<ConfiguredDocumentClass<typeof Playlist>> | undefined | null>;\n\n    /**\n     * Begin playback of a specific Sound within this Playlist.\n     * Determine which other sounds should remain playing, if any.\n     * @param sound - The desired sound that should play\n     * @returns The updated Playlist\n     */\n    playSound(\n      sound: InstanceType<ConfiguredDocumentClass<typeof PlaylistSound>>\n    ): Promise<InstanceType<ConfiguredDocumentClass<typeof Playlist>> | undefined>;\n\n    /**\n     * Stop playback of a specific Sound within this Playlist.\n     * Determine which other sounds should remain playing, if any.\n     * @param sound - The desired sound that should play\n     * @returns The updated Playlist\n     */\n    stopSound(\n      sound: InstanceType<ConfiguredDocumentClass<typeof PlaylistSound>>\n    ): Promise<InstanceType<ConfiguredDocumentClass<typeof Playlist>> | undefined>;\n\n    /**\n     * End playback for any/all currently playing sounds within the Playlist.\n     * @returns The updated Playlist document\n     */\n    stopAll(): Promise<InstanceType<ConfiguredDocumentClass<typeof Playlist>> | undefined>;\n\n    /**\n     * Cycle the playlist mode\n     * @returns A promise which resolves to the updated Playlist instance\n     */\n    cycleMode(): Promise<InstanceType<ConfiguredDocumentClass<typeof Playlist>> | undefined>;\n\n    /**\n     * Get the next sound in the cached playback order. For internal use.\n     * @internal\n     */\n    protected _getNextSound(soundId: string): InstanceType<ConfiguredDocumentClass<typeof PlaylistSound>> | undefined;\n\n    /**\n     * Get the previous sound in the cached playback order. For internal use.\n     * @internal\n     */\n    protected _getPreviousSound(\n      soundId: string\n    ): InstanceType<ConfiguredDocumentClass<typeof PlaylistSound>> | undefined;\n\n    /**\n     * Define the sorting order for the Sounds within this Playlist. For internal use.\n     * @internal\n     */\n    protected _sortSounds(\n      a: InstanceType<ConfiguredDocumentClass<typeof PlaylistSound>>,\n      b: InstanceType<ConfiguredDocumentClass<typeof PlaylistSound>>\n    ): number;\n\n    protected override _preUpdate(\n      changed: DeepPartial<PlaylistDataConstructorData>,\n      options: DocumentModificationOptions,\n      user: foundry.documents.BaseUser\n    ): Promise<void>;\n\n    protected override _onUpdate(\n      changed: DeepPartial<foundry.data.PlaylistData['_source']>,\n      options: DocumentModificationOptions,\n      userId: string\n    ): void;\n\n    protected override _onDelete(options: DocumentModificationOptions, userId: string): void;\n\n    protected override _onCreateEmbeddedDocuments(\n      embeddedName: string,\n      documents: foundry.abstract.Document<any, any>[],\n      result: Record<string, unknown>[],\n      options: DocumentModificationOptions,\n      userId: string\n    ): void;\n\n    protected override _onUpdateEmbeddedDocuments(\n      embeddedName: string,\n      documents: foundry.abstract.Document<any, any>[],\n      result: Record<string, unknown>[],\n      options: DocumentModificationContext,\n      userId: string\n    ): void;\n\n    protected override _onDeleteEmbeddedDocuments(\n      embeddedName: string,\n      documents: foundry.abstract.Document<any, any>[],\n      result: string[],\n      options: DocumentModificationContext,\n      userId: string\n    ): void;\n\n    /**\n     * Handle callback logic when an individual sound within the Playlist concludes playback naturally\n     * @internal\n     */\n    _onSoundEnd(\n      sound: InstanceType<ConfiguredDocumentClass<typeof PlaylistSound>>\n    ): Promise<InstanceType<ConfiguredDocumentClass<typeof Playlist>> | undefined>;\n\n    /**\n     * Handle callback logic when playback for an individual sound within the Playlist is started.\n     * Schedule auto-preload of next track\n     * @internal\n     */\n    _onSoundStart(sound: InstanceType<ConfiguredDocumentClass<typeof PlaylistSound>>): Promise<void>;\n\n    override toCompendium(\n      pack?: CompendiumCollection<CompendiumCollection.Metadata> | null | undefined,\n      options?: ClientDocumentMixin.CompendiumExportOptions | undefined\n    ): Omit<foundry.data.PlaylistData['_source'], '_id' | 'folder' | 'permission'> & {\n      permission?: foundry.data.PlaylistData['_source']['permission'];\n    };\n  }\n\n  namespace Playlist {\n    interface PlayNextOptions {\n      /**\n       * Whether to advance forward (if 1) or backwards (if -1)\n       * @defaultValue `1`\n       */\n      direction: 1 | -1;\n    }\n  }\n}\n"
    ]
  