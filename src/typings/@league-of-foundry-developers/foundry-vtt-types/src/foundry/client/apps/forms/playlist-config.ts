
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\client\\apps\\forms\\playlist-config.d.ts",
      "import type { ConfiguredDocumentClass } from '../../../../types/helperTypes';\n\ndeclare global {\n  /**\n   * The Application responsible for configuring a single Playlist document.\n   * @typeParam Options - the type of the options object\n   * @typeParam Data    - The data structure used to render the handlebars template.\n   */\n  class PlaylistConfig<\n    Options extends DocumentSheetOptions = DocumentSheetOptions,\n    Data extends object = PlaylistConfig.Data<Options>\n  > extends DocumentSheet<Options, Data, InstanceType<ConfiguredDocumentClass<typeof Playlist>>> {\n    /**\n     * @defaultValue\n     * ```typescript\n     * const options = super.defaultOptions;\n     * options.id = \"playlist-config\";\n     * options.template = \"templates/playlist/edit-playlist.html\";\n     * options.width = 360;\n     * ```\n     */\n    static get defaultOptions(): DocumentSheetOptions;\n\n    override get title(): string;\n\n    override getData(options?: Partial<Options>): Data | Promise<Data>;\n\n    protected override _getFilePickerOptions(event: PointerEvent): FilePickerOptions;\n\n    /**\n     * @remarks The return type could be given more concretely but it is not supposed to be used.\n     */\n    protected override _onSelectFile(selection: string, filePicker: FilePicker): unknown;\n  }\n\n  namespace PlaylistConfig {\n    interface Data<Options extends DocumentSheetOptions = DocumentSheetOptions>\n      extends DocumentSheet.Data<InstanceType<ConfiguredDocumentClass<typeof Playlist>>, Options> {\n      modes: Record<foundry.CONST.PLAYLIST_MODES, string>;\n      sorting: Record<foundry.CONST.PLAYLIST_SORT_MODES, string>;\n    }\n  }\n}\n"
    ]
  