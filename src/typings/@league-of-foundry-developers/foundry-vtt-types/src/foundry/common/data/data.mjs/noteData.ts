
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\common\\data\\data.mjs\\noteData.d.ts",
      "import {\n  ConfiguredDocumentClass,\n  ConfiguredFlags,\n  FieldReturnType,\n  PropertiesToSource\n} from '../../../../types/helperTypes';\nimport DocumentData from '../../abstract/data.mjs';\nimport * as documents from '../../documents.mjs';\nimport * as fields from '../fields.mjs';\n\ninterface NoteDataSchema extends DocumentSchema {\n  _id: fields.DocumentId;\n  entryId: fields.ForeignDocumentField<{ type: typeof documents.BaseJournalEntry; required: false }>;\n  x: fields.RequiredNumber;\n  y: fields.RequiredNumber;\n  icon: FieldReturnType<fields.ImageField, { required: true; default: typeof NoteData.DEFAULT_ICON }>;\n  iconSize: FieldReturnType<\n    fields.RequiredNumber,\n    {\n      default: 40;\n      validate: (n: unknown) => n is number;\n      validationError: 'Invalid {name} {field} which must be an integer greater than 32';\n    }\n  >;\n  iconTint: fields.ColorField;\n  text: fields.StringField;\n  fontFamily: FieldReturnType<\n    fields.RequiredString,\n    {\n      default: () => typeof CONFIG['defaultFontFamily'];\n    }\n  >;\n  fontSize: FieldReturnType<\n    fields.RequiredNumber,\n    {\n      default: 48;\n      validate: (n: unknown) => n is number;\n      validationError: 'Invalid {name} {field} which must be an integer between 8 and 128';\n    }\n  >;\n  textAnchor: DocumentField<typeof foundry.CONST.TEXT_ANCHOR_POINTS> & {\n    type: typeof Number;\n    required: true;\n    default: typeof foundry.CONST.TEXT_ANCHOR_POINTS.BOTTOM;\n    validate: (p: unknown) => p is foundry.CONST.TEXT_ANCHOR_POINTS;\n    validationError: 'Invalid {name} {field} which must be a value in CONST.TEXT_ANCHOR_POINTS';\n  };\n  textColor: FieldReturnType<fields.ColorField, { default: '#FFFFFF' }>;\n  flags: fields.ObjectField;\n}\n\ninterface NoteDataProperties {\n  /**\n   * The _id which uniquely identifies this BaseNote embedded document\n   * @defaultValue `null`\n   */\n  _id: string | null;\n\n  /**\n   * The _id of a JournalEntry document which this Note represents\n   * @defaultValue `null`\n   */\n  entryId: string | null;\n\n  /**\n   * The x-coordinate position of the center of the note icon\n   * @defaultValue `0`\n   */\n  x: number;\n\n  /**\n   * The y-coordinate position of the center of the note icon\n   * @defaultValue `0`\n   */\n  y: number;\n\n  /**\n   * An image icon path used to represent this note\n   * @defaultValue `CONST.DEFAULT_NOTE_ICON`\n   */\n  icon: string | null;\n\n  /**\n   * The pixel size of the map note icon\n   * @defaultValue `40`\n   */\n  iconSize: number;\n\n  /**\n   * An optional color string used to tint the map note icon\n   */\n  iconTint: string | null | undefined;\n\n  /**\n   * Optional text which overrides the title of the linked Journal Entry\n   */\n  text: string | undefined;\n\n  /**\n   * The font family used to display the text label on this note\n   * @defaultValue `CONFIG?.defaultFontFamily || \"Signika\"`\n   */\n  fontFamily: string;\n\n  /**\n   * The font size used to display the text label on this note\n   * @defaultValue `48`\n   */\n  fontSize: number;\n\n  /**\n   * A value in CONST.TEXT_ANCHOR_POINTS which defines where the text label anchors\n   * to the note icon.\n   * @defaultValue `CONST.TEXT_ANCHOR_POINTS.BOTTOM`\n   */\n  textAnchor: foundry.CONST.TEXT_ANCHOR_POINTS;\n\n  /**\n   * The string that defines the color with which the note text is rendered\n   * @defaultValue `#FFFFFF`\n   */\n  textColor: string | null;\n\n  /**\n   * An object of optional key/value flags\n   * @defaultValue `{}`\n   */\n  flags: ConfiguredFlags<'Note'>;\n}\n\ninterface NoteDataConstructorData {\n  /**\n   * The _id which uniquely identifies this BaseNote embedded document\n   * @defaultValue `null`\n   */\n  _id?: string | null | undefined;\n\n  /**\n   * The _id of a JournalEntry document which this Note represents\n   * @defaultValue `null`\n   */\n  entryId?: InstanceType<ConfiguredDocumentClass<typeof documents.BaseJournalEntry>> | string | null | undefined;\n\n  /**\n   * The x-coordinate position of the center of the note icon\n   * @defaultValue `0`\n   */\n  x?: number | null | undefined;\n\n  /**\n   * The y-coordinate position of the center of the note icon\n   * @defaultValue `0`\n   */\n  y?: number | null | undefined;\n\n  /**\n   * An image icon path used to represent this note\n   * @defaultValue `CONST.DEFAULT_NOTE_ICON`\n   */\n  icon?: string | null | undefined;\n\n  /**\n   * The pixel size of the map note icon\n   * @defaultValue `40`\n   */\n  iconSize?: number | null | undefined;\n\n  /**\n   * An optional color string used to tint the map note icon\n   */\n  iconTint?: string | null | undefined;\n\n  /**\n   * Optional text which overrides the title of the linked Journal Entry\n   */\n  text?: string | null | undefined;\n\n  /**\n   * The font family used to display the text label on this note\n   * @defaultValue `CONFIG?.defaultFontFamily || \"Signika\"`\n   */\n  fontFamily?: string | null | undefined;\n\n  /**\n   * The font size used to display the text label on this note\n   * @defaultValue `48`\n   */\n  fontSize?: number | null | undefined;\n\n  /**\n   * A value in CONST.TEXT_ANCHOR_POINTS which defines where the text label anchors\n   * to the note icon.\n   * @defaultValue `CONST.TEXT_ANCHOR_POINTS.BOTTOM`\n   */\n  textAnchor?: foundry.CONST.TEXT_ANCHOR_POINTS | null | undefined;\n\n  /**\n   * The string that defines the color with which the note text is rendered\n   * @defaultValue `#FFFFFF`\n   */\n  textColor?: string | null | undefined;\n\n  /**\n   * An object of optional key/value flags\n   * @defaultValue `{}`\n   */\n  flags?: ConfiguredFlags<'Note'> | null | undefined;\n}\n\ntype NoteDataSource = PropertiesToSource<NoteDataProperties>;\n\n/**\n * The data schema for a Note embedded document.\n * @see BaseNote\n */\nexport class NoteData extends DocumentData<\n  NoteDataSchema,\n  NoteDataProperties,\n  NoteDataSource,\n  NoteDataConstructorData,\n  documents.BaseNote\n> {\n  static override defineSchema(): NoteDataSchema;\n\n  /**\n   * The default icon used for newly created Note documents.\n   * @defaultValue `\"icons/svg/book.svg\"`\n   */\n  static DEFAULT_ICON: string;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface NoteData extends NoteDataProperties {}\n"
    ]
  