
    export default [
      "engine.io-client\\build\\esm\\transport.d.ts",
      "import { DefaultEventsMap, Emitter } from \"@socket.io/component-emitter\";\nimport { SocketOptions } from \"./socket.js\";\nexport declare abstract class Transport extends Emitter<DefaultEventsMap, DefaultEventsMap> {\n    protected opts: SocketOptions;\n    protected supportsBinary: boolean;\n    protected query: object;\n    protected readyState: string;\n    protected writable: boolean;\n    protected socket: any;\n    protected setTimeoutFn: typeof setTimeout;\n    /**\n     * Transport abstract constructor.\n     *\n     * @param {Object} options.\n     * @api private\n     */\n    constructor(opts: any);\n    /**\n     * Emits an error.\n     *\n     * @param {String} str\n     * @return {Transport} for chaining\n     * @api protected\n     */\n    protected onError(msg: any, desc: any): this;\n    /**\n     * Opens the transport.\n     *\n     * @api public\n     */\n    private open;\n    /**\n     * Closes the transport.\n     *\n     * @api public\n     */\n    close(): this;\n    /**\n     * Sends multiple packets.\n     *\n     * @param {Array} packets\n     * @api public\n     */\n    send(packets: any): void;\n    /**\n     * Called upon open\n     *\n     * @api protected\n     */\n    protected onOpen(): void;\n    /**\n     * Called with data.\n     *\n     * @param {String} data\n     * @api protected\n     */\n    protected onData(data: any): void;\n    /**\n     * Called with a decoded packet.\n     *\n     * @api protected\n     */\n    protected onPacket(packet: any): void;\n    /**\n     * Called upon close.\n     *\n     * @api protected\n     */\n    protected onClose(): void;\n    protected abstract doOpen(): any;\n    protected abstract doClose(): any;\n    protected abstract write(packets: any): any;\n}\n"
    ]
  