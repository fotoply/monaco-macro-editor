
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\client\\core\\keybindings.d.ts",
      "/**\n * A class responsible for managing defined game keybinding.\n * Each keybinding is a string key/value pair belonging to a certain namespace and a certain store scope.\n *\n * When Foundry Virtual Tabletop is initialized, a singleton instance of this class is constructed within the global\n * Game object as as game.keybindings.\n *\n * @see {@link Game#keybindings}\n * @see {@link SettingKeybindingConfig}\n * @see {@link KeybindingsConfig}\n */\ndeclare class ClientKeybindings {\n  constructor();\n\n  /** Registered Keybinding actions */\n  actions: Map<string, KeybindingActionConfig>;\n\n  /** A mapping of a string key to possible Actions that might execute off it */\n  activeKeys: Map<string, KeybindingAction[]>;\n\n  /**\n   * A stored cache of Keybind Actions Ids to Bindings\n   * @remarks This is only undefined before the \"ready\" hook.\n   */\n  bindings: Map<string, KeybindingActionBinding[]> | undefined;\n\n  /**\n   * A count of how many registered keybindings there are\n   * @internal\n   * @defaultValue `0`\n   */\n  protected _registered: number;\n\n  /**\n   * A timestamp which tracks the last time a pan operation was performed\n   * @internal\n   * @defaultValue `0`\n   */\n  protected _moveTime: number;\n\n  static MOVEMENT_DIRECTIONS: ClientKeybindings.MovementDirections;\n\n  static ZOOM_DIRECTIONS: ClientKeybindings.ZoomDirections;\n\n  /**\n   * An alias of the movement key set tracked by the keyboard\n   */\n  get moveKeys(): Set<string>;\n\n  /** Initializes the keybinding values for all registered actions */\n  initialize(): void;\n\n  /**\n   * Register a new keybinding\n   *\n   * @param namespace - The namespace the Keybinding Action belongs to\n   * @param action    - A unique machine-readable id for the Keybinding Action\n   * @param data      - Configuration for keybinding data\n   *\n   * @example <caption>Define a keybinding which shows a notification</caption>\n   * ```typescript\n   * game.keybindings.register(\"myModule\", \"showNotification\", {\n   *   name: \"My Settings Keybinding\",\n   *   hint: \"A description of what will occur when the Keybinding is executed.\",\n   *   uneditable: [\n   *     {\n   *       key: \"Digit1\",\n   *       modifiers: [\"Control\"]\n   *     }\n   *   ],\n   *   editable: [\n   *     {\n   *       key: \"F1\"\n   *     }\n   *   ],\n   *   onDown: () => { ui.notifications.info(\"Pressed!\") },\n   *   onUp: () => {},\n   *   restricted: true,                         // Restrict this Keybinding to gamemaster only?\n   *   reservedModifiers: [\"Alt\"\"],              // If the ALT modifier is pressed, the notification is permanent instead of temporary\n   *   precedence: CONST.KEYBINDING_PRECEDENCE.NORMAL\n   * }\n   * ```\n   * @throws if called after `this.bindings` has been initialized.\n   */\n  register(namespace: string, action: string, data: KeybindingActionConfig): void;\n\n  /**\n   * Get the current Bindings of a given namespace's Keybinding Action\n   *\n   * @param namespace - The namespace under which the setting is registered\n   * @param action    - The keybind action to retrieve\n   *\n   * @example <caption>Retrieve the current Keybinding Action Bindings</caption>\n   * ```typescript\n   * game.keybindings.get(\"myModule\", \"showNotification\");\n   * ```\n   */\n  get(namespace: string, action: string): KeybindingActionBinding[];\n\n  /**\n   * Set the editable Bindings of a Keybinding Action for a certain namespace and Action\n   *\n   * @param namespace - The namespace under which the Keybinding is registered\n   * @param action    - The Keybinding action to set\n   * @param bindings  - The Bindings to assign to the Keybinding\n   *\n   * @example <caption>Update the current value of a keybinding</caption>\n   * ```typescript\n   * game.keybindings.set(\"myModule\", \"showNotification\", [\n   *     {\n   *       key: \"F2\",\n   *       modifiers: [ \"CONTROL\" ]\n   *     }\n   * ]);\n   * ```\n   * @remarks Passing `undefined` or nothing as `bindings` resets to the default.\n   */\n  set(namespace: string, action: string, bindings?: KeybindingActionBinding[] | undefined): Promise<void>;\n\n  /** Reset all client keybindings back to their default configuration. */\n  resetDefaults(): Promise<void>;\n\n  /**\n   * A helper method that, when given a value, ensures that the returned value is a standardized Binding array\n   * @param values - An array of keybinding assignments to be validated\n   * @returns An array of keybinding assignments confirmed as valid\n   * @internal\n   */\n  protected static _validateBindings(values: Array<KeybindingActionBinding>): Array<Required<KeybindingActionBinding>>;\n\n  /**\n   * Validate that assigned modifiers are allowed\n   * @param keys - An array of modifiers which may be valid\n   * @returns An array of modifiers which are confirmed as valid\n   * @internal\n   */\n  protected static _validateModifiers(keys: string[]): string[];\n\n  /**\n   * Compares two Keybinding Actions based on their Order\n   * @param a - The first Keybinding Action\n   * @param b - the second Keybinding Action\n   */\n  protected static _compareActions(a: KeybindingAction, b: KeybindingAction): number;\n\n  /** Register core keybindings */\n  protected _registerCoreKeybindings(): void;\n\n  /**\n   * Handle Select all action\n   * @param event   - The originating keyboard event\n   * @param context - The context data of the event\n   * @internal\n   */\n  protected static _onSelectAllObjects(event?: KeyboardEvent, context?: KeyboardEventContext): boolean;\n\n  /**\n   * Handle Cycle View actions\n   * @param context - The context data of the event\n   * @internal\n   */\n  protected static _onCycleView(context: KeyboardEventContext): boolean;\n\n  /**\n   * Handle Dismiss actions\n   * @param context - The context data of the event\n   * @internal\n   */\n  protected static _onDismiss(context?: KeyboardEventContext): boolean;\n\n  /**\n   * Open Character sheet for current token or controlled actor\n   * @param event   -\n   * @param context - The context data of the event\n   * @internal\n   */\n  protected static _onToggleCharacterSheet(event?: KeyboardEvent, context?: KeyboardEventContext): ActorSheet | null;\n\n  /**\n   * Handle action to target the currently hovered token.\n   * @param context - The context data of the event\n   * @internal\n   */\n  protected static _onTarget(context: KeyboardEventContext): boolean;\n\n  /**\n   * Handle DELETE Keypress Events\n   * @param event   - The originating keyboard event\n   * @param context - The context data of the event\n   * @internal\n   */\n  protected static _onDelete(event: KeyboardEvent, context?: KeyboardEventContext): boolean;\n\n  /**\n   * Handle keyboard movement once a small delay has elapsed to allow for multiple simultaneous key-presses.\n   * @param context - The context data of the event\n   * @param layer   - The Placeables layer\n   * @internal\n   */\n  protected _handleMovement(context: KeyboardEventContext, layer: TokenLayer | BackgroundLayer): void;\n\n  /** Handle panning the canvas using CTRL + directional keys */\n  protected _handleCanvasPan(): ReturnType<Canvas['animatePan']>;\n\n  /**\n   * Handle Measured Ruler Movement Action\n   * @param context - The context data of the event\n   * @internal\n   */\n  protected static _onMeasuredRulerMovement(context?: KeyboardEventContext): boolean | void;\n\n  /**\n   * Handle Pause Action\n   * @param context - The context data of the event\n   * @internal\n   */\n  protected static _onPause(context?: KeyboardEventContext): true;\n\n  /**\n   * Handle Highlight action\n   * @param context - The context data of the event\n   * @internal\n   */\n  protected static _onHighlight(context?: KeyboardEventContext): boolean;\n\n  /**\n   * Handle Pan action\n   * @param context            - The context data of the event\n   * @param movementDirections - The Directions being panned in\n   * @internal\n   */\n  protected _onPan(context: KeyboardEventContext, movementDirections: ClientKeybindings.MovementDirection[]): boolean;\n\n  /**\n   * Handle Macro executions\n   * @param context - The context data of the event\n   * @internal\n   */\n  protected static _onMacroExecute(\n    context: KeyboardEventContext,\n    number: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 0\n  ): boolean;\n\n  /**\n   * Handle Macro page swaps\n   * @param context - The context data of the event\n   * @internal\n   */\n  protected static _onMacroPageSwap(context: KeyboardEventContext, page: number): true;\n\n  /**\n   * Handle action to copy data to clipboard\n   * @param context - The context data of the event\n   * @internal\n   */\n  protected static _onCopy(context?: KeyboardEventContext): boolean;\n\n  /**\n   * Handle Paste action\n   * @param context - The context data of the event\n   * @internal\n   */\n  protected static _onPaste(context: KeyboardEventContext): boolean;\n\n  /**\n   * Handle Undo action\n   * @param context - The context data of the event\n   * @internal\n   */\n  protected static _onUndo(context?: KeyboardEventContext): boolean;\n\n  /**\n   * Handle presses to keyboard zoom keys\n   * @param context       - The context data of the event\n   * @param zoomDirection - The direction to zoom\n   * @internal\n   */\n  protected static _onZoom(\n    context: KeyboardEventContext | unknown,\n    zoomDirection: ClientKeybindings.ZoomDirection\n  ): boolean;\n}\n\ndeclare namespace ClientKeybindings {\n  type MovementDirections = {\n    UP: 'up';\n    LEFT: 'left';\n    DOWN: 'down';\n    RIGHT: 'right';\n  };\n  type MovementDirection = ValueOf<MovementDirections>;\n\n  type ZoomDirections = {\n    IN: 'in';\n    OUT: 'out';\n  };\n  type ZoomDirection = ValueOf<ZoomDirections>;\n}\n"
    ]
  