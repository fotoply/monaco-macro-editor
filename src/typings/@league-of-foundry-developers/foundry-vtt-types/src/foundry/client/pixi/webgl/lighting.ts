
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\client\\pixi\\webgl\\lighting.d.ts",
      "interface LightingTechnique {\n  /** The numeric identifier of the technique */\n  id: number;\n\n  /** The localization string that labels the technique */\n  label: string;\n\n  /** The shader fragment when the technique is used */\n  shader: string;\n}\n\n/**\n * This class defines an interface which all adaptive lighting shaders extend.\n */\ndeclare class AdaptiveLightingShader extends AbstractBaseShader {\n  static override vertexShader: string;\n\n  /**\n   * Useful constant values computed at compile time\n   */\n  static CONSTANTS: string;\n\n  /**\n   * The coloration technique shader fragment\n   */\n  static get ADAPTIVE_COLORATION(): string;\n\n  /**\n   * Fade easing to use with distance in interval [0,1]\n   * @param amp  - (default: `3`)\n   * @param coef - (default: `0.80`)\n   */\n  static FADE(amp?: number, coef?: number): string;\n\n  /**\n   * Fractional Brownian Motion for a given number of octaves\n   * @param octaves - (default: `4`)\n   * @param amp     - (default: `1.0`)\n   */\n  static FBM(octaves?: number, amp?: number): string;\n\n  /**\n   * A conventional pseudo-random number generator with the \"golden\" numbers, based on uv position\n   */\n  static PRNG: string;\n\n  /**\n   * A Vec3 pseudo-random generator, based on uv position\n   */\n  static PRNG3D: string;\n\n  /**\n   * A conventional noise generator\n   */\n  static NOISE: string;\n\n  /**\n   * Convert a Hue-Saturation-Brightness color to RGB - useful to convert polar coordinates to RGB\n   */\n  static HSB2RGB: string;\n\n  /**\n   * Fast approximate perceived brightness computation\n   * Using Digital ITU BT.709 : Exact luminance factors\n   */\n  static PERCEIVED_BRIGHTNESS: string;\n\n  /**\n   * Switch between an inner and outer color, by comparing distance from center to ratio\n   * Apply a strong gradient between the two areas if gradual uniform is set to true\n   */\n  static SWITCH_COLOR: string;\n\n  /**\n   * Transition between bright and dim colors, if requested\n   */\n  static TRANSITION: string;\n\n  /**\n   * Constrain light to LOS\n   */\n  static CONSTRAIN_TO_LOS: string;\n\n  /**\n   * Incorporate falloff if a gradual uniform is requested\n   */\n  static FALLOFF: string;\n\n  /**\n   * Compute distance from the light center\n   */\n  static DISTANCE: string;\n\n  /**\n   * A mapping of available coloration techniques\n   */\n  static COLORATION_TECHNIQUES: AdaptiveLightingShader.ColorationTechniques;\n}\n\ndeclare namespace AdaptiveLightingShader {\n  interface ColorationTechniques extends Record<string, LightingTechnique> {\n    LEGACY: LightingTechnique;\n    LUMINANCE: LightingTechnique;\n    INTERNAL_HALO: LightingTechnique;\n    EXTERNAL_HALO: LightingTechnique;\n    COLOR_BURN: LightingTechnique;\n    INTERNAL_BURN: LightingTechnique;\n    EXTERNAL_BURN: LightingTechnique;\n    LOW_ABSORPTION: LightingTechnique;\n    HIGH_ABSORPTION: LightingTechnique;\n    INVERT_ABSORPTION: LightingTechnique;\n  }\n}\n\n/**\n * The default coloration shader used by standard rendering and animations\n * A fragment shader which creates a solid light source.\n */\ndeclare class AdaptiveBackgroundShader extends AdaptiveLightingShader {\n  /**\n   * Constrain light to LOS\n   */\n  static CONSTRAIN_TO_LOS: string;\n\n  /**\n   * Color adjustments : exposure, contrast and shadows\n   */\n  static ADJUSTMENTS: string;\n\n  /**\n   * Incorporate falloff if a gradual uniform is requested\n   */\n  static FALLOFF: string;\n\n  /**\n   * Memory allocations for the Adaptive Background Shader\n   */\n  static SHADER_HEADER: string;\n\n  static override fragmentShader: string;\n\n  /**\n   * @defaultValue\n   * ```javascript\n   * {\n   *   shadows: 0.0,\n   *   contrast: 0.0,\n   *   exposure: 0.0,\n   *   saturation: 0.0,\n   *   alpha: 1.0,\n   *   ratio: 0.5,\n   *   time: 0,\n   *   screenDimensions: [1, 1],\n   *   uBkgSampler: 0,\n   *   fovTexture: 0,\n   *   darkness: false,\n   *   gradual: false,\n   *   useFov: true\n   * }\n   * ```\n   */\n  static override defaultUniforms: AbstractBaseShader.Uniforms;\n\n  /**\n   * Flag whether the background shader is currently required.\n   * If key uniforms are at their default values, we don't need to render the background container.\n   */\n  get isRequired(): boolean;\n}\n\n/**\n * The default coloration shader used by standard rendering and animations\n * A fragment shader which creates a solid light source.\n */\ndeclare class AdaptiveIlluminationShader extends AdaptiveLightingShader {\n  /**\n   * Constrain light to LOS\n   */\n  static CONSTRAIN_TO_LOS: string;\n\n  /**\n   * Incorporate falloff if a gradual uniform is requested\n   */\n  static FALLOFF: string;\n\n  /**\n   * Color adjustments : exposure, contrast and shadows\n   */\n  static ADJUSTMENTS: string;\n\n  /**\n   * Memory allocations for the Adaptive Illumination Shader\n   */\n  static SHADER_HEADER: string;\n\n  static override fragmentShader: string;\n\n  /**\n   * @defaultValue\n   * ```javascript\n   * {\n   *   alpha: 1.0,\n   *   ratio: 0.5,\n   *   color: [0.9333333333333333, 0.9333333333333333, 0.9333333333333333],\n   *   colorDim: [0.5, 0.5, 0.5],\n   *   colorBright: [1.0, 1.0, 1.0],\n   *   colorBackground: [1.0, 1.0, 1.0],\n   *   darkness: false,\n   *   exposure: 0.0,\n   *   fovTexture: 0,\n   *   gradual: false,\n   *   intensity: 5,\n   *   saturation: 0.0,\n   *   screenDimensions: [1, 1],\n   *   shadows: 0.0,\n   *   time: 0,\n   *   uBkgSampler: 0,\n   *   useFov: true\n   * }\n   * ```\n   */\n  static override defaultUniforms: AbstractBaseShader.Uniforms;\n\n  /**\n   * Determine the correct illumination penalty to apply for a given darkness level and luminosity\n   * @param darknessLevel - The current darkness level on [0,1]\n   * @param luminosity    - The light source luminosity on [-1,1]\n   * @returns The amount of penalty to apply on [0,1]\n   */\n  getDarknessPenalty(darknessLevel: number, luminosity: number): number;\n}\n\n/**\n * The default coloration shader used by standard rendering and animations.\n * A fragment shader which creates a light source.\n */\ndeclare class AdaptiveColorationShader extends AdaptiveLightingShader {\n  /**\n   * Incorporate falloff if a falloff uniform is requested\n   */\n  static FALLOFF: string;\n\n  /**\n   * Color adjustments : exposure, contrast and shadows\n   */\n  static ADJUSTMENTS: string;\n\n  /**\n   * Memory allocations for the Adaptive Coloration Shader\n   */\n  static SHADER_HEADER: string;\n\n  static override fragmentShader: string;\n\n  /**\n   * @defaultValue\n   * ```javascript\n   * {\n   *   technique: 1,\n   *   ratio: 0.0,\n   *   shadows: 0.0,\n   *   saturation: 0.0,\n   *   alpha: 1.0,\n   *   color: [1.0, 1.0, 1.0],\n   *   time: 0,\n   *   intensity: 5,\n   *   darkness: false,\n   *   screenDimensions: [1, 1],\n   *   uBkgSampler: 0,\n   *   fovTexture: 0,\n   *   gradual: true,\n   *   useFov: true\n   * }\n   * ```\n   */\n  static override defaultUniforms: AbstractBaseShader.Uniforms;\n}\n\n/**\n * Allow coloring of illumination\n */\ndeclare class TorchIlluminationShader extends AdaptiveIlluminationShader {\n  static fragmentShader: string;\n}\n\n/**\n * Torch animation coloration shader\n */\ndeclare class TorchColorationShader extends AdaptiveColorationShader {\n  static fragmentShader: string;\n\n  /**\n   * @defaultValue\n   * ```typescript\n   * Object.assign({}, super.defaultUniforms, {\n   *   ratio: 0,\n   *   brightnessPulse: 1\n   * })\n   * ```\n   */\n  static override defaultUniforms: AbstractBaseShader.Uniforms;\n}\n\n/**\n * Pulse animation illumination shader\n */\ndeclare class PulseIlluminationShader extends AdaptiveIlluminationShader {\n  static fragmentShader: string;\n}\n\n/**\n * Pulse animation coloration shader\n */\ndeclare class PulseColorationShader extends AdaptiveColorationShader {\n  static fragmentShader: string;\n\n  /**\n   * @defaultValue\n   * ```typescript\n   * Object.assign({}, super.defaultUniforms, {\n   *   pulse: 0\n   * })\n   * ```\n   */\n  static override defaultUniforms: AbstractBaseShader.Uniforms;\n}\n\n/**\n * Energy field animation coloration shader\n */\ndeclare class EnergyFieldColorationShader extends AdaptiveColorationShader {\n  static fragmentShader: string;\n}\n\n/**\n * Chroma animation coloration shader\n */\ndeclare class ChromaColorationShader extends AdaptiveColorationShader {\n  static fragmentShader: string;\n}\n\n/**\n * Wave animation illumination shader\n */\ndeclare class WaveIlluminationShader extends AdaptiveIlluminationShader {\n  static fragmentShader: string;\n}\n\n/**\n * Wave animation coloration shader\n */\ndeclare class WaveColorationShader extends AdaptiveColorationShader {\n  static fragmentShader: string;\n}\n\n/**\n * Bewitching Wave animation illumination shader\n */\ndeclare class BewitchingWaveIlluminationShader extends AdaptiveIlluminationShader {\n  static fragmentShader: string;\n}\n\n/**\n * Bewitching Wave animation coloration shader\n */\ndeclare class BewitchingWaveColorationShader extends AdaptiveColorationShader {\n  static fragmentShader: string;\n}\n\n/**\n * Fog animation coloration shader\n */\ndeclare class FogColorationShader extends AdaptiveColorationShader {\n  static fragmentShader: string;\n}\n\n/**\n * Sunburst animation illumination shader\n */\ndeclare class SunburstIlluminationShader extends AdaptiveIlluminationShader {\n  static fragmentShader: string;\n}\n\n/**\n * Sunburst animation coloration shader\n */\ndeclare class SunburstColorationShader extends AdaptiveColorationShader {\n  static fragmentShader: string;\n}\n\n/**\n * Light dome animation coloration shader\n */\ndeclare class LightDomeColorationShader extends AdaptiveColorationShader {\n  static fragmentShader: string;\n}\n\n/**\n * Emanation animation coloration shader\n */\ndeclare class EmanationColorationShader extends AdaptiveColorationShader {\n  static fragmentShader: string;\n}\n\n/**\n * Ghost light animation illumination shader\n */\ndeclare class GhostLightIlluminationShader extends AdaptiveIlluminationShader {\n  static fragmentShader: string;\n}\n\n/**\n * Ghost light animation coloration shader\n */\ndeclare class GhostLightColorationShader extends AdaptiveColorationShader {\n  static fragmentShader: string;\n}\n\n/**\n * Hexagonal dome animation coloration shader\n */\ndeclare class HexaDomeColorationShader extends AdaptiveColorationShader {\n  static fragmentShader: string;\n}\n\n/**\n * Roiling mass illumination shader - intended primarily for darkness\n */\ndeclare class RoilingIlluminationShader extends AdaptiveIlluminationShader {\n  static fragmentShader: string;\n}\n\n/**\n * Black Hole animation illumination shader\n */\ndeclare class BlackHoleIlluminationShader extends AdaptiveIlluminationShader {\n  static fragmentShader: string;\n}\n\n/**\n * Vortex animation coloration shader\n */\ndeclare class VortexColorationShader extends AdaptiveColorationShader {\n  static fragmentShader: string;\n}\n\n/**\n * Vortex animation coloration shader\n */\ndeclare class VortexIlluminationShader extends AdaptiveIlluminationShader {\n  static fragmentShader: string;\n}\n\n/**\n * Swirling rainbow animation coloration shader\n */\ndeclare class SwirlingRainbowColorationShader extends AdaptiveColorationShader {\n  static fragmentShader: string;\n}\n\n/**\n * Radial rainbow animation coloration shader\n */\ndeclare class RadialRainbowColorationShader extends AdaptiveColorationShader {\n  static fragmentShader: string;\n}\n\n/**\n * Fairy light animation coloration shader\n */\ndeclare class FairyLightColorationShader extends AdaptiveColorationShader {\n  static fragmentShader: string;\n}\n\n/**\n * Fairy light animation illumination shader\n */\ndeclare class FairyLightIlluminationShader extends AdaptiveIlluminationShader {\n  static fragmentShader: string;\n}\n"
    ]
  