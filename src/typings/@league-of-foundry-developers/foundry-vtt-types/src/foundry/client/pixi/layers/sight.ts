
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\client\\pixi\\layers\\sight.d.ts",
      "/**\n * The Sight Layer which implements dynamic vision, lighting, and fog of war\n * This layer uses an event-driven workflow to perform the minimal required calculation in response to changes.\n * @see PointSource\n *\n * The container structure of this layer is as follows:\n *\n * unexplored   The unexplored background which spans the entire canvas\n * explored     The exploration container which tracks exploration progress\n * revealed       A container of regions which have previously been revealed\n * saved          The saved fog exploration texture\n * pending        Pending exploration which has not yet been committed to the texture\n * vision         The container of current vision exploration\n * vision.base      Baseline provided vision\n * vision.fov       Current light source field-of-view polygons\n * vision.los       Current vision source line-of-sight polygons\n * vision.roofs     Roof textures which should temporarily be revealed\n *\n * @example <caption>The sightRefresh hook</caption>\n * ```typescript\n * Hooks.on(\"sightRefresh\", layer => {});\n * ```\n */\nimport { ConfiguredDocumentClass } from '../../../../types/helperTypes';\n\ndeclare global {\n  class SightLayer extends CanvasLayer<SightLayer.LayerOptions> {\n    /** The unexplored background which spans the entire canvas */\n    unexplored?: PIXI.Graphics;\n\n    /** The exploration container which tracks exploration progress */\n    explored?: PIXI.Container;\n\n    /** A container of regions which have previously been revealed */\n    revealed?: PIXI.Container;\n\n    /** The saved fog exploration texture */\n    saved?: PIXI.Sprite;\n\n    /** Pending exploration which has not yet been committed to the texture */\n    pending?: PIXI.Container;\n\n    constructor();\n\n    /**\n     * The FogExploration document which applies to this canvas view\n     * @defaultValue `null`\n     */\n    exploration: InstanceType<ConfiguredDocumentClass<typeof FogExploration>> | null;\n\n    /**\n     * A Collection of vision sources which are currently active within the rendered Scene.\n     */\n    sources: foundry.utils.Collection<PointSource>;\n\n    /**\n     * A status flag for whether the layer initialization workflow has succeeded\n     * @defaultValue `false`\n     * @internal\n     */\n    protected _initialized: boolean;\n\n    /**\n     * A debounced function to save fog of war exploration once a stream of updates have stopped\n     */\n    debounceSaveFog: (...args: Parameters<this['saveFog']>) => void;\n\n    /**\n     * The current vision container which provides line-of-sight for vision sources and field-of-view of light sources.\n     * @defaultValue `undefined`\n     */\n    vision:\n      | (PIXI.Container & {\n          /** Baseline provided vision */\n          base: PIXI.Graphics;\n\n          /** Current light source field-of-view polygons */\n          fov: PIXI.Container;\n\n          /** Current vision source line-of-sight polygons */\n          los: PIXI.Graphics;\n\n          /** Roof textures which should temporarily be revealed */\n          roofs: PIXI.Container;\n        })\n      | undefined;\n\n    /**\n     * The canonical line-of-sight polygon which defines current Token visibility.\n     * @defaultValue `undefined`\n     */\n    los: PIXI.Graphics | undefined;\n\n    /**\n     * A cached container which creates a render texture used for the LOS mask.\n     * @defaultValue `undefined`\n     */\n    losCache: CachedContainer | undefined;\n\n    /**\n     * Track whether we have pending fog updates which have not yet been saved to the database\n     * @defaultValue `false`\n     * @internal\n     */\n    protected _fogUpdated: boolean;\n\n    /**\n     * The configured resolution used for the saved fog-of-war texture\n     * @defaultValue `undefined`\n     * @internal\n     */\n    protected _fogResolution: { resolution: number; width: number; height: number } | undefined;\n\n    /**\n     * A pool of RenderTexture objects which can be cycled through to save fog exploration progress.\n     * @defaultValue `[]`\n     * @internal\n     */\n    protected _fogTextures: PIXI.RenderTexture[];\n\n    /**\n     * Track whether there is a source of vision within the buffer region outside the primary scene canvas\n     * @defaultValue `false`\n     * @internal\n     */\n    protected _inBuffer: boolean;\n\n    /**\n     * Define the threshold value for the number of distinct Wall endpoints.\n     * Below this threshold, exact vision computation is used by casting a Ray at every endpoint.\n     * Above this threshold, approximate vision computation is used by culling to only nearby endpoints.\n     * @defaultValue `200`\n     */\n    static EXACT_VISION_THRESHOLD: number;\n\n    /**\n     * Define the number of positions that are explored before a set of fog updates are pushed to the server.\n     * @defaultValue `10`\n     */\n    static FOG_COMMIT_THRESHOLD: number;\n\n    /**\n     * The maximum allowable fog of war texture size.\n     * @defaultValue `4096`\n     */\n    static MAXIMUM_FOW_TEXTURE_SIZE: number;\n\n    /**\n     * @remarks This is not overridden in foundry but reflects the real behavior.\n     */\n    static get instance(): Canvas['sight'];\n\n    /**\n     * @defaultValue\n     * ```typescript\n     * foundry.utils.mergeObject(super.layerOptions, {\n     *  name: 'sight',\n     *  zIndex: 400\n     * })\n     * ```\n     */\n    static override get layerOptions(): SightLayer.LayerOptions;\n\n    /**\n     * Does the currently viewed Scene support Token field of vision?\n     */\n    get tokenVision(): boolean;\n\n    /**\n     * Does the currently viewed Scene support fog of war exploration?\n     */\n    get fogExploration(): boolean;\n\n    override tearDown(): Promise<this>;\n\n    /**\n     * Initialize fog of war - resetting it when switching scenes or re-drawing the canvas\n     */\n    initializeFog(): Promise<void>;\n\n    /**\n     * Initialize all Token sight sources which are present on this layer\n     */\n    initializeSources(): Promise<void>;\n\n    /**\n     * Update FoW unexplored and explored colors\n     */\n    updateFogExplorationColors(): void;\n\n    override draw(): Promise<this>;\n\n    /**\n     * Create the cached container and sprite used to provide a LOS mask\n     * @internal\n     */\n    protected _createCachedMask(): void;\n\n    /**\n     * Construct a vision container that is used to render a single view position.\n     * @internal\n     */\n    protected _createVisionContainer(): PIXI.Container;\n\n    /**\n     * Update the display of the sight layer.\n     * Organize sources into rendering queues and draw lighting containers for each source\n     */\n    refresh({\n      forceUpdateFog,\n      skipUpdateFog\n    }?: {\n      /**\n       * Always update the Fog exploration progress for this update\n       * (default: `false`)\n       */\n      forceUpdateFog?: boolean;\n\n      /**\n       * Never update the Fog exploration progress for this update\n       * (default: `false`)\n       */\n      skipUpdateFog?: boolean;\n    }): void | ReturnType<this['restrictVisibility']>;\n\n    /**\n     * Restrict the visibility of certain canvas assets (like Tokens or DoorControls) based on the visibility polygon\n     * These assets should only be displayed if they are visible given the current player's field of view\n     */\n    restrictVisibility(): void;\n\n    /**\n     * Test whether a point on the Canvas is visible based on the current vision and LOS polygons\n     *\n     * @param point - The point in space to test, an object with coordinates x and y.\n     * @returns Whether the point is currently visible.\n     */\n    testVisibility(\n      point: Point,\n      {\n        tolerance,\n        object\n      }?: {\n        /**\n         * A numeric radial offset which allows for a non-exact match. For example, if\n         * tolerance is 2 then the test will pass if the point is within 2px of a vision\n         * polygon.\n         * (defaultValue: `2`)\n         */\n        tolerance?: number;\n\n        /**\n         * An optional reference to the object whose visibility is being tested\n         * (defaultValue: `null`)\n         */\n        object?: PIXI.DisplayObject | null;\n      }\n    ): boolean;\n\n    /** @internal */\n    protected _getFogTexture(): PIXI.RenderTexture;\n\n    /**\n     * Once a new Fog of War location is explored, composite the explored container with the current staging sprite\n     * Save that staging Sprite as the rendered fog exploration and swap it out for a fresh staging texture\n     * Do all this asynchronously, so it doesn't block token movement animation since this takes some extra time\n     */\n    commitFog(): void;\n\n    /**\n     * Load existing fog of war data from local storage and populate the initial exploration sprite\n     */\n    loadFog(): Promise<PIXI.Texture | void>;\n\n    /**\n     * Dispatch a request to reset the fog of war exploration status for all users within this Scene.\n     * Once the server has deleted existing FogExploration documents, the _onResetFog handler will re-draw the canvas.\n     */\n    resetFog(): Promise<void>;\n\n    /**\n     * Save Fog of War exploration data to a base64 string to the FogExploration document in the database.\n     * Assumes that the fog exploration has already been rendered as fog.rendered.texture.\n     */\n    saveFog(): Promise<void>;\n\n    /**\n     * Update the fog layer when a player token reaches a board position which was not previously explored\n     * @param source - The vision source for which the fog layer should update\n     * @param force  - Force fog to be updated even if the location is already explored\n     *                 (default: `false`)\n     */\n    updateFog(source: PointSource, force?: boolean): void;\n\n    /**\n     * Choose an adaptive fog rendering resolution which downscales the saved fog textures for larger dimension Scenes.\n     * It is important that the width and height of the fog texture is evenly divisible by the downscaling resolution.\n     * @internal\n     */\n    protected _configureFogResolution(): { resolution: number; width: number; height: number };\n\n    /**\n     * If fog of war data is reset from the server, re-draw the canvas\n     */\n    protected _handleResetFog(): Promise<void>;\n  }\n\n  namespace SightLayer {\n    interface LayerOptions extends CanvasLayer.LayerOptions {\n      name: 'sight';\n    }\n  }\n}\n"
    ]
  