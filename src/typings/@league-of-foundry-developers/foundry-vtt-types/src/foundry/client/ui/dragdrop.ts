
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\client\\ui\\dragdrop.d.ts",
      "interface DragDropConfiguration {\n  /**\n   * The CSS selector used to target draggable elements.\n   */\n  dragSelector?: DragDrop['dragSelector'];\n\n  /**\n   * The CSS selector used to target viable drop targets.\n   */\n  dropSelector?: DragDrop['dropSelector'];\n\n  /**\n   * An object of permission test functions for each action\n   * @defaultValue `{}`\n   */\n  permissions?: DragDrop['permissions'];\n\n  /**\n   * An object of callback functions for each action\n   * @defaultValue `{}`\n   */\n  callbacks?: DragDrop['callbacks'];\n}\n\n/**\n * A controller class for managing drag and drop workflows within an Application instance.\n * The controller manages the following actions: dragstart, dragover, drop\n * @see {@link Application}\n *\n * @example\n * ```typescript\n * const dragDrop = new DragDrop({\n *   dragSelector: \".item\",\n *   dropSelector: \".items\",\n *   permissions: { dragstart: this._canDragStart.bind(this), drop: this._canDragDrop.bind(this) },\n *   callbacks: { dragstart: this._onDragStart.bind(this), drop: this._onDragDrop.bind(this) }\n * });\n * dragDrop.bind(html);\n * ```\n */\ndeclare class DragDrop {\n  /**\n   * @param options - (default: `{}`)\n   */\n  constructor({ dragSelector, dropSelector, permissions, callbacks }?: DragDropConfiguration);\n\n  /**\n   * The HTML selector which identifies draggable elements\n   * @defaultValue `undefined`\n   */\n  dragSelector: string | null | undefined;\n\n  /**\n   * The HTML selector which identifies drop targets\n   * @defaultValue `undefined`\n   */\n  dropSelector: string | null | undefined;\n\n  /**\n   * A set of permission checking functions for each action of the Drag and Drop workflow\n   * @defaultValue `{}`\n   */\n  permissions: Partial<Record<DragDrop.Action, (selector: string | undefined) => boolean>>;\n\n  /**\n   * A set of callback functions for each action of the Drag and Drop workflow\n   * @defaultValue `{}`\n   */\n  callbacks: Partial<Record<DragDrop.Action, (event: DragEvent) => void>>;\n\n  /**\n   * Bind the DragDrop controller to an HTML application\n   * @param html - The HTML element to which the handler is bound\n   */\n  bind(html: HTMLElement): this;\n\n  /**\n   * Execute a callback function associated with a certain action in the workflow\n   * @param event  - The drag event being handled\n   * @param action - The action being attempted\n   */\n  callback(event: DragEvent, action: DragDrop.Action): void;\n\n  /**\n   * Execute a callback function associated with a certain action in the workflow\n   * @param action   - The action being attempted\n   * @param selector - The selector being targeted\n   * @returns Can the action be performed?\n   */\n  can(action: DragDrop.Action, selector: string | undefined): boolean;\n\n  /**\n   * Handle the start of a drag workflow\n   * @param event - The drag event being handled\n   * @internal\n   */\n  protected _handleDragStart(event: DragEvent): void;\n\n  /**\n   * Handle a dragged element over a droppable target\n   * @param event - The drag event being handled\n   * @internal\n   */\n  protected _handleDragOver(event: DragEvent): false;\n\n  /**\n   * Handle a dragged element dropped on a droppable target\n   * @param event - The drag event being handled\n   * @internal\n   */\n  protected _handleDrop(event: DragEvent): unknown;\n\n  static createDragImage(img: HTMLImageElement, width: number, height: number): HTMLDivElement;\n}\n\ndeclare namespace DragDrop {\n  type Action = 'dragstart' | 'dragover' | 'drop';\n}\n"
    ]
  