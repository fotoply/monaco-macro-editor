
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\client\\data\\abstract\\client-document.d.ts",
      "import { ContextType, DocumentModificationOptions } from '../../../common/abstract/document.mjs';\nimport { ConfiguredDocumentClass, ConstructorDataType, DocumentConstructor } from '../../../../types/helperTypes';\n\ndeclare global {\n  // TODO: Replace ConstructorOf<â€¦> with DocumentConstructor once the problem with circular reference has been solved\n  /**\n   * A mixin which extends each Document definition with specialized client-side behaviors.\n   * This mixin defines the client-side interface for database operations and common document behaviors.\n   */\n  const ClientDocumentMixin: <T extends ConstructorOf<foundry.abstract.Document<any, any>>>(\n    Base: T\n  ) => ClientDocumentConstructor<T>;\n\n  namespace ClientDocumentMixin {\n    interface CompendiumExportOptions {\n      /**\n       * Clear the flags object\n       * @defaultValue `false`\n       */\n      clearFlags?: boolean | undefined;\n\n      /**\n       * Clear the currently assigned folder and sort order\n       * @defaultValue `true`\n       */\n      clearSort?: boolean | undefined;\n\n      /**\n       * Clear document permissions\n       * @defaultValue `true`\n       */\n      clearPermissions?: boolean | undefined;\n\n      /**\n       * Clear fields which store document state\n       * @defaultValue `true`\n       */\n      clearState?: boolean | undefined;\n\n      /**\n       * Retain the current Document id\n       * @defaultValue `false`\n       */\n      keepId?: boolean | undefined;\n    }\n  }\n}\n\ntype ClientDocumentConstructor<T extends ConstructorOf<foundry.abstract.Document<any, any>>> = Pick<T, keyof T> &\n  Pick<typeof ClientDocumentMixin, keyof typeof ClientDocumentMixin> & {\n    new (...args: ConstructorParameters<T>): InstanceType<T> & ClientDocumentMixin<InstanceType<T>>;\n  };\n\nexport declare class ClientDocumentMixin<T extends foundry.abstract.Document<any, any>> {\n  constructor(data?: ConstructorDataType<T['data']>, context?: ContextType<T>);\n\n  /**\n   * A collection of Application instances which should be re-rendered whenever this document is updated.\n   * The keys of this object are the application ids and the values are Application instances. Each\n   * Application in this object will have its render method called by {@link Document#render}.\n   * @see {@link Document#render}\n   */\n  apps: Record<string, Application>;\n\n  /**\n   * A cached reference to the FormApplication instance used to configure this Document.\n   * @defaultValue `null`\n   */\n  protected _sheet: FormApplication | null; // TODO: Replace with InstanceType<ConfiguredSheetClass<T>> once the circular reference problem has been solved\n\n  /**\n   * @see abstract.Document#_initialize\n   */\n  protected _initialize(): void;\n\n  /**\n   * Return a reference to the parent Collection instance which contains this Document.\n   */\n  get collection(): Collection<this>;\n\n  /**\n   * A reference to the Compendium Collection which contains this Document, if any, otherwise undefined.\n   */\n  get compendium(): any; // TODO: CompendiumCollection<this>\n\n  /**\n   * Return a reference to the Folder to which this Document belongs, if any.\n   *\n   * @example <caption>A Document may belong to a Folder</caption>\n   * ```typescript\n   * let folder = game.folders.contents[0];\n   * let actor = await Actor.create({name: \"New Actor\", folder: folder.id});\n   * console.log(actor.data.folder); // folder.id;\n   * console.log(actor.folder); // folder;\n   * ```\n   */\n  get folder(): Folder | null;\n\n  /**\n   * A boolean indicator for whether or not the current game User has ownership rights for this Document.\n   * Different Document types may have more specialized rules for what constitutes ownership.\n   */\n  get isOwner(): boolean;\n\n  /**\n   * Test whether this Document is owned by any non-Gamemaster User.\n   */\n  get hasPlayerOwner(): boolean;\n\n  /**\n   * A boolean indicator for whether the current game User has exactly LIMITED visibility (and no greater).\n   */\n  get limited(): boolean;\n\n  /**\n   * Return a string which creates a dynamic link to this Document instance.\n   */\n  get link(): string;\n\n  /**\n   * Return the permission level that the current game User has over this Document.\n   * See the CONST.DOCUMENT_PERMISSION_LEVELS object for an enumeration of these levels.\n   *\n   * @example\n   * ```typescript\n   * game.user.id; // \"dkasjkkj23kjf\"\n   * actor.data.permission; // {default: 1, \"dkasjkkj23kjf\": 2};\n   * actor.permission; // 2\n   * ```\n   */\n  get permission(): ValueOf<typeof CONST.DOCUMENT_PERMISSION_LEVELS>;\n\n  /**\n   * Lazily obtain a FormApplication instance used to configure this Document, or null if no sheet is available.\n   */\n  get sheet(): FormApplication | null; // TODO: Replace mit InstanceType<ConfiguredSheetClass<T>> once the circular reference problem has been solved\n\n  /**\n   * A Universally Unique Identifier (uuid) for this Document instance.\n   */\n  get uuid(): string;\n\n  /**\n   * A boolean indicator for whether or not the current game User has at least limited visibility for this Document.\n   * Different Document types may have more specialized rules for what determines visibility.\n   */\n  get visible(): boolean;\n\n  /**\n   * Obtain the FormApplication class constructor which should be used to configure this Document.\n   */\n  protected _getSheetClass(): ConstructorOf<FormApplication> | null; // TODO: Replace with ConfiguredSheetClass<T> once the circular reference problem has been solved\n\n  /**\n   * Prepare data for the Document.\n   * Begin by resetting the prepared data back to its source state.\n   * Next prepare any embedded Documents and compute any derived data elements.\n   */\n  prepareData(): void;\n\n  /**\n   * Prepare data related to this Document itself, before any embedded Documents or derived data is computed.\n   */\n  prepareBaseData(): void;\n\n  /**\n   * Prepare all embedded Document instances which exist within this primary Document.\n   */\n  prepareEmbeddedDocuments(): void;\n\n  /**\n   * Apply transformations or derivations to the values of the source data object.\n   * Compute data fields whose values are not stored to the database.\n   */\n  prepareDerivedData(): void;\n\n  /**\n   * Render all of the Application instances which are connected to this document by calling their respective\n   * @see Application#render\n   * @param force   - Force rendering\n   *                  (default: `false`)\n   * @param context - Optional context\n   *                  (default: `{}`)\n   */\n  render(force?: boolean, context?: Application.RenderOptions): void;\n\n  /**\n   * Determine the sort order for this Document by positioning it relative a target sibling.\n   * See SortingHelper.performIntegerSort for more details\n   * @param options - Sorting options provided to SortingHelper.performIntegerSort\n   * @returns The Document after it has been re-sorted\n   */\n  sortRelative(options: SortOptions<this>): Promise<this>;\n\n  /**\n   * @see abstract.Document#_onCreate\n   */\n  protected _onCreate(data: T['data']['_source'], options: DocumentModificationOptions, userId: string): void;\n\n  /**\n   * @see abstract.Document#_onUpdate\n   */\n  protected _onUpdate(\n    data: DeepPartial<T['data']['_source']>,\n    options: DocumentModificationOptions,\n    userId: string\n  ): void;\n\n  /**\n   * @see abstract.Document#_onDelete\n   */\n  protected _onDelete(options: DocumentModificationOptions, userId: string): void;\n\n  /**\n   * Preliminary actions taken before a set of embedded Documents in this parent Document are created.\n   * @param embeddedName - The name of the embedded Document type\n   * @param result       - An Array of created data objects\n   * @param options      - Options which modified the creation operation\n   * @param userId       - The ID of the User who triggered the operation\n   */\n  protected _preCreateEmbeddedDocuments(\n    embeddedName: string,\n    result: Record<string, unknown>[],\n    options: DocumentModificationOptions,\n    userId: string\n  ): void;\n\n  /**\n   * Follow-up actions taken after a set of embedded Documents in this parent Document are created.\n   * @param embeddedName - The name of the embedded Document type\n   * @param documents    - An Array of created Documents\n   * @param result       - An Array of created data objects\n   * @param options      - Options which modified the creation operation\n   * @param userId       - The ID of the User who triggered the operation\n   */\n  protected _onCreateEmbeddedDocuments(\n    embeddedName: string,\n    documents: foundry.abstract.Document<any, any>[],\n    result: Record<string, unknown>[],\n    options: DocumentModificationOptions,\n    userId: string\n  ): void;\n\n  /**\n   * Preliminary actions taken before a set of embedded Documents in this parent Document are updated.\n   * @param embeddedName - The name of the embedded Document type\n   * @param result       - An Array of incremental data objects\n   * @param options      - Options which modified the update operation\n   * @param userId       - The ID of the User who triggered the operation\n   */\n  protected _preUpdateEmbeddedDocuments(\n    embeddedName: string,\n    result: Record<string, unknown>[],\n    options: DocumentModificationOptions,\n    userId: string\n  ): void;\n\n  /**\n   * Follow-up actions taken after a set of embedded Documents in this parent Document are updated.\n   * @param embeddedName - The name of the embedded Document type\n   * @param documents    - An Array of updated Documents\n   * @param result       - An Array of incremental data objects\n   * @param options      - Options which modified the update operation\n   * @param userId       - The ID of the User who triggered the operation\n   */\n  protected _onUpdateEmbeddedDocuments(\n    embeddedName: string,\n    documents: foundry.abstract.Document<any, any>[],\n    result: Record<string, unknown>[],\n    options: DocumentModificationContext,\n    userId: string\n  ): void;\n\n  /**\n   * Preliminary actions taken before a set of embedded Documents in this parent Document are deleted.\n   * @param embeddedName - The name of the embedded Document type\n   * @param result       - An Array of document IDs being deleted\n   * @param options      - Options which modified the deletion operation\n   * @param userId       - The ID of the User who triggered the operation\n   */\n  protected _preDeleteEmbeddedDocuments(\n    embeddedName: string,\n    result: string[],\n    options: DocumentModificationContext,\n    userId: string\n  ): void;\n\n  /**\n   * Follow-up actions taken after a set of embedded Documents in this parent Document are deleted.\n   * @param embeddedName - The name of the embedded Document type\n   * @param documents    - An Array of deleted Documents\n   * @param result       - An Array of document IDs being deleted\n   * @param options      - Options which modified the deletion operation\n   * @param userId       - The ID of the User who triggered the operation\n   */\n  protected _onDeleteEmbeddedDocuments(\n    embeddedName: string,\n    documents: foundry.abstract.Document<any, any>[],\n    result: string[],\n    options: DocumentModificationContext,\n    userId: string\n  ): void;\n\n  /**\n   * Present a Dialog form to create a new Document of this type.\n   * Choose a name and a type from a select menu of types.\n   * @param data    - Initial data with which to populate the creation form\n   *                  (default: `{}`)\n   * @param context - Additional context options or dialog positioning options\n   *                  (default: `{}`)\n   * @returns A Promise which resolves to the created Document, or null if the dialog was\n   *          closed.\n   */\n  static createDialog<T extends DocumentConstructor>(\n    this: T,\n    data?:\n      | DeepPartial<\n          | ConstructorDataType<InstanceType<T>['data']>\n          | (ConstructorDataType<InstanceType<T>['data']> & Record<string, unknown>)\n        >\n      | undefined,\n    context?: (Pick<DocumentModificationContext, 'parent' | 'pack'> & Partial<DialogOptions>) | undefined\n  ): Promise<InstanceType<ConfiguredDocumentClass<T>> | null | undefined>;\n\n  /**\n   * Present a Dialog form to confirm deletion of this Document.\n   * @param options - Positioning and sizing options for the resulting dialog\n   *                  (default: `{}`)\n   * @returns A Promise which resolves to the deleted Document\n   */\n  deleteDialog(options?: Partial<DialogOptions> | undefined): Promise<this | false | null | undefined>;\n\n  /**\n   * Export document data to a JSON file which can be saved by the client and later imported into a different session.\n   * @param options - Additional options passed to the {@link ClientDocumentMixin#toCompendium} method\n   */\n  exportToJSON(options?: ClientDocumentMixin.CompendiumExportOptions): void;\n\n  /**\n   * A helper function to handle obtaining the relevant Document from dropped data provided via a DataTransfer event.\n   * The dropped data could have:\n   * 1. A compendium pack and entry id\n   * 2. A World Document _id\n   * 3. A data object explicitly provided\n   *\n   * @param data    - The data object extracted from a DataTransfer event\n   * @param options - Additional options which configure data retrieval\n   * @returns The Document data that should be handled by the drop handler\n   */\n  static fromDropData<T extends DocumentConstructor>(\n    this: T,\n    data: DropData<InstanceType<T>>,\n    options?: FromDropDataOptions\n  ): Promise<InstanceType<ConfiguredDocumentClass<T>> | undefined>;\n\n  /**\n   * Update this Document using a provided JSON string.\n   * @param json - JSON data string\n   * @returns The updated Document\n   */\n  importFromJSON(json: string): Promise<this>;\n\n  /**\n   * Render an import dialog for updating the data related to this Document through an exported JSON file\n   */\n  importFromJSONDialog(): Promise<void>;\n\n  /**\n   * Transform the Document data to be stored in a Compendium pack.\n   * Remove any features of the data which are world-specific.\n   * This function is asynchronous in case any complex operations are required prior to exporting.\n   * @param pack    - A specific pack being exported to\n   * @param options - Additional options which modify how the document is converted\n   *                  (default: `{}`)\n   * @returns A data object of cleaned data suitable for compendium import\n   */\n  toCompendium(\n    pack?: CompendiumCollection<CompendiumCollection.Metadata> | null | undefined,\n    options?: ClientDocumentMixin.CompendiumExportOptions | undefined\n  ): Omit<T['data']['_source'], '_id' | 'folder' | 'permission'> & {\n    permission?: T['data']['_source']['permission'];\n  };\n\n  /**\n   * @deprecated since v9 - Use prepareEmbeddedDocuments instead.\n   */\n  prepareEmbeddedEntities(): void;\n}\n\ninterface SortOptions<T> {\n  /**\n   * @defaultValue `[]`\n   */\n  siblings?: T[];\n\n  /**\n   * @defaultValue `true`\n   */\n  sortBefore?: boolean;\n\n  /**\n   * @defaultValue `'sort'`\n   */\n  sortKey?: string;\n\n  /**\n   * @defaultValue `null`\n   */\n  target?: T | null;\n\n  /**\n   * @defaultValue `{}`\n   */\n  updateData?: any;\n}\n\nexport type DropData<T extends foundry.abstract.Document<any, any>> = DropData.Data<T> | DropData.Pack | DropData.Id;\n\ndeclare namespace DropData {\n  interface Data<T extends foundry.abstract.Document<any, any>> {\n    data: T['data']['_source'];\n  }\n\n  interface Pack {\n    pack: string;\n  }\n\n  interface Id {\n    id: string;\n  }\n}\n\ninterface FromDropDataOptions {\n  /**\n   * Import the provided document data into the World, if it is not already a World-level Document reference\n   * @defaultValue `false`\n   */\n  importWorld?: boolean;\n}\n"
    ]
  