
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\client\\pixi\\sources\\vision-source.d.ts",
      "import type { ConfiguredObjectClassForName } from '../../../../types/helperTypes';\n\ndeclare global {\n  interface VisionSourceData extends Exclude<PointSource.Data, 'walls'> {\n    x: number;\n\n    y: number;\n\n    /** An optional z-index sorting for the source */\n    z: number;\n\n    /** The angle of rotation for this point source */\n    rotation: number;\n\n    /** The angle of emission for this point source */\n    angle: number;\n\n    /** The allowed radius of bright vision or illumination */\n    bright: number;\n\n    /** The allowed radius of dim vision or illumination */\n    dim: number;\n  }\n\n  /**\n   * A specialized subclass of the PointSource abstraction which is used to control the rendering of vision sources.\n   */\n  class VisionSource extends PointSource {\n    /** @param object - The Token object that generates this vision source */\n    constructor(object: InstanceType<ConfiguredObjectClassForName<'Token'>>);\n\n    /**\n     * The current vision mesh for this source\n     * @defaultValue `this._createMesh(AdaptiveIlluminationShader)`\n     */\n    illumination: PIXI.Mesh;\n\n    static override sourceType: 'vision';\n\n    /**\n     * Keys in the VisionSourceData structure which, when modified, change the appearance of the source\n     * @defaultValue `[\"dim\", \"bright\"]`\n     * @internal\n     */\n    protected static _appearanceKeys: string[];\n\n    /**\n     * The object of data which configures how the source is rendered\n     * @defaultValue `{}`\n     */\n    data: Partial<VisionSourceData>;\n\n    /**\n     * The ratio of dim:bright as part of the source radius\n     * @defaultValue `undefined`\n     */\n    ratio: number | undefined;\n\n    /**\n     * The rendered field-of-vision texture for the source for use within shaders.\n     * @defaultValue `undefined`\n     */\n    fovTexture: PIXI.RenderTexture | undefined;\n\n    /**\n     * Track which uniforms need to be reset\n     * @defaultValue `{ illumination: true }`\n     * @internal\n     */\n    protected _resetUniforms: { illumination: boolean };\n\n    /**\n     * To track if a source is temporarily shutdown to avoid glitches\n     * @defaultValue `{ illumination: false }`\n     * @internal\n     */\n    protected _shutdown: { illumination: boolean };\n\n    /**\n     * Initialize the source with provided object data.\n     * @param data - Initial data provided to the point source\n     * @returns A reference to the initialized source\n     */\n    initialize(data?: Partial<VisionSourceData>): this;\n\n    fov?: PIXI.Circle;\n\n    /**\n     * Initialize the blend mode and vertical sorting of this source relative to others in the container.\n     * @internal\n     */\n    protected _initializeBlending(): void;\n\n    /**\n     * Process new input data provided to the LightSource.\n     * @param data - Initial data provided to the vision source\n     * @returns The changes compared to the prior data\n     * @internal\n     */\n    protected _initializeData(data: Partial<VisionSourceData>): Partial<VisionSourceData>;\n\n    /**\n     * Draw the display of this source to remove darkness from the LightingLayer illumination container.\n     * @see LightSource#drawLight\n     * @returns The rendered light container\n     */\n    drawVision(): PIXI.Container | null;\n\n    /**\n     * Draw a Container used for exploring the FOV area of Token sight in the SightLayer\n     */\n    drawSight(): PIXI.Container;\n\n    /**\n     * Update shader uniforms by providing data from this PointSource\n     * @param shader - The shader being updated\n     * @internal\n     */\n    protected _updateIlluminationUniforms(shader: AdaptiveIlluminationShader): void;\n\n    protected override _drawRenderTextureContainer(): PIXI.Container;\n  }\n}\n"
    ]
  