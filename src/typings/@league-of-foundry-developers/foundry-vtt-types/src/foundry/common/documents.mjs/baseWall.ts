
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\common\\documents.mjs\\baseWall.d.ts",
      "import { ConfiguredDocumentClass } from '../../../types/helperTypes';\nimport { Context, DocumentMetadata } from '../abstract/document.mjs';\nimport { Document } from '../abstract/module.mjs';\nimport * as data from '../data/data.mjs';\nimport type { WallDataConstructorData } from '../data/data.mjs/wallData';\nimport { BaseScene } from './baseScene';\nimport { BaseUser } from './baseUser';\n\ntype WallMetadata = Merge<\n  DocumentMetadata,\n  {\n    name: 'Wall';\n    collection: 'walls';\n    label: 'DOCUMENT.Wall';\n    labelPlural: 'DOCUMENT.Walls';\n    isEmbedded: true;\n    permissions: {\n      update: (user: BaseUser, doc: BaseWall, data: DeepPartial<WallDataConstructorData>) => boolean;\n    };\n  }\n>;\n\n/**\n * The base Wall model definition which defines common behavior of an Wall document between both client and server.\n */\nexport declare class BaseWall extends Document<data.WallData, InstanceType<ConfiguredDocumentClass<typeof BaseScene>>> {\n  /**\n   * @remarks This is not overridden in foundry but reflects the real behavior.\n   */\n  constructor(\n    data: WallDataConstructorData,\n    context?: Context<InstanceType<ConfiguredDocumentClass<typeof BaseScene>>>\n  );\n\n  static override get schema(): typeof data.WallData;\n\n  static override get metadata(): WallMetadata;\n\n  /**\n   * Is a user able to update an existing Wall?\n   */\n  protected static _canUpdate(user: BaseUser, doc: BaseWall, data: DeepPartial<WallDataConstructorData>): boolean;\n}\n"
    ]
  