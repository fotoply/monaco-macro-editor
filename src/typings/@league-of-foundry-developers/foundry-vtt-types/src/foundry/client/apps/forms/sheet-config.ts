
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\client\\apps\\forms\\sheet-config.d.ts",
      "import type { DocumentConstructor, DocumentType } from '../../../../types/helperTypes';\n\ndeclare global {\n  /**\n   * Document Sheet Configuration Application\n   * @typeParam Options          - The type of the options object\n   * @typeParam Data             - The data structure used to render the handlebars template.\n   * @typeParam ConcreteDocument - The type of the Document which is being managed\n   */\n  class DocumentSheetConfig<\n    Options extends FormApplicationOptions = FormApplicationOptions,\n    Data extends object = DocumentSheetConfig.Data<foundry.abstract.Document<any, any>, Options>,\n    ConcreteDocument extends foundry.abstract.Document<any, any> = Data extends DocumentSheetConfig.Data<infer T>\n      ? T\n      : foundry.abstract.Document<any, any>\n  > extends FormApplication<Options, Data, ConcreteDocument> {\n    /**\n     * @defaultValue\n     * ```typescript\n     * foundry.utils.mergeObject(super.defaultOptions, {\n     *   classes: [\"form\", \"sheet-config\"],\n     *   template: \"templates/sheets/sheet-config.html\",\n     *   width: 400\n     * })\n     * ```\n     */\n    static get defaultOptions(): FormApplicationOptions;\n\n    /**\n     * An array of pending sheet assignments which are submitted before other elements of the framework are ready.\n     * @internal\n     */\n    protected static _pending: Array<DocumentSheetConfig.SheetAssignment>;\n\n    override get title(): string;\n\n    override getData(options?: Partial<Options>): Data | Promise<Data>;\n\n    protected override _updateObject(event: Event, formData: DocumentSheetConfig.FormData): Promise<unknown>;\n\n    /**\n     * Initialize the configured Sheet preferences for Documents which support dynamic Sheet assignment\n     * Create the configuration structure for supported documents\n     * Process any pending sheet registrations\n     * Update the default values from settings data\n     */\n    static initializeSheets(): void;\n\n    /**\n     * @internal\n     */\n    protected static _getDocumentTypes(cls: DocumentConstructor, types?: string[]): string[];\n\n    /**\n     * Register a sheet class as a candidate which can be used to display documents of a given type\n     * @param documentClass - The Document class for which to register a new Sheet option\n     * @param scope         - Provide a unique namespace scope for this sheet\n     * @param sheetClass    - A defined Application class used to render the sheet\n     * @param options       - Additional options used for sheet registration\n     */\n    static registerSheet(\n      documentClass: DocumentConstructor,\n      scope: string,\n      sheetClass: ConstructorOf<FormApplication<FormApplicationOptions, any, any>>,\n      { label, types, makeDefault }?: DocumentSheetConfig.RegisterSheetOptions | undefined\n    ): void;\n\n    /**\n     * Perform the sheet registration\n     * @internal\n     */\n    protected static _registerSheet({\n      documentClass,\n      id,\n      label,\n      sheetClass,\n      types,\n      makeDefault\n    }: Omit<DocumentSheetConfig.SheetRegistration, 'action'>): void;\n\n    /**\n     * Unregister a sheet class, removing it from the list of available Applications to use for a Document type\n     * @param documentClass - The Document class for which to register a new Sheet option\n     * @param scope         - Provide a unique namespace scope for this sheet\n     * @param sheetClass    - A defined Application class used to render the sheet\n     * @param types         - An Array of types for which this sheet should be removed\n     */\n    static unregisterSheet(\n      documentClass: DocumentConstructor,\n      scope: string,\n      sheetClass: ConstructorOf<FormApplication<FormApplicationOptions, any, any>>,\n      { types }?: { types?: string[] }\n    ): void;\n\n    /**\n     * Perform the sheet de-registration\n     * @internal\n     */\n    protected static _unregisterSheet({\n      documentClass,\n      id,\n      types\n    }: Omit<DocumentSheetConfig.SheetUnregistration, 'action'>): void;\n\n    /**\n     * Update the currently default Sheets using a new core world setting\n     */\n    static updateDefaultSheets(setting?: Record<DocumentType, Record<string, string>>): void;\n\n    /**\n     * Initialize default sheet configurations for all document types.\n     * @internal\n     */\n    protected static _registerDefaultSheets(): void;\n  }\n\n  namespace DocumentSheetConfig {\n    type SheetRegistration = {\n      action: 'register';\n      documentClass: DocumentConstructor;\n      id: string;\n      label: string;\n      sheetClass: ConstructorOf<Application>;\n      types: string[];\n      makeDefault: boolean;\n    };\n\n    type SheetUnregistration = {\n      action: 'unregister';\n      documentClass: DocumentConstructor;\n      id: string;\n      types: string[];\n    };\n\n    type SheetAssignment = SheetRegistration | SheetUnregistration;\n\n    /**\n     * @typeParam ConcreteDocument - The type of the Document which is being managed\n     * @typeParam Options          - The type of the options object\n     */\n    interface Data<\n      ConcreteDocument extends foundry.abstract.Document<any, any>,\n      Options extends FormApplicationOptions = FormApplicationOptions\n    > {\n      isGM: boolean;\n      object: ConcreteDocument['data']['_source'];\n      options: Options;\n      sheetClass: string;\n      sheetClasses: Record<string, string>;\n      defaultClass: string;\n      blankLabel: string;\n    }\n\n    interface FormData {\n      defaultClass: string;\n      sheetClass: string;\n    }\n\n    interface RegisterSheetOptions {\n      /** A human readable label for the sheet name, which will be localized */\n      label?: string;\n\n      /** An array of document types for which this sheet should be used */\n      types?: string[];\n\n      /**\n       * Whether to make this sheet the default for provided types\n       * @defaultValue `false`\n       */\n      makeDefault?: boolean;\n    }\n  }\n\n  /**\n   * @deprecated since v9\n   */\n  class EntitySheetConfig<\n    Options extends FormApplicationOptions = FormApplicationOptions,\n    Data extends object = DocumentSheetConfig.Data<foundry.abstract.Document<any, any>, Options>,\n    ConcreteDocument extends foundry.abstract.Document<any, any> = Data extends DocumentSheetConfig.Data<infer T>\n      ? T\n      : foundry.abstract.Document<any, any>\n  > extends DocumentSheetConfig<Options, Data, ConcreteDocument> {}\n}\n"
    ]
  