
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\client\\pixi\\layers\\controls\\hud.d.ts",
      "/**\n * An extension of PIXI.Transform.\n * This uses a different DisplayObject than the current parent as the reference for the worldTransform.\n */\ndeclare class SynchronizedTransform extends PIXI.Transform {\n  constructor(transform: PIXI.Transform);\n\n  /**\n   * A list of attributes from the transform reference which should be synchronized\n   * @defaultValue\n   * ```javascript\n   * [\n   *   \"localTransform\", \"position\", \"scale\", \"pivot\", \"skew\", \"_rotation\",\n   *   \"_cx\", \"_sx\", \"_cy\", \"_sy\", \"_localID\", \"_currentLocalID\"\n   * ];\n   * ```\n   */\n  static synchronizedAttributes: string[];\n\n  /**\n   * A Transform instance which defines the reference point for the worldTransform\n   */\n  get reference(): PIXI.Transform;\n\n  set reference(value: PIXI.Transform);\n\n  /** @internal */\n  protected _reference: PIXI.Transform;\n\n  /** @internal */\n  protected _syncLocalID: number;\n\n  override updateTransform(parentTransform: PIXI.Transform): void;\n\n  override updateLocalTransform(): void;\n}\n\n/**\n * An extension of PIXI.Container used as the interface frame for a PlaceableObject on the ControlsLayer\n *\n * @see {@link PlaceableObject}\n * @see {@link ControlsLayer}\n */\ndeclare class ObjectHUD extends PIXI.Container {\n  constructor(object: PIXI.DisplayObject);\n\n  /**\n   * The object that this HUD container is linked to\n   */\n  object: PIXI.DisplayObject;\n\n  /**\n   * Use the linked object's transform matrix to easily synchronize position\n   */\n  transform: PIXI.Transform;\n\n  // @ts-expect-error this is a property in `PIXI.Container` but foundry overrides it as an accessor.\n  override get visible(): boolean;\n  override set visible(value: boolean);\n\n  // @ts-expect-error this is a property in `PIXI.Container` but foundry overrides it as an accessor.\n  override get renderable(): boolean;\n  override set renderable(value: boolean);\n\n  /**\n   * Display scrolling status text originating from this ObjectHUD container.\n   * @param content - The text content to display\n   * @param options - (default: `{}`)\n   * @returns The created PreciseText object which is scrolling\n   */\n  createScrollingText(\n    content: string,\n    options?: ObjectHUD.CreateScrollingTextOptions | undefined\n  ): Promise<PreciseText | null>;\n\n  /**\n   * Orchestrate the animation of the scrolling text in this HUD\n   * @param text     - The PrecisText instance to animate\n   * @param duration - A desired duration of animation\n   * @param dx       - A horizontal distance to animate the text\n   *                   (default: `0`)\n   * @param dy       - A vertical distance to animate the text\n   *                   (default: `0`)\n   * @internal\n   */\n  protected _animateScrollText(text: PreciseText, duration: number, dx?: number, dy?: number): Promise<void>;\n}\n\ntype TextStyleProperties = Exclude<ConstructorParameters<typeof PIXI.TextStyle>[0], undefined>;\n\ndeclare namespace ObjectHUD {\n  interface CreateScrollingTextOptions extends TextStyleProperties {\n    /**\n     * The original anchor point where the text first appears\n     * @defaultValue `CONST.TEXT_ANCHOR_POINTS.CENTER`\n     */\n    anchor?: foundry.CONST.TEXT_ANCHOR_POINTS | undefined;\n\n    /**\n     * The direction in which the text scrolls\n     * @defaultValue `CONST.TEXT_ANCHOR_POINTS.TOP`\n     */\n    direction?: foundry.CONST.TEXT_ANCHOR_POINTS | undefined;\n\n    /**\n     * The duration of the scrolling effect in milliseconds\n     * @defaultValue `2000`\n     */\n    duration?: number | undefined;\n\n    /**\n     * An amount of randomization between 0 and 1 to apply to the initial Position\n     * @defaultValue `0`\n     */\n    jitter?: number | undefined;\n  }\n}\n"
    ]
  