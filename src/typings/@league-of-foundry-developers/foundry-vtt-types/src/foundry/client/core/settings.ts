
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\client\\core\\settings.d.ts",
      "import type { DocumentSubTypes, DocumentType } from '../../../types/helperTypes';\n\nimport type { TokenDataSource } from '../../common/data/data.mjs/tokenData';\n\ndeclare global {\n  /**\n   * A class responsible for managing defined game settings or settings menus.\n   * Each setting is a string key/value pair belonging to a certain package and a certain store scope.\n   *\n   * When Foundry Virtual Tabletop is initialized, a singleton instance of this class is constructed within the global\n   * Game object as as game.settings.\n   *\n   * @see {@link Game#settings}\n   * @see {@link Settings}\n   * @see {@link SettingsConfig}\n   */\n  class ClientSettings {\n    constructor(worldSettings?: Setting['data']['_source'][]);\n\n    /**\n     * A object of registered game settings for this scope\n     */\n    settings: Map<string, SettingConfig>;\n\n    /**\n     * Registered settings menus which trigger secondary applications\n     */\n    menus: Map<string, SettingSubmenuConfig>;\n\n    /**\n     * The storage interfaces used for persisting settings\n     * Each storage interface shares the same API as window.localStorage\n     * @remarks This is a lie, it doesn't actually have the same interface...\n     */\n    storage: Map<string, Storage | WorldSettings>;\n\n    /**\n     * The types of settings which should be constructed as a primitive type\n     */\n    protected static PRIMITIVE_TYPES: [typeof String, typeof Number, typeof Boolean, typeof Array];\n\n    /**\n     * Return a singleton instance of the Game Settings Configuration app\n     */\n    get sheet(): SettingsConfig;\n\n    /**\n     * Register a new game setting under this setting scope\n     *\n     * @param namespace - The namespace under which the setting is registered\n     * @param key       - The key name for the setting under the namespace module\n     * @param data      - Configuration for setting data\n     * @typeParam N     - The namespace under which the setting is registered, as a type\n     * @typeParam K     - The key name for the setting under the namespace module, as a type\n     * @typeParam T     - The type of the setting value\n     *\n     * @example\n     * ```typescript\n     * // Register a client setting\n     * game.settings.register(\"myModule\", \"myClientSetting\", {\n     *   name: \"Register a Module Setting with Choices\",\n     *   hint: \"A description of the registered setting and its behavior.\",\n     *   scope: \"client\",     // This specifies a client-stored setting\n     *   config: true,        // This specifies that the setting appears in the configuration view\n     *   type: String,\n     *   choices: {           // If choices are defined, the resulting setting will be a select menu\n     *     \"a\": \"Option A\",\n     *     \"b\": \"Option B\"\n     *   },\n     *   default: \"a\",        // The default value for the setting\n     *   onChange: value => { // A callback function which triggers when the setting is changed\n     *     console.log(value)\n     *   }\n     * });\n     * ```\n     *\n     * @example\n     * ```typescript\n     * // Register a world setting\n     * game.settings.register(\"myModule\", \"myWorldSetting\", {\n     *   name: \"Register a Module Setting with a Range slider\",\n     *   hint: \"A description of the registered setting and its behavior.\",\n     *   scope: \"world\",      // This specifies a world-level setting\n     *   config: true,        // This specifies that the setting appears in the configuration view\n     *   type: Number,\n     *   range: {             // If range is specified, the resulting setting will be a range slider\n     *     min: 0,\n     *     max: 100,\n     *     step: 10\n     *   }\n     *   default: 50,         // The default value for the setting\n     *   onChange: value => { // A callback function which triggers when the setting is changed\n     *     console.log(value)\n     *   }\n     * });\n     * ```\n     */\n    register<N extends string, K extends string, T>(\n      namespace: N,\n      key: K,\n      data: ClientSettings.Values[`${N}.${K}`] extends string | number | boolean | Array<any> | object\n        ? ClientSettings.PartialSettingConfig<ClientSettings.Values[`${N}.${K}`]>\n        : ClientSettings.PartialSettingConfig<T>\n    ): void;\n\n    /**\n     * Register a new sub-settings menu\n     *\n     * @param namespace - The namespace under which the menu is registered\n     * @param key       - The key name for the setting under the namespace module\n     * @param data      - Configuration for setting data\n     * @typeParam N     - The namespace under which the menu is registered, as a type\n     * @typeParam K     - The key name for the setting under the namespace module, as a type\n     *\n     * @example\n     * ```typescript\n     * // Define a settings submenu which handles advanced configuration needs\n     * game.settings.registerMenu(\"myModule\", \"mySettingsMenu\", {\n     *   name: \"My Settings Submenu\",\n     *   label: \"Settings Menu Label\",      // The text label used in the button\n     *   hint: \"A description of what will occur in the submenu dialog.\",\n     *   icon: \"fas fa-bars\",               // A Font Awesome icon used in the submenu button\n     *   type: MySubmenuApplicationClass,   // A FormApplication subclass which should be created\n     *   restricted: true                   // Restrict this submenu to gamemaster only?\n     * });\n     * ```\n     */\n    registerMenu<N extends string, K extends string>(\n      namespace: N,\n      key: K,\n      data: ClientSettings.PartialSettingSubmenuConfig\n    ): void;\n\n    /**\n     * Get the value of a game setting for a certain namespace and setting key\n     *\n     * @param namespace - The namespace under which the setting is registered\n     * @param key       - The setting key to retrieve\n     * @typeParam N     - The namespace under which the setting is registered, as a type\n     * @typeParam K     - The setting key to retrieve, as a type\n     *\n     * @example\n     * ```typescript\n     * // Retrieve the current setting value\n     * game.settings.get(\"myModule\", \"myClientSetting\");\n     * ```\n     */\n    get<N extends string, K extends string>(namespace: N, key: K): ClientSettings.Values[`${N}.${K}`];\n\n    /**\n     * Set the value of a game setting for a certain namespace and setting key\n     *\n     * @param namespace - The namespace under which the setting is registered\n     * @param key       - The setting key to retrieve\n     * @param value     - The data to assign to the setting key\n     * @typeParam N     - The namespace under which the setting is registered, as a type\n     * @typeParam K     - The setting key to retrieve, as a type\n     * @typeParam V     - The type of the value being set\n     *\n     * @example\n     * ```typescript\n     * // Update the current value of a setting\n     * game.settings.set(\"myModule\", \"myClientSetting\", \"b\");\n     * ```\n     */\n    set<N extends string, K extends string, V extends ClientSettings.Values[`${N}.${K}`]>(\n      namespace: N,\n      key: K,\n      value: V\n    ): Promise<V>;\n  }\n\n  namespace ClientSettings {\n    type PartialSettingConfig<T = unknown> = InexactPartial<Omit<SettingConfig<T>, 'key' | 'namespace'>>;\n\n    type PartialSettingSubmenuConfig = Omit<SettingSubmenuConfig, 'key' | 'namespace'>;\n\n    interface Values {\n      'core.animateRollTable': boolean;\n      'core.chatBubbles': boolean;\n      'core.chatBubblesPan': boolean;\n      'core.combatTrackerConfig': { resource: string; skipDefeated: boolean } | {};\n      'core.compendiumConfiguration': Partial<Record<string, CompendiumCollection.Configuration>>;\n      'core.coneTemplateType': 'round' | 'flat';\n      'core.defaultDrawingConfig': foundry.data.DrawingData['_source'] | {};\n      'core.defaultToken': DeepPartial<TokenDataSource>;\n      'core.disableResolutionScaling': boolean;\n      'core.fontSize': number;\n      'core.fpsMeter': boolean;\n      'core.globalAmbientVolume': number;\n      'core.globalInterfaceVolume': number;\n      'core.globalPlaylistVolume': number;\n      'core.keybindings': Record<string, KeybindingActionBinding[]>;\n      'core.language': string;\n      'core.leftClickRelease': boolean;\n      'core.lightAnimation': boolean;\n      'core.maxFPS': number;\n      'core.mipmap': boolean;\n      'core.moduleConfiguration': Record<string, boolean>;\n      'core.noCanvas': boolean;\n      'core.notesDisplayToggle': boolean;\n      'core.nue.shownTips': boolean;\n      'core.performanceMode': boolean;\n      'core.permissions': Game.Permissions;\n      'core.playlist.playingLocation': 'top' | 'bottom';\n      'core.rollMode': keyof CONFIG.Dice.RollModes;\n      'core.rtcClientSettings': typeof AVSettings.DEFAULT_CLIENT_SETTINGS;\n      'core.rtcWorldSettings': typeof AVSettings.DEFAULT_WORLD_SETTINGS;\n      'core.scrollingStatusText': boolean;\n      'core.sheetClasses': {\n        [Key in DocumentType as DocumentSubTypes<Key> extends string ? Key : never]?: Record<\n          DocumentSubTypes<Key> & string,\n          string\n        >;\n      };\n      'core.time': number;\n      'core.tokenDragPreview': boolean;\n      'core.visionAnimation': boolean;\n      [key: string]: unknown;\n    }\n  }\n}\n"
    ]
  