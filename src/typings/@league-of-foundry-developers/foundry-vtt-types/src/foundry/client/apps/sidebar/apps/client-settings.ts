
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\client\\apps\\sidebar\\apps\\client-settings.d.ts",
      "import type { ConfiguredDocumentClass } from '../../../../../types/helperTypes';\n\ndeclare global {\n  /**\n   * The Application responsible for displaying and editing the client and world settings for this world.\n   * This form renders the settings defined via the game.settings.register API which have config = true\n   * @typeParam Options - The type of the options object\n   * @typeParam Data    - The data structure used to render the handlebars template.\n   */\n  class SettingsConfig<\n    Options extends FormApplicationOptions = FormApplicationOptions,\n    Data extends object = SettingsConfig.Data\n  > extends FormApplication<Options, Data> {\n    /**\n     * @defaultValue\n     * ```typescript\n     * foundry.utils.mergeObject(super.defaultOptions, {\n     *   title: game.i18n.localize(\"SETTINGS.Title\"),\n     *   id: \"client-settings\",\n     *   template: \"templates/sidebar/apps/settings-config.html\",\n     *   width: 600,\n     *   height: \"auto\",\n     *   tabs: [\n     *     {navSelector: \".tabs\", contentSelector: \".content\", initial: \"core\"}\n     *   ]\n     * })\n     * ```\n     */\n    static override get defaultOptions(): typeof FormApplication['defaultOptions'];\n\n    override getData(options?: Partial<Options>): Data | Promise<Data>;\n\n    override activateListeners(html: JQuery): void;\n\n    /**\n     * Handle activating the button to configure User Role permissions\n     * @param event - The initial button click event\n     * @internal\n     */\n    protected _onClickSubmenu(event: JQuery.ClickEvent): void;\n\n    /**\n     * Handle button click to reset default settings\n     * @param event - The initial button click event\n     * @internal\n     */\n    protected _onResetDefaults(event: JQuery.ClickEvent): void;\n\n    /**\n     * Preview font scaling as the setting is changed.\n     * @param event - The triggering event.\n     * @internal\n     */\n    protected _previewFontScaling(event: JQuery.ChangeEvent): void;\n\n    override close(options?: Application.CloseOptions | undefined): Promise<void>;\n\n    protected override _updateObject(event: Event, formData: SettingsConfig.FormData): Promise<unknown>;\n  }\n\n  namespace SettingsConfig {\n    interface Data {\n      user: StoredDocument<InstanceType<ConfiguredDocumentClass<typeof User>>>;\n      canConfigure: boolean;\n      systemTitle: Game['system']['data']['title'];\n      data: Data.Data;\n    }\n\n    namespace Data {\n      interface Data {\n        core: {\n          version: string;\n          menus: SettingSubmenuConfig[];\n          settings: Setting[];\n          none: boolean;\n        };\n        system: {\n          title: Game['system']['data']['title'];\n          menus: SettingSubmenuConfig[];\n          settings: Setting[];\n          none: boolean;\n        };\n        modules: { title: string; menus: SettingSubmenuConfig[]; settings: Setting[] }[];\n      }\n\n      interface Setting extends Omit<SettingConfig, 'type'> {\n        id: string;\n        name: string;\n        hint: string;\n        value: unknown;\n        type: string;\n        isCheckbox: boolean;\n        isSelect: boolean;\n        isRange: boolean;\n        filePickerType: FilePicker.Type | undefined;\n      }\n    }\n\n    interface FormData {\n      'core.animateRollTable': boolean;\n      'core.chatBubbles': boolean;\n      'core.chatBubblesPan': boolean;\n      'core.coneTemplateType': 'round' | 'flat';\n      'core.language': string;\n      'core.leftClickRelease': boolean;\n      'core.lightAnimation': boolean;\n      'core.maxFPS': number;\n      'core.mipmap': boolean;\n      'core.noCanvas': boolean;\n      'core.softShadows': boolean;\n      'core.tokenDragPreview': boolean;\n      'core.visionAnimation': boolean;\n      [key: string]: unknown;\n    }\n  }\n}\n"
    ]
  