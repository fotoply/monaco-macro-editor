
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\client\\data\\documents\\actor.d.ts",
      "import {\n  ConfiguredDocumentClass,\n  ConfiguredObjectClassForName,\n  DocumentConstructor\n} from '../../../../types/helperTypes';\nimport { DocumentModificationOptions } from '../../../common/abstract/document.mjs';\nimport EmbeddedCollection from '../../../common/abstract/embedded-collection.mjs';\nimport type { ActorDataConstructorData } from '../../../common/data/data.mjs/actorData.js';\n\ndeclare global {\n  /**\n   * The client-side Actor document which extends the common BaseActor model.\n   * Each Actor document contains ActorData which defines its data schema.\n   *\n   * @see {@link data.ActorData}              The Actor data schema\n   * @see {@link documents.Actors}            The world-level collection of Actor documents\n   * @see {@link applications.ActorSheet}     The Actor configuration application\n   *\n   * @example <caption>Create a new Actor</caption>\n   * ```typescript\n   * let actor = await Actor.create({\n   *   name: \"New Test Actor\",\n   *   type: \"character\",\n   *   img: \"artwork/character-profile.jpg\"\n   * });\n   * ```\n   *\n   * @example <caption>Retrieve an existing Actor</caption>\n   * ```typescript\n   * let actor = game.actors.get(actorId);\n   * ```\n   */\n  class Actor extends ClientDocumentMixin(foundry.documents.BaseActor) {\n    /**\n     * @param data    - Initial data provided to construct the Actor document\n     * @param context - The document context, see {@link foundry.abstract.Document}\n     */\n    constructor(\n      data: ConstructorParameters<typeof foundry.documents.BaseActor>[0],\n      context?: ConstructorParameters<typeof foundry.documents.BaseActor>[1]\n    );\n\n    /**\n     * An object that tracks which tracks the changes to the data model which were applied by active effects\n     * @defaultValue `{}`\n     */\n    overrides: Record<string, unknown>;\n\n    /**\n     * A cached array of image paths which can be used for this Actor's token.\n     * Null if the list has not yet been populated.\n     * @defaultValue `null`\n     */\n    protected _tokenImages: string[] | null;\n\n    /**\n     * Cache the last drawn wildcard token to avoid repeat draws\n     * @defaultValue `null`\n     */\n    protected _lastWildcard: string | null;\n\n    /**\n     * A convenient reference to the file path of the Actor's profile image\n     */\n    get img(): this['data']['img'];\n\n    /**\n     * Provide a thumbnail image path used to represent this document.\n     */\n    get thumbnail(): this['data']['img'];\n\n    /**\n     * Provide an object which organizes all embedded Item instances by their type\n     */\n    get itemTypes(): Record<\n      foundry.documents.BaseItem['data']['type'],\n      Array<InstanceType<ConfiguredDocumentClass<typeof foundry.documents.BaseItem>>>\n    >;\n    /**\n     * Test whether an Actor document is a synthetic representation of a Token (if true) or a full Document (if false)\n     */\n    get isToken(): boolean;\n\n    /**\n     * An array of ActiveEffect instances which are present on the Actor which have a limited duration.\n     */\n    get temporaryEffects(): ReturnType<this['effects']['filter']>;\n\n    /**\n     * Return a reference to the TokenDocument which owns this Actor as a synthetic override\n     */\n    get token(): InstanceType<ConfiguredDocumentClass<typeof foundry.documents.BaseToken>> | null;\n\n    override get uuid(): string;\n\n    /**\n     * Apply any transformations to the Actor data which are caused by ActiveEffects.\n     */\n    applyActiveEffects(): void;\n\n    /**\n     * Retrieve an Array of active tokens which represent this Actor in the current canvas Scene.\n     * If the canvas is not currently active, or there are no linked actors, the returned Array will be empty.\n     * If the Actor is a synthetic token actor, only the exact Token which it represents will be returned.\n     *\n     * @param linked   - Limit results to Tokens which are linked to the Actor. Otherwise return all Tokens even those which are not linked. (default: `false`)\n     * @param document - Return the Document instance rather than the PlaceableObject (default: `false`)\n     * @returns An array of Token instances in the current Scene which reference this Actor.\n     */\n    getActiveTokens(\n      linked: boolean,\n      document: true\n    ): InstanceType<ConfiguredDocumentClass<typeof foundry.documents.BaseToken>>[];\n    getActiveTokens(linked?: boolean, document?: false): InstanceType<ConfiguredObjectClassForName<'Token'>>[];\n    getActiveTokens(\n      linked: boolean,\n      document: boolean\n    ):\n      | InstanceType<ConfiguredObjectClassForName<'Token'>>[]\n      | InstanceType<ConfiguredDocumentClass<typeof foundry.documents.BaseToken>>[];\n\n    /**\n     * Prepare a data object which defines the data schema used by dice roll commands against this Actor\n     */\n    getRollData(): object;\n\n    /**\n     * Create a new TokenData object which can be used to create a Token representation of the Actor.\n     * @param data - Additional data, such as x, y, rotation, etc. for the created token data (default: `{}`)\n     * @returns The created TokenData instance\n     */\n    getTokenData(data?: object): Promise<foundry.data.TokenData>;\n\n    /**\n     * Get an Array of Token images which could represent this Actor\n     */\n    getTokenImages(): Promise<string[]>;\n\n    /**\n     * Handle how changes to a Token attribute bar are applied to the Actor.\n     * This allows for game systems to override this behavior and deploy special logic.\n     * @param attribute - The attribute path\n     * @param value     - The target attribute value\n     * @param isDelta   - Whether the number represents a relative change (true) or an absolute change (false) (default: `false`)\n     * @param isBar     - Whether the new value is part of an attribute bar, or just a direct value (default: `true`)\n     * @returns The updated Actor document\n     */\n    modifyTokenAttribute(attribute: string, value: number, isDelta: boolean, isBar: boolean): Promise<this | undefined>;\n\n    override prepareEmbeddedDocuments(): void;\n\n    /**\n     * Roll initiative for all Combatants in the currently active Combat encounter which are associated with this Actor.\n     * If viewing a full Actor document, all Tokens which map to that actor will be targeted for initiative rolls.\n     * If viewing a synthetic Token actor, only that particular Token will be targeted for an initiative roll.\n     *\n     * @param options - Configuration for how initiative for this Actor is rolled.\n     * @returns A promise which resolves to the Combat document once rolls are complete.\n     */\n    rollInitiative(options?: Actor.RollInitiativeOptions): Promise<void>;\n\n    override getEmbeddedCollection(\n      embeddedName: string\n    ): EmbeddedCollection<DocumentConstructor, foundry.data.ActorData>;\n\n    protected override _preCreate(\n      data: ActorDataConstructorData,\n      options: DocumentModificationOptions,\n      user: foundry.documents.BaseUser\n    ): Promise<void>;\n\n    protected override _onUpdate(\n      changed: DeepPartial<foundry.data.ActorData['_source']>,\n      options: DocumentModificationOptions,\n      user: string\n    ): void;\n\n    protected override _onCreateEmbeddedDocuments(\n      embeddedName: string,\n      documents: foundry.abstract.Document<any, any>[],\n      result: Record<string, unknown>[],\n      options: DocumentModificationOptions,\n      userId: string\n    ): void;\n\n    protected override _onUpdateEmbeddedDocuments(\n      embeddedName: string,\n      documents: foundry.abstract.Document<any, any>[],\n      result: Record<string, unknown>[],\n      options: DocumentModificationOptions,\n      userId: string\n    ): void;\n\n    protected override _onDeleteEmbeddedDocuments(\n      embeddedName: string,\n      documents: foundry.abstract.Document<any, any>[],\n      result: string[],\n      options: DocumentModificationContext,\n      userId: string\n    ): void;\n\n    /**\n     * Perform various actions on active tokens if embedded documents were changed.\n     * @param embeddedName - The type of embedded document that was modified.\n     * @internal\n     */\n    protected _onEmbeddedDocumentChange(embeddedName: string): void;\n  }\n  namespace Actor {\n    interface RollInitiativeOptions {\n      /**\n       * Create new Combatant entries for Tokens associated with this actor.\n       * @defaultValue `false`\n       */\n      createCombatants?: boolean;\n\n      /**\n       * Re-roll the initiative for this Actor if it has already been rolled.\n       * @defaultValue `false`\n       */\n      rerollInitiative?: boolean;\n\n      /**\n       * Additional options passed to the Combat#rollInitiative method.\n       * @defaultValue `{}`\n       * TODO: Solve once Combat is more fleshed out. @see Combat#rollInitiative\n       */\n      initiativeOptions?: object;\n    }\n  }\n}\n"
    ]
  