
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\common\\types.mjs.d.ts",
      "/**\n * A single point, expressed as an object \\{x, y\\}\n */\ntype Point = PIXI.Point | { x: number; y: number };\n\n/**\n * A single point, expressed as an array \\[x,y\\]\n */\ntype PointArray = [x: number, y: number];\n\n/**\n * A standard rectangle interface.\n */\ntype Rectangle =\n  | PIXI.Rectangle\n  | {\n      x: number;\n      y: number;\n      width: number;\n      height: number;\n    };\n\n/** A Client Setting */\ninterface SettingConfig<T = unknown> {\n  /** A unique machine-readable id for the setting */\n  key: string;\n\n  /** The namespace the setting belongs to */\n  namespace: string;\n\n  /** The human readable name */\n  name?: string | undefined;\n\n  /** An additional human readable hint */\n  hint?: string | undefined;\n\n  /**\n   * The scope the Setting is stored in, either World or Client\n   * @defaultValue `'client'`\n   */\n  scope: 'world' | 'client';\n\n  /** Indicates if this Setting should render in the Config application */\n  config?: boolean | undefined;\n\n  /** The JS Type that the Setting is storing */\n  type?: T extends string\n    ? typeof String\n    : T extends number\n    ? typeof Number\n    : T extends boolean\n    ? typeof Boolean\n    : T extends Array<any>\n    ? typeof Array\n    : ConstructorOf<T>;\n\n  /** For string Types, defines the allowable values */\n  choices?: (T extends number | string ? Record<T, string> : never) | undefined;\n\n  /** For numeric Types, defines the allowable range */\n  range?:\n    | (T extends number\n        ? {\n            max: number;\n            min: number;\n            step: number;\n          }\n        : never)\n    | undefined;\n\n  /** The default value */\n  default?: T;\n\n  /** Executes when the value of this Setting changes */\n  onChange?: (value: T) => void;\n\n  filePicker?: (T extends string ? true | 'audio' | 'image' | 'video' | 'imagevideo' | 'folder' : never) | undefined;\n}\n\ninterface SettingSubmenuConfig {\n  key: string;\n\n  namespace: string;\n\n  /** The human readable name */\n  name?: string | undefined;\n\n  /** The human readable label */\n  label?: string | undefined;\n\n  /** An additional human readable hint */\n  hint?: string | undefined;\n\n  /** The classname of an Icon to render */\n  icon?: string | undefined;\n\n  /** The FormApplication to render */\n  type: new () => FormApplication<any, any, any>;\n\n  /** If true, only a GM can edit this Setting */\n  restricted?: boolean | undefined;\n}\n\n/** A Client Keybinding Action Configuration */\ninterface KeybindingActionConfig {\n  /** The namespace within which the action was registered */\n  namespace?: string;\n\n  /** The human readable name */\n  name: string;\n\n  /** An additional human readable hint */\n  hint?: string;\n\n  /** The default bindings that can never be changed nor removed. */\n  uneditable?: KeybindingActionBinding[];\n\n  /** The default bindings that can be changed by the user. */\n  editable?: KeybindingActionBinding[];\n\n  /** A function to execute when a key down event occurs. If True is returned, the event is consumed and no further keybinds execute. */\n  onDown?: (ctx: KeyboardEventContext) => boolean | void;\n\n  /** A function to execute when a key up event occurs. If True is returned, the event is consumed and no further keybinds execute. */\n  onUp?: (ctx: KeyboardEventContext) => boolean | void;\n\n  /** If True, allows Repeat events to execute the Action's onDown. Defaults to false. */\n  repeat?: boolean;\n\n  /** If true, only a GM can edit and execute this Action */\n  restricted?: boolean;\n\n  /** Modifiers such as [ \"CONTROL\" ] that can be also pressed when executing this Action. Prevents using one of these modifiers as a Binding. */\n  reservedModifiers?: string[];\n\n  /** The preferred precedence of running this Keybinding Action */\n  precedence?: number; // TODO: KEYBINDING_PRECEDENCE?\n\n  /** The recorded registration order of the action */\n  order?: number;\n}\n\n/** A Client Keybinding Action Binding */\ninterface KeybindingActionBinding {\n  /** The KeyboardEvent#code value from https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/code/code_values */\n  key: string;\n\n  /** An array of modifiers keys from KeyboardManager.MODIFIER_KEYS which are required for this binding to be activated */\n  modifiers?: string[];\n}\n\n/** An action that can occur when a key is pressed */\ninterface KeybindingAction {\n  /** The namespaced machine identifier of the Action */\n  action: string;\n\n  /** The Keyboard key */\n  key: string;\n\n  /** The human readable name */\n  name: string;\n\n  /** Required modifiers */\n  requiredModifiers: string[];\n\n  /** Optional (reserved) modifiers */\n  optionalModifiers: string[];\n\n  /** The handler that executes onDown */\n  onDown: Function;\n\n  /** The handler that executes onUp */\n  onUp: Function;\n\n  /** If True, allows Repeat events to execute this Action's onDown */\n  repeat: boolean;\n\n  /** If true, only a GM can execute this Action */\n  restricted: boolean;\n\n  /** The registration precedence */\n  precedence: number;\n\n  /** The registration order */\n  order: number;\n}\n\n/** Keyboard event context */\ninterface KeyboardEventContext {\n  /** The normalized string key, such as \"A\" */\n  key: string;\n\n  /** The originating keypress event */\n  event: KeyboardEvent;\n\n  /** Is the Shift modifier being pressed */\n  isShift: boolean;\n\n  /** Is the Control or Meta modifier being processed */\n  isControl: boolean;\n\n  /** Is the Alt modifier being pressed */\n  isAlt: boolean;\n\n  /** Are any of the modifiers being pressed */\n  hasModifier: boolean;\n\n  /** A list of string modifiers applied to this context, such as [ \"CONTROL\" ] */\n  modifiers: string[];\n\n  /** True if the Key is Up, else False if down */\n  up: boolean;\n\n  /** True if the given key is being held down such that it is automatically repeating. */\n  repeat: boolean;\n\n  /** The executing Keybinding Action. May be undefined until the action is known. */\n  action: string | undefined;\n}\n\n/** Connected Gamepad info */\ninterface ConnectedGamepad {\n  /** A map of axes values */\n  axes: Map<string, number>;\n\n  /** The Set of pressed Buttons */\n  activeButtons: Set<string>;\n}\n\ntype RequestData = object | object[] | string | string[];\n\ninterface SocketRequest {\n  /**\n   * The server-side action being requested\n   */\n  action?: string;\n\n  /**\n   * The type of object being modified\n   */\n  type?: string;\n\n  /**\n   * Data applied to the operation\n   */\n  data?: RequestData;\n\n  /**\n   * A Compendium pack name\n   */\n  pack?: string;\n\n  /**\n   * The type of parent document\n   */\n  parentType?: string;\n\n  /**\n   * The ID of a parent document\n   */\n  parentId?: string;\n\n  /**\n   * Additional options applied to the request\n   */\n  options?: object;\n}\n\ninterface SocketResponse {\n  /**\n   * The initial request\n   */\n  request: SocketRequest;\n\n  /**\n   * An error, if one occurred\n   */\n  error?: Error;\n\n  /**\n   * The status of the request\n   */\n  status?: string;\n\n  /**\n   * The ID of the requesting User\n   */\n  userId?: string;\n\n  /**\n   * Data returned as a result of the request\n   */\n  data?: RequestData;\n\n  /**\n   * An Array of created data objects\n   */\n  result?: object[] | string[];\n}\n"
    ]
  