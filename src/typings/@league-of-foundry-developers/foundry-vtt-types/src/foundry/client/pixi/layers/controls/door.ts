
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\client\\pixi\\layers\\controls\\door.d.ts",
      "import type { ConfiguredDocumentClassForName, ConfiguredObjectClassForName } from '../../../../../types/helperTypes';\n\ndeclare global {\n  /**\n   * An icon representing a Door Control\n   */\n  class DoorControl extends PIXI.Container {\n    constructor(wall: InstanceType<ConfiguredObjectClassForName<'Wall'>>);\n\n    wall: InstanceType<ConfiguredObjectClassForName<'Wall'>>;\n\n    /**\n     * Draw the DoorControl icon, displaying it's icon texture and border\n     */\n    draw(): Promise<this>;\n\n    icon?: PIXI.Sprite;\n\n    bg?: PIXI.Graphics;\n\n    border?: PIXI.Graphics;\n\n    /**\n     * Get the icon texture to use for the Door Control icon based on the door state\n     */\n    protected _getTexture(): ReturnType<typeof getTexture>;\n\n    reposition(): void;\n\n    /**\n     * Determine whether the DoorControl is visible to the calling user's perspective.\n     * The control is always visible if the user is a GM and no Tokens are controlled.\n     * @see {@link SightLayer#testVisibility}\n     */\n    get isVisible(): boolean;\n\n    /**\n     * Handle mouse over events on a door control icon.\n     * @param event - The originating interaction event\n     */\n    protected _onMouseOver(event: PIXI.InteractionEvent): false | void;\n\n    /**\n     * Handle mouse out events on a door control icon.\n     * @param event - The originating interaction event\n     */\n    protected _onMouseOut(event: PIXI.InteractionEvent): false | void;\n\n    /**\n     * Handle left mouse down events on a door control icon.\n     * This should only toggle between the OPEN and CLOSED states.\n     * @param event - The originating interaction event\n     */\n    protected _onMouseDown(\n      event: PIXI.InteractionEvent\n    ): false | void | Promise<InstanceType<ConfiguredDocumentClassForName<'Wall'>> | undefined>;\n\n    /**\n     * Handle right mouse down events on the door control icon\n     * This should toggle whether the door is LOCKED or CLOSED\n     * @param event - The originating interaction event\n     */\n    protected _onRightDown(\n      event: PIXI.InteractionEvent\n    ): void | Promise<InstanceType<ConfiguredDocumentClassForName<'Wall'>> | undefined>;\n  }\n}\n"
    ]
  