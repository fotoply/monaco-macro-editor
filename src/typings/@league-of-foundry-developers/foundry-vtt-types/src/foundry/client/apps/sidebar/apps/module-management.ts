
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\client\\apps\\sidebar\\apps\\module-management.d.ts",
      "/**\n * The Module Management Application.\n * This application provides a view of which modules are available to be used and allows for configuration of the\n * set of modules which are active within the World.\n * @typeParam Options - The type of the options object\n * @typeParam Data    - The data structure used to render the handlebars template.\n */\ndeclare class ModuleManagement<\n  Options extends FormApplicationOptions = FormApplicationOptions,\n  Data extends object = ModuleManagement.Data\n> extends FormApplication<Options, Data, undefined> {\n  /** @internal */\n  protected _filter: ModuleManagement.FilterName;\n\n  /**\n   * @defaultValue `true`\n   * @internal\n   */\n  protected _expanded: boolean;\n\n  /**\n   * The named game setting which persists module configuration.\n   */\n  static CONFIG_SETTING: 'moduleConfiguration';\n\n  /**\n   * @defaultValue\n   * ```typescript\n   * mergeObject(super.defaultOptions, {\n   *   title: game.i18n.localize(\"MODMANAGE.Title\"),\n   *   id: \"module-management\",\n   *   template: \"templates/sidebar/apps/module-management.html\",\n   *   popOut: true,\n   *   width: 680,\n   *   height: \"auto\",\n   *   scrollY: [\".package-list\"],\n   *   closeOnSubmit: false,\n   *   filters: [{inputSelector: 'input[name=\"search\"]', contentSelector: \".package-list\"}]\n   * });\n   * ```\n   */\n  static override get defaultOptions(): FormApplicationOptions;\n\n  override get isEditable(): boolean;\n\n  override getData(options?: Partial<Options>): Data | Promise<Data>;\n\n  override activateListeners(html: JQuery): void;\n\n  protected override _renderInner(data: Data): Promise<JQuery>;\n\n  protected override _updateObject(event: Event, formData: ModuleManagement.FormData): Promise<unknown>;\n\n  /**\n   * Handle changes to a module checkbox to prompt for whether or not to enable dependencies\n   * @internal\n   */\n  protected _onChangeCheckbox(event: JQuery.ChangeEvent): unknown;\n\n  /**\n   * Handle a button-click to deactivate all modules\n   * @internal\n   */\n  protected _onDeactivateAll(event: JQuery.ClickEvent): void;\n\n  /**\n   * Handle expanding or collapsing the display of descriptive elements\n   * @internal\n   */\n  protected _onExpandCollapse(event: JQuery.ClickEvent): void;\n\n  /**\n   * Handle a button-click to deactivate all modules\n   * @internal\n   */\n  protected _onFilterList(event: JQuery.ClickEvent): void;\n\n  protected override _onSearchFilter(event: KeyboardEvent, query: string, rgx: RegExp, html: HTMLElement): void;\n}\n\ndeclare namespace ModuleManagement {\n  interface Data {\n    editable: boolean;\n    filters: [Data.Filter<'all'>, Data.Filter<'active'>, Data.Filter<'inactive'>];\n    modules: Data.Module[];\n    expanded: boolean;\n  }\n\n  namespace Data {\n    interface Filter<F extends FilterName> {\n      id: F;\n      label: string;\n      css: ' active' | '';\n      count: number;\n    }\n\n    type Module = Exclude<foundry.packages.ModuleData['_source'], 'authors'> & {\n      active: boolean;\n      availability: number;\n      data: foundry.packages.ModuleData;\n      css: string;\n      hasPacks: boolean;\n      hasScripts: boolean;\n      hasStyles: boolean;\n      systemOnly: boolean;\n      systemTag: Game['system']['id'];\n      dependencies: string[] | null;\n      unavailable?: string;\n      incompatible?: string;\n      authors: string | undefined;\n      labels: string;\n    };\n  }\n\n  type FilterName = 'all' | 'active' | 'inactive';\n\n  type FormData = Record<string, boolean> & {\n    search: string;\n  };\n}\n"
    ]
  