
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\client\\apps\\forms\\roll-table-config.d.ts",
      "import type { ConfiguredDocumentClassForName, ToObjectFalseType } from '../../../../types/helperTypes';\nimport type { TableResultDataConstructorData } from '../../../common/data/data.mjs/tableResultData';\n\ndeclare global {\n  /**\n   * The Application responsible for displaying and editing a single RollTable document.\n   * @typeParam Options - the type of the options object\n   * @typeParam Data    - The data structure used to render the handlebars template.\n   */\n  class RollTableConfig<\n    Options extends DocumentSheetOptions = DocumentSheetOptions,\n    Data extends object = RollTableConfig.Data<Options>\n  > extends DocumentSheet<Options, Data, InstanceType<ConfiguredDocumentClassForName<'RollTable'>>> {\n    /**\n     * @defaultValue\n     * ```typescript\n     * foundry.utils.mergeObject(super.defaultOptions, {\n     *   classes: [\"sheet\", \"roll-table-config\"],\n     *   template: \"templates/sheets/roll-table-config.html\",\n     *   width: 720,\n     *   height: \"auto\",\n     *   closeOnSubmit: false,\n     *   viewPermission: CONST.DOCUMENT_PERMISSION_LEVELS.OBSERVER,\n     *   scrollY: [\"ol.table-results\"],\n     *   dragDrop: [{ dragSelector: null, dropSelector: null }],\n     * })\n     * ```\n     */\n    static override get defaultOptions(): DocumentSheetOptions;\n\n    override get title(): string;\n\n    override getData(options?: Partial<Options>): Data | Promise<Data>;\n\n    override activateListeners(html: JQuery): void;\n\n    /**\n     * Handle creating a TableResult in the RollTable document\n     * @param event      - The originating mouse event\n     * @param resultData - An optional object of result data to use\n     * @internal\n     */\n    protected _onCreateResult(\n      event: JQuery.ClickEvent | DragEvent,\n      resultData?: TableResultDataConstructorData\n    ): Promise<ConfiguredDocumentClassForName<'TableResult'>[]>;\n\n    /**\n     * Submit the entire form when a table result type is changed, in case there are other active changes\n     * @internal\n     */\n    protected _onChangeResultType(event: JQuery.ChangeEvent): void;\n\n    /**\n     * Handle deleting a TableResult from the RollTable document\n     * @param event - The originating click event\n     * @returns The deleted TableResult document\n     * @internal\n     */\n    protected _onDeleteResult(\n      event: JQuery.ClickEvent\n    ): Promise<InstanceType<ConfiguredDocumentClassForName<'TableResult'>> | undefined>;\n\n    protected override _onDrop(event: DragEvent): void;\n\n    /**\n     * Handle changing the actor profile image by opening a FilePicker\n     * @internal\n     */\n    protected _onEditImage(event: JQuery.ClickEvent): void;\n\n    /**\n     * Handle a button click to re-normalize dice result ranges across all RollTable results\n     * @internal\n     */\n    protected _onNormalizeResults(event: JQuery.ClickEvent): void;\n\n    /**\n     * Handle toggling the drawn status of the result in the table\n     * @internal\n     */\n    protected _onLockResult(event: JQuery.ClickEvent): void;\n\n    /**\n     * Reset the Table to it's original composition with all options unlocked\n     * @internal\n     */\n    protected _onResetTable(event: JQuery.ClickEvent): void;\n\n    /**\n     * Handle drawing a result from the RollTable\n     * @internal\n     */\n    protected _onRollTable(event: JQuery.ClickEvent): void;\n\n    /**\n     * Configure the update object workflow for the Roll Table configuration sheet\n     * Additional logic is needed here to reconstruct the results array from the editable fields on the sheet\n     * @param event    - The form submission event\n     * @param formData - The validated FormData translated into an Object for submission\n     * @internal\n     */\n    protected _updateObject(event: Event, formData: RollTableConfig.FormData): Promise<unknown>;\n\n    /**\n     * Display a roulette style animation when a Roll Table result is drawn from the sheet\n     * @param results - An Array of drawn table results to highlight\n     * @returns A Promise which resolves once the animation is complete\n     */\n    protected _animateRoll(results: InstanceType<ConfiguredDocumentClassForName<'TableResult'>>[]): Promise<void[]>;\n\n    /**\n     * Animate a \"roulette\" through the table until arriving at the final loop and a drawn result\n     */\n    protected _animateRoulette(\n      ol: HTMLOListElement,\n      drawnIds: Set<string>,\n      nLoops: number,\n      animTime: number,\n      animOffset: number\n    ): Promise<void>;\n\n    /**\n     * Display a flashing animation on the selected result to emphasize the draw\n     * @param item - The HTML \\<li\\> item of the winning result\n     * @returns A Promise that resolves once the animation is complete\n     */\n    protected _flashResult(item: HTMLElement): Promise<void>;\n  }\n\n  namespace RollTableConfig {\n    interface Data<Options extends DocumentSheetOptions = DocumentSheetOptions>\n      extends DocumentSheet.Data<RollTable, Options> {\n      results: ToObjectFalseType<foundry.data.TableResultData> & {\n        isText: boolean;\n        isDocument: boolean;\n        isCompendium: boolean;\n        img: string;\n        text: string;\n      };\n      resultTypes: {\n        [Key in keyof typeof foundry.CONST.TABLE_RESULT_TYPES as typeof foundry.CONST.TABLE_RESULT_TYPES[Key]]: Titlecase<Key>;\n      };\n      documentTypes: typeof foundry.CONST.COMPENDIUM_DOCUMENT_TYPES;\n      compendiumPacks: string[];\n    }\n\n    type FormData = {\n      description: string;\n      displayRoll: boolean;\n      formula: string;\n      img: string;\n      name: string;\n      replacement: boolean;\n    } & FormDataResults;\n\n    type FormDataResults = {\n      [Key in number as `results.${number}._id`]: string;\n    } & {\n      [Key in number as `results.${number}.drawn`]: boolean;\n    } & {\n      [Key in number as `results.${number}.img`]: string;\n    } & {\n      [Key in number as `results.${number}.rangeH`]: number;\n    } & {\n      [Key in number as `results.${number}.rangeL`]: number;\n    } & {\n      [Key in number as `results.${number}.text`]: string;\n    } & {\n      [Key in number as `results.${number}.type`]: foundry.CONST.TABLE_RESULT_TYPES;\n    } & {\n      [Key in number as `results.${number}.weight`]: string;\n    };\n  }\n}\n"
    ]
  