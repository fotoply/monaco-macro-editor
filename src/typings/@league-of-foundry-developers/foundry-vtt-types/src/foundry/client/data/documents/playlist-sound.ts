
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\client\\data\\documents\\playlist-sound.d.ts",
      "import type { ConfiguredDocumentClassForName } from '../../../../types/helperTypes';\nimport type { DocumentModificationOptions } from '../../../common/abstract/document.mjs';\n\ndeclare global {\n  /**\n   * The client-side PlaylistSound document which extends the common BasePlaylistSound model.\n   * Each PlaylistSound belongs to the sounds collection of a Playlist document.\n   * Each PlaylistSound contains a PlaylistSoundData object which provides its source data.\n   *\n   * @see {@link foundry.data.PlaylistSoundData} The PlaylistSound data schema\n   * @see {@link Playlist}                       The Playlist document which contains PlaylistSound embedded documents\n   * @see {@link Sound}                          The Sound API which manages web audio playback\n   *\n   */\n  class PlaylistSound extends ClientDocumentMixin(foundry.documents.BasePlaylistSound) {\n    /**\n     * @param data   - Initial data provided to construct the PlaylistSound document\n     * @param parent - The parent Playlist document to which this result belongs\n     */\n    constructor(\n      data: ConstructorParameters<typeof foundry.documents.BasePlaylistSound>[0],\n      context?: ConstructorParameters<typeof foundry.documents.BasePlaylistSound>[1]\n    );\n\n    /**\n     * The Sound which manages playback for this playlist sound\n     */\n    sound: Sound | null;\n\n    /**\n     * A debounced function, accepting a single volume parameter to adjust the volume of this sound\n     * @param volume - The desired volume level\n     */\n    debounceVolume: (volume: number) => void;\n\n    /**\n     * The debounce tolerance for processing rapid volume changes into database updates in milliseconds\n     * @defaultValue `100`\n     */\n    static VOLUME_DEBOUNCE_MS: number;\n\n    /**\n     * Create a Sound used to play this PlaylistSound document\n     * @internal\n     */\n    protected _createSound(): Sound | null;\n\n    /**\n     * A convenience reference to the HTTP path to the source audio file\n     */\n    get path(): string | undefined | null;\n\n    /**\n     * A convenience indicator for whether this sound is currently playing.\n     */\n    get playing(): boolean;\n\n    /**\n     * The effective volume at which this PlaylistSound should be playing, including the global playlist volume modifier\n     */\n    get volume(): number;\n\n    /**\n     * Determine the fade duration for this PlaylistSound based on its own configuration and that of its parent.\n     */\n    get fadeDuration(): number;\n\n    /**\n     * Synchronize playback for this particular PlaylistSound instance\n     */\n    sync(): void | Promise<void> | Promise<Sound>;\n\n    override _onCreate(\n      data: foundry.data.PlaylistSoundData['_source'],\n      options: DocumentModificationOptions,\n      userId: string\n    ): void;\n\n    protected override _onUpdate(\n      changed: DeepPartial<foundry.data.PlaylistSoundData['_source']>,\n      options: DocumentModificationOptions,\n      userId: string\n    ): void;\n\n    protected override _onDelete(options: DocumentModificationOptions, userId: string): void;\n\n    /**\n     * Special handling that occurs when a PlaylistSound reaches the natural conclusion of its playback.\n     * @internal\n     */\n    protected _onEnd(): Promise<void | InstanceType<ConfiguredDocumentClassForName<'Playlist'>> | undefined>;\n\n    /**\n     * Special handling that occurs when playback of a PlaylistSound is started.\n     * @internal\n     */\n    protected _onStart(): Promise<void>;\n\n    /**\n     * Special handling that occurs when a PlaylistSound is manually stopped before its natural conclusion.\n     * @internal\n     */\n    protected _onStop(): Promise<void>;\n\n    /**\n     * Handle fading in the volume for this sound when it begins to play (or loop)\n     * @internal\n     */\n    protected _fadeIn(sound: Sound): void;\n\n    /**\n     * Handle fading out the volume for this sound when it begins to play (or loop)\n     * @internal\n     */\n    protected _fadeOut(sound: Sound): void;\n  }\n}\n"
    ]
  