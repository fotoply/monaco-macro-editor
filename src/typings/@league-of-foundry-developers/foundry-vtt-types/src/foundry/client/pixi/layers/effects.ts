
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\client\\pixi\\layers\\effects.d.ts",
      "/**\n * A CanvasLayer for displaying visual effects like weather, transitions, flashes, or more\n */\ndeclare class WeatherLayer extends CanvasLayer<WeatherLayer.LayerOptions> {\n  /**\n   * The weather overlay container\n   * @defaultValue `undefined`\n   */\n  weather: PIXI.Container | undefined;\n\n  /**\n   * The currently active weather effect\n   * @defaultValue `undefined`\n   */\n  weatherEffect: SpecialEffect | undefined;\n\n  /**\n   * Track the set of particle Emitter instances which are active within this Scene.\n   * @defaultValue `[]`\n   */\n  emitters: PIXI.particles.Emitter[];\n\n  /**\n   * An occlusion filter that prevents weather from being displayed in certain regions\n   * @defaultValue `undefined`\n   */\n  weatherOcclusionFilter: AbstractBaseMaskFilter | undefined;\n\n  /**\n   * @remarks This is not overridden in foundry but reflects the real behavior.\n   */\n  static get instance(): Canvas['weather'];\n\n  /**\n   * @defaultValue\n   * ```typescript\n   * foundry.utils.mergeObject(super.layerOptions, {\n   *   name: \"effects\",\n   *   zIndex: 700\n   * })\n   * ```\n   */\n  static get layerOptions(): WeatherLayer.LayerOptions;\n\n  override tearDown(): Promise<this>;\n\n  override draw(): Promise<undefined>;\n\n  /**\n   * Draw the weather container.\n   * @returns The weather container, or null if no effect is present\n   */\n  drawWeather(): Exclude<this['weather'], undefined> | null;\n}\n\ndeclare namespace WeatherLayer {\n  interface LayerOptions extends CanvasLayer.LayerOptions {\n    name: 'effects';\n    zIndex: 700;\n  }\n}\n"
    ]
  