
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\client\\pixi\\layers\\map.d.ts",
      "import {\n  ConfiguredDocumentClassForName,\n  ConfiguredObjectClassForName,\n  DataSourceForPlaceable\n} from '../../../../types/helperTypes';\n\ndeclare global {\n  /**\n   * A PlaceablesLayer designed for rendering the visual Scene for a specific vertical cross-section.\n   * Each MapLayer contains a single background image as well as an arbitrary number of Tile objects.\n   */\n  class MapLayer<Options extends MapLayer.LayerOptions = MapLayer.LayerOptions<'background'>> extends PlaceablesLayer<\n    'Tile',\n    Options\n  > {\n    /**\n     * @param data - (default: `{}`)\n     */\n    constructor(data?: MapLayerConstructorData);\n\n    /**\n     * The numeric Scene level to which this layer belongs\n     */\n    level: number;\n\n    /**\n     * The background source path\n     */\n    bgPath: string | undefined;\n\n    /**\n     * The layer background image\n     */\n    bg: PIXI.Sprite | undefined;\n\n    static documentName: 'Tile';\n\n    /**\n     * @remarks This is not overridden in foundry but reflects the real behavior.\n     * It returns the BackgroundLayer but ForegroundLayer has been added for subclasses.\n     */\n    static get instance(): Canvas['background'] | Canvas['foreground'];\n\n    /**\n     * @defaultValue\n     * ```typescript\n     * foundry.utils.mergeObject(super.layerOptions, {\n     *   name: 'background',\n     *   zIndex: 0,\n     *   controllableObjects: true,\n     *   rotatableObjects: true\n     * })\n     * ```\n     */\n    static get layerOptions(): MapLayer.LayerOptions;\n\n    /**\n     * Return the base HTML image or video element which is used to generate the background Sprite.\n     */\n    get bgSource(): HTMLImageElement | HTMLVideoElement | null;\n\n    get hud(): TileHUD;\n\n    /**\n     * Is the background texture used in this layer a video?\n     */\n    get isVideo(): boolean;\n\n    /**\n     * An array of Tile objects which are rendered within the objects container\n     */\n    get tiles(): InstanceType<ConfiguredObjectClassForName<'Tile'>>[];\n\n    deactivate(): this;\n\n    tearDown(): Promise<this>;\n\n    /**\n     * @remarks It returns Promise<this> but is overridden by a subclass in this way.\n     */\n    override draw(): Promise<this | undefined>;\n\n    /**\n     * Draw the background Sprite for the layer, aligning its dimensions with those configured for the canvas.\n     * @returns The rendered Sprite, or undefined if no background is present\n     */\n    protected _drawBackground(): PIXI.Sprite | undefined;\n\n    protected _onDragLeftStart(event: PIXI.InteractionEvent): Promise<void>;\n\n    protected _onDragLeftMove(event: PIXI.InteractionEvent): void;\n\n    protected _onDragLeftDrop(event: PIXI.InteractionEvent): void;\n\n    protected _onDragLeftCancel(event: PointerEvent): void;\n\n    /**\n     * Handle drop events for Tile data on the Tiles Layer\n     * @param event - The concluding drag event\n     * @param data - The extracted Tile data\n     */\n    protected _onDropData(\n      event: DragEvent,\n      data:\n        | { type: 'Tile'; img: string; tileSize?: number; x: number; y: number }\n        | ({ type: string } & Partial<Record<string, unknown>>)\n    ): Promise<InstanceType<ConfiguredDocumentClassForName<'Tile'>> | undefined>;\n\n    /**\n     * Prepare the data object when a new Tile is dropped onto the canvas\n     * @param event - The concluding drag event\n     * @param data  - The extracted Tile data\n     * @returns The prepared data to create\n     */\n    protected _getDropData(\n      event: DragEvent,\n      data: MapLayer.DropData\n    ): Promise<ConstructorParameters<typeof foundry.documents.BaseTile>[0]>;\n  }\n\n  namespace MapLayer {\n    interface LayerOptions<Name extends 'background' | 'foreground' = 'background' | 'foreground'>\n      extends PlaceablesLayer.LayerOptions<'Tile'> {\n      name: Name;\n    }\n\n    type DropData =\n      | { type: 'Tile'; img: string; tileSize?: number; x: number; y: number }\n      | ({ type: string } & Partial<Record<string, unknown>>);\n  }\n\n  /**\n   * An extension of the MapLayer that displays underfoot in the background of the Scene.\n   */\n  class BackgroundLayer extends MapLayer {\n    /**\n     * @remarks This is not overridden in foundry but reflects the real behavior.\n     */\n    static get instance(): Canvas['background'];\n\n    /**\n     * @remarks This is not overridden in foundry but reflects the real behavior.\n     */\n    static get layerOptions(): MapLayer.LayerOptions<'background'>;\n\n    /**\n     * The outline of the scene.\n     * Not rendered within the BackgroundLayer, but rather beneath it so it does not impact the PrimaryMesh texture.\n     */\n    outline: PIXI.Graphics | undefined;\n\n    /**\n     * Draw a background outline which emphasizes what portion of the canvas is playable space and what is buffer.\n     * @param outline - The outline graphics to use\n     */\n    drawOutline(outline: PIXI.Graphics): void;\n\n    getDocuments(): Exclude<this['documentCollection'], null> | InstanceType<ConfiguredDocumentClassForName<'Tile'>>[];\n\n    getZIndex(): number;\n\n    storeHistory(\n      type: PlaceablesLayer.HistoryEventType,\n      data: DataSourceForPlaceable<InstanceType<ConfiguredObjectClassForName<'Tile'>>>\n    ): void;\n  }\n\n  /**\n   * An extension of the MapLayer that displays overhead in the foreground of the Scene.\n   */\n  class ForegroundLayer extends MapLayer<MapLayer.LayerOptions<'foreground'>> {\n    /**\n     * @defaultValue\n     * ```typescript\n     * foundry.utils.mergeObject(super.layerOptions, {\n     *   name: \"foreground\"\n     * })\n     * ```\n     */\n    static get layerOptions(): MapLayer.LayerOptions<'foreground'>;\n\n    /**\n     * @remarks This is not overridden in foundry but reflects the real behavior.\n     */\n    static get instance(): Canvas['foreground'];\n\n    /**\n     * Get an array of overhead Tile objects which are roofs\n     */\n    get roofs(): InstanceType<ConfiguredObjectClassForName<'Tile'>>[];\n\n    /**\n     * Determine whether to display roofs\n     */\n    get displayRoofs(): boolean;\n\n    draw(): Promise<undefined>;\n\n    /**\n     * Draw the container used to cache the position of Token occlusion shapes to a RenderTexture\n     */\n    protected _drawOcclusionMask(): CachedContainer;\n\n    /**\n     * Perform one-time initialization actions which affect the foreground layer.\n     * These actions presume and require that the layer has already been drawn.\n     */\n    initialize(): void;\n\n    override activate(): this;\n\n    deactivate(): this;\n\n    tearDown(): Promise<this>;\n\n    getZIndex(): number;\n\n    getDocuments(): Exclude<this['documentCollection'], null> | InstanceType<ConfiguredDocumentClassForName<'Tile'>>[];\n\n    /**\n     * Refresh the display of tiles on the Foreground Layer depending on Token occlusion.\n     */\n    refresh(): void;\n\n    /**\n     * Add a roof sprite to the occlusion roof mask container\n     * @param tile - The roof tile being added\n     */\n    addRoofSprite(tile: InstanceType<ConfiguredObjectClassForName<'Tile'>>): void;\n\n    /**\n     * Remove a roof sprite from occlusion roof mask container\n     * @param tile - The roof tile being removed\n     */\n    removeRoofSprite(tile: InstanceType<ConfiguredObjectClassForName<'Tile'>>): void;\n\n    /**\n     * Update occlusion for all tiles on the foreground layer\n     */\n    updateOcclusion(): void;\n\n    /**\n     * Draw the container which caches token-based occlusion shapes\n     * @param tokens - The set of currently observed tokens\n     */\n    protected _drawOcclusionShapes(tokens: ConfiguredObjectClassForName<'Token'>[]): void;\n\n    protected _getDropData(\n      event: DragEvent,\n      data:\n        | { type: 'Tile'; img: string; tileSize?: number; x: number; y: number }\n        | ({ type: string } & Partial<Record<string, unknown>>)\n    ): Promise<ConstructorParameters<typeof foundry.documents.BaseTile>[0]>;\n  }\n}\n\ninterface MapLayerConstructorData {\n  bgPath?: string;\n  /**\n   * @defaultValue `1`\n   */\n  level?: number;\n}\n"
    ]
  