
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\client\\apps\\sidebar\\tabs\\playlists-directory.d.ts",
      "import type { ConfiguredDocumentClass, ToObjectFalseType } from '../../../../../types/helperTypes';\n\ndeclare global {\n  /**\n   * The sidebar directory which organizes and displays world-level Playlist documents.\n   * @typeParam Options - The type of the options object\n   */\n  class PlaylistDirectory<Options extends SidebarDirectory.Options = SidebarDirectory.Options> extends SidebarDirectory<\n    'Playlist',\n    Options\n  > {\n    constructor(options?: Partial<Options>);\n\n    /**\n     * Track the playlist IDs which are currently expanded in their display\n     * @internal\n     */\n    protected _expanded: Set<string>;\n\n    /**\n     * Are the global volume controls currently expanded?\n     * @defaultValue `false`\n     * @internal\n     */\n    protected _volumeExpanded: boolean;\n\n    /**\n     * Cache the set of Playlist documents that are displayed as playing when the directory is rendered\n     * @defaultValue `[]`\n     * @internal\n     */\n    protected _playingPlaylists: InstanceType<ConfiguredDocumentClass<typeof Playlist>>[];\n\n    /**\n     * Cache the set of PlaylistSound documents that are displayed as playing when the directory is rendered\n     * @defaultValue `[]`\n     * @internal\n     */\n    protected _playingSounds: InstanceType<ConfiguredDocumentClass<typeof PlaylistSound>>[];\n\n    /**\n     * @internal\n     * @defaultValue `undefined`\n     * @remarks This is only initialized and set in `getData`.\n     */\n    protected _playingSoundsData?: PlaylistDirectory.Data.Sound[] | undefined;\n\n    static override documentName: 'Playlist';\n\n    /**\n     * @defaultValue `'templates/sidebar/playlist-partial.html'`\n     */\n    static override documentPartial: string;\n\n    /**\n     * @defaultValue\n     * ```typescript\n     * const options = super.defaultOptions;\n     * options.template = \"templates/sidebar/playlists-directory.html\";\n     * options.dragDrop[0].dragSelector = \".playlist-name, .sound-name\";\n     * options.renderUpdateKeys = [\"name\", \"playing\", \"mode\", \"sounds\", \"sort\", \"sorting\", \"folder\"];\n     * options.contextMenuSelector = \".document .playlist-header\";\n     * return options;\n     * ```\n     */\n    static override get defaultOptions(): SidebarDirectory.Options;\n\n    /**\n     * Initialize the set of Playlists which should be displayed in an expanded form\n     * @internal\n     */\n    protected _createExpandedSet(): Set<string>;\n\n    /**\n     * Return an Array of the Playlist documents which are currently playing\n     */\n    get playing(): InstanceType<ConfiguredDocumentClass<typeof Playlist>>[];\n\n    /**\n     * Whether the 'currently playing' element is pinned to the top or bottom of the display.\n     * @internal\n     */\n    protected get _playingLocation(): 'top' | 'bottom';\n\n    override getData(options?: Partial<Options>): PlaylistDirectory.Data | Promise<PlaylistDirectory.Data>;\n\n    /**\n     * Augment the tree directory structure with playlist-level data objects for rendering\n     * @param leaf - The tree leaf node being prepared\n     * @internal\n     */\n    protected _prepareTreeData(\n      leaf: SidebarDirectory.Tree<InstanceType<ConfiguredDocumentClass<typeof Playlist>>>\n    ): void;\n\n    /**\n     * Create an object of rendering data for each Playlist document being displayed\n     * @param playlist - The playlist to display\n     * @returns The data for rendering\n     * @internal\n     */\n    protected _preparePlaylistData(\n      playlist: InstanceType<ConfiguredDocumentClass<typeof Playlist>>\n    ): PlaylistDirectory.Data.Playlist;\n\n    /**\n     * Get the icon used to represent the \"play/stop\" icon for the PlaylistSound\n     * @param sound - The sound being rendered\n     * @returns The icon that should be used\n     * @internal\n     */\n    protected _getPlayIcon(sound: InstanceType<ConfiguredDocumentClass<typeof PlaylistSound>>): string;\n\n    /**\n     * Get the icon used to represent the pause/loading icon for the PlaylistSound\n     * @param sound - The sound being rendered\n     * @returns The icon that should be used\n     * @internal\n     */\n    protected _getPauseIcon(sound: InstanceType<ConfiguredDocumentClass<typeof PlaylistSound>>): string;\n\n    /**\n     * Given a constant playback mode, provide the FontAwesome icon used to display it\n     * @internal\n     */\n    protected _getModeIcon(mode: foundry.CONST.PLAYLIST_MODES): string;\n\n    /**\n     * Given a constant playback mode, provide the string tooltip used to describe it\n     * @internal\n     */\n    protected _getModeTooltip(mode: foundry.CONST.PLAYLIST_MODES): string;\n\n    override activateListeners(html: JQuery): void;\n\n    /**\n     * Handle global volume change for the playlist sidebar\n     * @param event - The initial change event\n     * @internal\n     */\n    protected _onGlobalVolume(event: JQuery.ChangeEvent): unknown;\n\n    override collapseAll(): void;\n\n    /**\n     * Handle Playlist collapse toggle\n     * @param event - The initial click event\n     * @internal\n     */\n    protected _onPlaylistCollapse(event: JQuery.ClickEvent): void;\n\n    /**\n     * Handle global volume control collapse toggle\n     * @param event - The initial click event\n     * @internal\n     */\n    protected _onVolumeCollapse(event: JQuery.ClickEvent): void;\n\n    /**\n     * Helper method to render the expansion or collapse of playlists\n     * @param speed - (default: `250`)\n     * @internal\n     */\n    protected _collapse(el: HTMLElement, collapse: boolean, speed?: number): void;\n\n    /**\n     * Handle Playlist playback state changes\n     * @param event   - The initial click event\n     * @param playing - Is the playlist now playing?\n     * @internal\n     */\n    protected _onPlaylistPlay(event: JQuery.ClickEvent, playing: boolean): unknown;\n\n    /**\n     * Handle advancing the playlist to the next (or previous) sound\n     * @param event  - The initial click event\n     * @param action - The control action requested\n     * @internal\n     */\n    protected _onPlaylistSkip(event: JQuery.ClickEvent, action: string): unknown;\n\n    /**\n     * Handle cycling the playback mode for a Playlist\n     * @param event - The initial click event\n     * @internal\n     */\n    protected _onPlaylistToggleMode(event: JQuery.ClickEvent): unknown;\n\n    /**\n     * Handle Playlist track addition request\n     * @param event - The initial click event\n     * @internal\n     */\n    protected _onSoundCreate(event: JQuery.ClickEvent): void;\n\n    /**\n     * Modify the playback state of a Sound within a Playlist\n     * @param event  - The initial click event\n     * @param action - The sound control action performed\n     * @internal\n     */\n    protected _onSoundPlay(event: JQuery.ClickEvent, action: string): unknown;\n\n    /**\n     * Handle volume adjustments to sounds within a Playlist\n     * @param event - The initial change event\n     * @internal\n     */\n    protected _onSoundVolume(event: JQuery.ChangeEvent): void;\n\n    /**\n     * Handle changes to the sound playback mode\n     * @param event - The initial click event\n     * @internal\n     */\n    protected _onSoundToggleMode(event: JQuery.ClickEvent): void;\n\n    /** @internal */\n    protected _onPlayingPin(): void;\n\n    protected override _onSearchFilter(event: KeyboardEvent, query: string, rgx: RegExp, html: HTMLElement): void;\n\n    /**\n     * Update the displayed timestamps for all currently playing audio sources.\n     * Runs on an interval every 1000ms.\n     * @internal\n     */\n    protected _updateTimestamps(): void;\n\n    /**\n     * Format the displayed timestamp given a number of seconds as input\n     * @param seconds - The current playback time in seconds\n     * @returns The formatted timestamp\n     * @internal\n     */\n    protected _formatTimestamp(seconds: number): string;\n\n    protected override _contextMenu(html: JQuery): void;\n\n    protected override _getFolderContextOptions(): ContextMenuEntry[];\n\n    protected override _getEntryContextOptions(): ContextMenuEntry[];\n\n    /**\n     * Get context menu options for individual sound effects\n     * @returns The context options for each sound\n     * @internal\n     */\n    protected _getSoundContextOptions(): ContextMenuEntry[];\n\n    protected override _onDragStart(event: DragEvent): void;\n\n    protected override _onDrop(event: DragEvent): void;\n  }\n\n  namespace PlaylistDirectory {\n    interface Data extends SidebarDirectory.Data<PlaylistDirectory.Data.Tree> {\n      playingSounds: PlaylistDirectory.Data.Sound[];\n      showPlaying: boolean;\n      playlistModifier: number;\n      ambientModifier: number;\n      interfaceModifier: number;\n      volumeExpanded: boolean;\n      currentlyPlaying: {\n        class: `location-${'top' | 'bottom'}`;\n        location: {\n          top: boolean;\n          bottom: boolean;\n        };\n        pin: {\n          label: string;\n          caret: 'down' | 'up';\n        };\n      };\n    }\n\n    namespace Data {\n      interface Tree extends SidebarDirectory.Tree<InstanceType<ConfiguredDocumentClass<typeof Playlist>>> {\n        playlists: PlaylistDirectory.Data.Playlist[];\n      }\n\n      type Playlist = ToObjectFalseType<foundry.data.PlaylistData> & {\n        modeTooltip: string;\n        modeIcon: string;\n        disabled: boolean;\n        expanded: boolean;\n        css: string;\n        controlCSS: string;\n        sounds: PlaylistDirectory.Data.Sound[];\n      };\n\n      type Sound = ToObjectFalseType<foundry.data.PlaylistSoundData> & {\n        playlistId: string | null;\n        css: string;\n        controlCSS: string;\n        playIcon: string;\n        playTitle: string;\n        isPaused?: boolean;\n        pauseIcon?: string;\n        lvolume?: number;\n        currentTime?: string;\n        durationTime?: string;\n      };\n    }\n  }\n}\n"
    ]
  