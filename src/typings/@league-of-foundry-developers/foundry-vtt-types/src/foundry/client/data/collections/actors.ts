
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\client\\data\\collections\\actors.d.ts",
      "import { ConfiguredDocumentClass } from '../../../../types/helperTypes';\n\ndeclare global {\n  /**\n   * The singleton collection of Actor documents which exist within the active World.\n   * This Collection is accessible within the Game object as game.actors.\n   *\n   * @see {@link Actor} The Actor document\n   * @see {@link ActorDirectory} The ActorDirectory sidebar directory\n   *\n   * @example <caption>Retrieve an existing Actor by its id</caption>\n   * ```typescript\n   * let actor = game.actors.get(actorId);\n   * ```\n   */\n  class Actors extends WorldCollection<typeof foundry.documents.BaseActor, 'Actors'> {\n    /**\n     * A mapping of synthetic Token Actors which are currently active within the viewed Scene.\n     * Each Actor is referenced by the Token.id.\n     */\n    get tokens(): Partial<Record<string, InstanceType<ConfiguredDocumentClass<typeof foundry.documents.BaseActor>>>>;\n\n    static override documentName: 'Actor';\n\n    override fromCompendium(\n      document:\n        | InstanceType<ConfiguredDocumentClass<typeof foundry.documents.BaseActor>>\n        | InstanceType<ConfiguredDocumentClass<typeof foundry.documents.BaseActor>>['data']['_source'],\n      options?: WorldCollection.FromCompendiumOptions | undefined\n    ): Omit<\n      InstanceType<ConfiguredDocumentClass<typeof foundry.documents.BaseActor>>['data']['_source'],\n      '_id' | 'folder'\n    >;\n  }\n}\n"
    ]
  