
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\client\\apps\\forms\\effect-config.d.ts",
      "import { ConfiguredDocumentClass } from '../../../../types/helperTypes';\n\ndeclare global {\n  /**\n   * The Application responsible for configuring a single ActiveEffect document within a parent Actor or Item.\n   *\n   * @typeParam Options - the type of the options object\n   * @typeParam Data    - The data structure used to render the handlebars template.\n   */\n  class ActiveEffectConfig<\n    Options extends DocumentSheetOptions = ActiveEffectConfig.Options,\n    Data extends object = ActiveEffectConfig.Data\n  > extends DocumentSheet<Options, Data, InstanceType<ConfiguredDocumentClass<typeof ActiveEffect>>> {\n    /**\n     * @defaultValue\n     * ```typescript\n     * foundry.utils.mergeObject(super.defaultOptions, {\n     *   classes: [\"sheet\", \"active-effect-sheet\"],\n     *   template: \"templates/sheets/active-effect-config.html\",\n     *   width: 560,\n     *   height: \"auto\",\n     *   tabs: [{navSelector: \".tabs\", contentSelector: \"form\", initial: \"details\"}]\n     * });\n     * ```\n     */\n    static override get defaultOptions(): ActiveEffectConfig.Options;\n\n    override get title(): string;\n\n    override getData(options?: Partial<Options>): Data | Promise<Data>;\n\n    override activateListeners(html: JQuery): void;\n\n    /**\n     * Provide centralized handling of mouse clicks on control buttons.\n     * Delegate responsibility out to action-specific handlers depending on the button action.\n     * @param event - The originating click event\n     */\n    protected _onEffectControl(event: JQuery.ClickEvent): Promise<this> | void;\n\n    /**\n     * Handle adding a new change to the changes array.\n     */\n    protected _addEffectChange(): Promise<this>;\n\n    /**\n     * @param updateData - (default: `{}`)\n     */\n    override _getSubmitData(updateData?: FormApplication.OnSubmitOptions['updateData']): Record<string, unknown>;\n    // TODO: Can we type this better?\n  }\n\n  namespace ActiveEffectConfig {\n    interface Data {\n      effect: ActiveEffectConfig['object']['data'];\n      data: ActiveEffectConfig['object']['data'];\n      isActorEffect: boolean;\n      isItemEffect: boolean;\n      submitText: string;\n      modes: Record<foundry.CONST.ACTIVE_EFFECT_MODES, string>;\n    }\n\n    type Options = DocumentSheetOptions;\n  }\n}\n"
    ]
  