
    export default [
      "@pixi\\runner\\index.d.ts",
      "/**\r\n * A Runner is a highly performant and simple alternative to signals. Best used in situations\r\n * where events are dispatched to many objects at high frequency (say every frame!)\r\n *\r\n *\r\n * like a signal..\r\n * ```\r\n * import { Runner } from '@pixi/runner';\r\n *\r\n * const myObject = {\r\n *     loaded: new Runner('loaded')\r\n * }\r\n *\r\n * const listener = {\r\n *     loaded: function(){\r\n *         // thin\r\n *     }\r\n * }\r\n *\r\n * myObject.loaded.add(listener);\r\n *\r\n * myObject.loaded.emit();\r\n * ```\r\n *\r\n * Or for handling calling the same function on many items\r\n * ```\r\n * import { Runner } from '@pixi/runner';\r\n *\r\n * const myGame = {\r\n *     update: new Runner('update')\r\n * }\r\n *\r\n * const gameObject = {\r\n *     update: function(time){\r\n *         // update my gamey state\r\n *     }\r\n * }\r\n *\r\n * myGame.update.add(gameObject);\r\n *\r\n * myGame.update.emit(time);\r\n * ```\r\n * @memberof PIXI\r\n */\r\nexport declare class Runner {\r\n    items: any[];\r\n    private _name;\r\n    private _aliasCount;\r\n    /**\r\n     * @param name - The function name that will be executed on the listeners added to this Runner.\r\n     */\r\n    constructor(name: string);\r\n    /**\r\n     * Dispatch/Broadcast Runner to all listeners added to the queue.\r\n     * @param {...any} params - (optional) parameters to pass to each listener\r\n     */\r\n    emit(a0?: unknown, a1?: unknown, a2?: unknown, a3?: unknown, a4?: unknown, a5?: unknown, a6?: unknown, a7?: unknown): this;\r\n    private ensureNonAliasedItems;\r\n    /**\r\n     * Add a listener to the Runner\r\n     *\r\n     * Runners do not need to have scope or functions passed to them.\r\n     * All that is required is to pass the listening object and ensure that it has contains a function that has the same name\r\n     * as the name provided to the Runner when it was created.\r\n     *\r\n     * Eg A listener passed to this Runner will require a 'complete' function.\r\n     *\r\n     * ```\r\n     * import { Runner } from '@pixi/runner';\r\n     *\r\n     * const complete = new Runner('complete');\r\n     * ```\r\n     *\r\n     * The scope used will be the object itself.\r\n     * @param {any} item - The object that will be listening.\r\n     */\r\n    add(item: unknown): this;\r\n    /**\r\n     * Remove a single listener from the dispatch queue.\r\n     * @param {any} item - The listener that you would like to remove.\r\n     */\r\n    remove(item: unknown): this;\r\n    /**\r\n     * Check to see if the listener is already in the Runner\r\n     * @param {any} item - The listener that you would like to check.\r\n     */\r\n    contains(item: unknown): boolean;\r\n    /** Remove all listeners from the Runner */\r\n    removeAll(): this;\r\n    /** Remove all references, don't use after this. */\r\n    destroy(): void;\r\n    /**\r\n     * `true` if there are no this Runner contains no listeners\r\n     * @readonly\r\n     */\r\n    get empty(): boolean;\r\n    /**\r\n     * The name of the runner.\r\n     * @readonly\r\n     */\r\n    get name(): string;\r\n}\r\n\r\nexport { }\r\n"
    ]
  