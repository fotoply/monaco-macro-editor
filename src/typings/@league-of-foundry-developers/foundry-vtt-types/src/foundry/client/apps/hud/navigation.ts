
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\client\\apps\\hud\\navigation.d.ts",
      "import type { ConfiguredDocumentClassForName, ToObjectFalseType } from '../../../../types/helperTypes';\n\ndeclare global {\n  /**\n   * The UI element which displays the Scene documents which are currently enabled for quick navigation.\n   *\n   * @typeParam Options - the type of the options object\n   * @typeParam Data    - The data structure used to render the handlebars template.\n   */\n  class SceneNavigation<\n    Options extends ApplicationOptions = ApplicationOptions,\n    Data extends object = SceneNavigation.Data\n  > extends Application<Options> {\n    constructor(options?: Partial<Options>);\n\n    /**\n     * Navigation collapsed state\n     * @internal\n     */\n    protected _collapsed: boolean;\n\n    /**\n     * @defaultValue\n     * ```typescript\n     * foundry.utils.mergeObject(super.defaultOptions, {\n     *   id: \"navigation\",\n     *   template: \"templates/hud/navigation.html\",\n     *   popOut: false,\n     *   dragDrop: [{ dragSelector: \".scene\" }],\n     * })\n     * ```\n     */\n    static override get defaultOptions(): ApplicationOptions;\n\n    /**\n     * Return an Array of Scenes which are displayed in the Navigation bar\n     */\n    get scenes(): InstanceType<ConfiguredDocumentClassForName<'Scene'>>[];\n\n    override render(force?: boolean, context?: Application.RenderOptions<Options>): this | void;\n\n    protected override _render(force?: boolean, options?: Application.RenderOptions<Options>): Promise<void>;\n\n    override getData(options?: Partial<ApplicationOptions>): Data | Promise<Data>;\n\n    /**\n     * Expand the SceneNavigation menu, sliding it down if it is currently collapsed\n     */\n    expand(): Promise<boolean>;\n\n    /**\n     * Collapse the SceneNavigation menu, sliding it up if it is currently expanded\n     */\n    collapse(): Promise<boolean>;\n\n    override activateListeners(html: JQuery): void;\n\n    /**\n     * Get the set of ContextMenu options which should be applied for Scenes in the menu\n     * @returns The Array of context options passed to the ContextMenu instance\n     * @internal\n     */\n    protected _getContextMenuOptions(): ContextMenuEntry[];\n\n    /**\n     * Handle left-click events on the scenes in the navigation menu\n     * @internal\n     */\n    protected _onClickScene(event: JQuery.ClickEvent): void;\n\n    protected override _onDragStart(event: DragEvent): void;\n\n    protected override _onDrop(event: DragEvent): void;\n\n    /**\n     * Handle navigation menu toggle click events\n     * @internal\n     */\n    protected _onToggleNav(event: JQuery.ClickEvent): void;\n\n    /**\n     * Display progress of some major operation like loading Scene textures.\n     */\n    static displayProgressBar(options: SceneNavigation.DisplayProgressBarOptions): void;\n  }\n\n  namespace SceneNavigation {\n    interface Data {\n      collapsed: boolean;\n      scenes: (ToObjectFalseType<foundry.data.SceneData> & {\n        name: string;\n        users: { letter: string; color: string };\n        visible: boolean;\n        css: string;\n      })[];\n    }\n\n    interface DisplayProgressBarOptions {\n      /**\n       * A text label to display\n       */\n      label?: string | undefined;\n\n      /**\n       * A percentage of progress between 0 and 100\n       */\n      pct: number;\n    }\n  }\n}\n"
    ]
  