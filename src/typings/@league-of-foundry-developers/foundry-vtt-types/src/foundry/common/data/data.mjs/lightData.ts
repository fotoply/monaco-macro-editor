
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\common\\data\\data.mjs\\lightData.d.ts",
      "import type { FieldReturnType, PropertiesToSource } from '../../../../types/helperTypes';\nimport { DocumentData } from '../../abstract/module.mjs';\nimport * as documents from '../../documents.mjs';\nimport * as fields from '../fields.mjs';\nimport type { AnimationData, AnimationDataConstructorData } from './animationData';\nimport type { DarknessActivation, DarknessActivationConstructorData } from './darknessActivation';\n\ninterface LightDataSchema extends DocumentSchema {\n  alpha: FieldReturnType<fields.AlphaField, { default: 0.5 }>;\n  angle: fields.AngleField;\n  bright: fields.NonnegativeNumberField;\n  color: fields.ColorField;\n  coloration: FieldReturnType<fields.NonnegativeIntegerField, { default: 1 }>;\n  dim: fields.NonnegativeNumberField;\n  gradual: FieldReturnType<fields.BooleanField, { default: true }>;\n  luminosity: FieldReturnType<LightData.LightUniformField, { default: 0.5 }>;\n  saturation: LightData.LightUniformField;\n  contrast: LightData.LightUniformField;\n  shadows: LightData.LightUniformField;\n  animation: DocumentField<AnimationData> & {\n    type: typeof AnimationData;\n    required: true;\n    default: Record<string, never>;\n  };\n  darkness: DocumentField<DarknessActivation> & {\n    type: typeof DarknessActivation;\n    required: true;\n    default: Record<string, never>;\n  };\n}\n\ninterface LightDataProperties {\n  /**\n   * An opacity for the emitted light, if any\n   * @defaultValue `0.5`\n   */\n  alpha: number;\n\n  /**\n   * The angle of emission for this point source\n   * @defaultValue `360`\n   */\n  angle: number;\n\n  /**\n   * The allowed radius of bright vision or illumination\n   * @defaultValue `0`\n   */\n  bright: number;\n\n  /** A tint color for the emitted light, if any */\n  color: string | null | undefined;\n\n  /**\n   * The coloration technique applied in the shader\n   * @defaultValue `1`\n   */\n  coloration: number;\n\n  /**\n   * The allowed radius of dim vision or illumination\n   * @defaultValue `0`\n   */\n  dim: number;\n\n  /**\n   * Fade the difference between bright, dim, and dark gradually?\n   * @defaultValue `true`\n   */\n  gradual: boolean;\n\n  /**\n   * The luminosity applied in the shader\n   * @defaultValue `0.5`\n   */\n  luminosity: number;\n\n  /**\n   * The amount of color saturation this light applies to the background texture\n   * @defaultValue `0`\n   */\n  saturation: number;\n\n  /**\n   * The amount of contrast this light applies to the background texture\n   * @defaultValue `0`\n   */\n  contrast: number;\n\n  /**\n   * The depth of shadows this light applies to the background texture\n   * @defaultValue `0`\n   */\n  shadows: number;\n\n  /**\n   * An animation configuration for the source\n   * @defaultValue `new AnimationData({})`\n   */\n  animation: AnimationData;\n\n  /**\n   * A darkness range (min and max) for which the source should be active\n   * @defaultValue `new DarknessActivation({})`\n   */\n  darkness: DarknessActivation;\n}\n\ninterface LightDataConstructorData {\n  /**\n   * An opacity for the emitted light, if any\n   * @defaultValue `0.5`\n   */\n  alpha?: number | null | undefined;\n\n  /**\n   * The angle of emission for this point source\n   * @defaultValue `360`\n   */\n  angle?: number | null | undefined;\n\n  /**\n   * The allowed radius of bright vision or illumination\n   * @defaultValue `0`\n   */\n  bright?: number | null | undefined;\n\n  /** A tint color for the emitted light, if any */\n  color?: string | null | undefined;\n\n  /**\n   * The coloration technique applied in the shader\n   * @defaultValue `1`\n   */\n  coloration?: number | null | undefined;\n\n  /**\n   * The allowed radius of dim vision or illumination\n   * @defaultValue `0`\n   */\n  dim?: number | null | undefined;\n\n  /**\n   * Fade the difference between bright, dim, and dark gradually?\n   * @defaultValue `true`\n   */\n  gradual?: boolean | null | undefined;\n\n  /**\n   * The luminosity applied in the shader\n   * @defaultValue `0.5`\n   */\n  luminosity?: number | null | undefined;\n\n  /**\n   * The amount of color saturation this light applies to the background texture\n   * @defaultValue `0`\n   */\n  saturation?: number | null | undefined;\n\n  /**\n   * The amount of contrast this light applies to the background texture\n   * @defaultValue `0`\n   */\n  contrast?: number | null | undefined;\n\n  /**\n   * The depth of shadows this light applies to the background texture\n   * @defaultValue `0`\n   */\n  shadows?: number | null | undefined;\n\n  /**\n   * An animation configuration for the source\n   * @defaultValue `new AnimationData({})`\n   */\n  animation?: AnimationDataConstructorData | null | undefined;\n\n  /**\n   * A darkness range (min and max) for which the source should be active\n   * @defaultValue `new DarknessActivation({})`\n   */\n  darkness?: DarknessActivationConstructorData | null | undefined;\n}\n\ntype LightDataSource = PropertiesToSource<LightDataProperties>;\n\n/**\n * A reusable document structure for the internal data used to render the appearance of a light source.\n * This is re-used by both the AmbientLightData and TokenData classes.\n */\nexport class LightData extends DocumentData<\n  LightDataSchema,\n  LightDataProperties,\n  LightDataSource,\n  LightDataConstructorData,\n  documents.BaseAmbientLight | documents.BaseToken\n> {\n  static override defineSchema(): LightDataSchema;\n\n  /**\n   * A reusable field definition for uniform fields used by LightData\n   */\n  static LIGHT_UNIFORM_FIELD: LightData.LightUniformField;\n\n  override _initializeSource(data: LightDataConstructorData): LightDataSource;\n\n  protected override _initialize(): void;\n}\n\ndeclare namespace LightData {\n  /**\n   * Property type: `number`\n   * Constructor type: `number | null | undefined`\n   * Default: `0`\n   */\n  interface LightUniformField {\n    type: typeof Number;\n    required: true;\n    default: 0;\n    validate: (n: number) => boolean;\n    validationError: '{name} {field} \"{value}\" is not a number between -1 and 1';\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface LightData extends LightDataProperties {}\n"
    ]
  