
    export default [
      "@pixi\\constants\\index.d.ts",
      "/**\r\n * How to treat textures with premultiplied alpha\r\n * @name ALPHA_MODES\r\n * @memberof PIXI\r\n * @static\r\n * @enum {number}\r\n * @property {number} NO_PREMULTIPLIED_ALPHA - Source is not premultiplied, leave it like that.\r\n *  Option for compressed and data textures that are created from typed arrays.\r\n * @property {number} PREMULTIPLY_ON_UPLOAD - Source is not premultiplied, premultiply on upload.\r\n *  Default option, used for all loaded images.\r\n * @property {number} PREMULTIPLIED_ALPHA - Source is already premultiplied\r\n *  Example: spine atlases with `_pma` suffix.\r\n * @property {number} NPM - Alias for NO_PREMULTIPLIED_ALPHA.\r\n * @property {number} UNPACK - Default option, alias for PREMULTIPLY_ON_UPLOAD.\r\n * @property {number} PMA - Alias for PREMULTIPLIED_ALPHA.\r\n */\r\nexport declare enum ALPHA_MODES {\r\n    NPM = 0,\r\n    UNPACK = 1,\r\n    PMA = 2,\r\n    NO_PREMULTIPLIED_ALPHA = 0,\r\n    PREMULTIPLY_ON_UPLOAD = 1,\r\n    PREMULTIPLY_ALPHA = 2,\r\n    PREMULTIPLIED_ALPHA = 2\r\n}\r\n\r\n/**\r\n * Various blend modes supported by PIXI.\r\n *\r\n * IMPORTANT - The WebGL renderer only supports the NORMAL, ADD, MULTIPLY and SCREEN blend modes.\r\n * Anything else will silently act like NORMAL.\r\n * @memberof PIXI\r\n * @name BLEND_MODES\r\n * @enum {number}\r\n * @property {number} NORMAL -\r\n * @property {number} ADD -\r\n * @property {number} MULTIPLY -\r\n * @property {number} SCREEN -\r\n * @property {number} OVERLAY -\r\n * @property {number} DARKEN -\r\n * @property {number} LIGHTEN -\r\n * @property {number} COLOR_DODGE -\r\n * @property {number} COLOR_BURN -\r\n * @property {number} HARD_LIGHT -\r\n * @property {number} SOFT_LIGHT -\r\n * @property {number} DIFFERENCE -\r\n * @property {number} EXCLUSION -\r\n * @property {number} HUE -\r\n * @property {number} SATURATION -\r\n * @property {number} COLOR -\r\n * @property {number} LUMINOSITY -\r\n * @property {number} NORMAL_NPM -\r\n * @property {number} ADD_NPM -\r\n * @property {number} SCREEN_NPM -\r\n * @property {number} NONE -\r\n * @property {number} SRC_IN -\r\n * @property {number} SRC_OUT -\r\n * @property {number} SRC_ATOP -\r\n * @property {number} DST_OVER -\r\n * @property {number} DST_IN -\r\n * @property {number} DST_OUT -\r\n * @property {number} DST_ATOP -\r\n * @property {number} SUBTRACT -\r\n * @property {number} SRC_OVER -\r\n * @property {number} ERASE -\r\n * @property {number} XOR -\r\n */\r\nexport declare enum BLEND_MODES {\r\n    NORMAL = 0,\r\n    ADD = 1,\r\n    MULTIPLY = 2,\r\n    SCREEN = 3,\r\n    OVERLAY = 4,\r\n    DARKEN = 5,\r\n    LIGHTEN = 6,\r\n    COLOR_DODGE = 7,\r\n    COLOR_BURN = 8,\r\n    HARD_LIGHT = 9,\r\n    SOFT_LIGHT = 10,\r\n    DIFFERENCE = 11,\r\n    EXCLUSION = 12,\r\n    HUE = 13,\r\n    SATURATION = 14,\r\n    COLOR = 15,\r\n    LUMINOSITY = 16,\r\n    NORMAL_NPM = 17,\r\n    ADD_NPM = 18,\r\n    SCREEN_NPM = 19,\r\n    NONE = 20,\r\n    SRC_OVER = 0,\r\n    SRC_IN = 21,\r\n    SRC_OUT = 22,\r\n    SRC_ATOP = 23,\r\n    DST_OVER = 24,\r\n    DST_IN = 25,\r\n    DST_OUT = 26,\r\n    DST_ATOP = 27,\r\n    ERASE = 26,\r\n    SUBTRACT = 28,\r\n    XOR = 29\r\n}\r\n\r\n/**\r\n * Bitwise OR of masks that indicate the buffers to be cleared.\r\n * @static\r\n * @memberof PIXI\r\n * @name BUFFER_BITS\r\n * @enum {number}\r\n * @property {number} COLOR - Indicates the buffers currently enabled for color writing.\r\n * @property {number} DEPTH - Indicates the depth buffer.\r\n * @property {number} STENCIL - Indicates the stencil buffer.\r\n */\r\nexport declare enum BUFFER_BITS {\r\n    COLOR = 16384,\r\n    DEPTH = 256,\r\n    STENCIL = 1024\r\n}\r\n\r\n/**\r\n * Constants for various buffer types in Pixi\r\n * @see PIXI.BUFFER_TYPE\r\n * @name BUFFER_TYPE\r\n * @memberof PIXI\r\n * @static\r\n * @enum {number}\r\n * @property {number} ELEMENT_ARRAY_BUFFER - buffer type for using as an index buffer\r\n * @property {number} ARRAY_BUFFER - buffer type for using attribute data\r\n * @property {number} UNIFORM_BUFFER - the buffer type is for uniform buffer objects\r\n */\r\nexport declare enum BUFFER_TYPE {\r\n    ELEMENT_ARRAY_BUFFER = 34963,\r\n    ARRAY_BUFFER = 34962,\r\n    UNIFORM_BUFFER = 35345\r\n}\r\n\r\n/**\r\n * Configure whether filter textures are cleared after binding.\r\n *\r\n * Filter textures need not be cleared if the filter does not use pixel blending. {@link CLEAR_MODES.BLIT} will detect\r\n * this and skip clearing as an optimization.\r\n * @name CLEAR_MODES\r\n * @memberof PIXI\r\n * @static\r\n * @enum {number}\r\n * @property {number} BLEND - Do not clear the filter texture. The filter's output will blend on top of the output texture.\r\n * @property {number} CLEAR - Always clear the filter texture.\r\n * @property {number} BLIT - Clear only if {@link FilterSystem.forceClear} is set or if the filter uses pixel blending.\r\n * @property {number} NO - Alias for BLEND, same as `false` in earlier versions\r\n * @property {number} YES - Alias for CLEAR, same as `true` in earlier versions\r\n * @property {number} AUTO - Alias for BLIT\r\n */\r\nexport declare enum CLEAR_MODES {\r\n    NO = 0,\r\n    YES = 1,\r\n    AUTO = 2,\r\n    BLEND = 0,\r\n    CLEAR = 1,\r\n    BLIT = 2\r\n}\r\n\r\n/**\r\n * Various webgl draw modes. These can be used to specify which GL drawMode to use\r\n * under certain situations and renderers.\r\n * @memberof PIXI\r\n * @static\r\n * @name DRAW_MODES\r\n * @enum {number}\r\n * @property {number} POINTS -\r\n * @property {number} LINES -\r\n * @property {number} LINE_LOOP -\r\n * @property {number} LINE_STRIP -\r\n * @property {number} TRIANGLES -\r\n * @property {number} TRIANGLE_STRIP -\r\n * @property {number} TRIANGLE_FAN -\r\n */\r\nexport declare enum DRAW_MODES {\r\n    POINTS = 0,\r\n    LINES = 1,\r\n    LINE_LOOP = 2,\r\n    LINE_STRIP = 3,\r\n    TRIANGLES = 4,\r\n    TRIANGLE_STRIP = 5,\r\n    TRIANGLE_FAN = 6\r\n}\r\n\r\n/**\r\n * Different types of environments for WebGL.\r\n * @static\r\n * @memberof PIXI\r\n * @name ENV\r\n * @enum {number}\r\n * @property {number} WEBGL_LEGACY - Used for older v1 WebGL devices. PixiJS will aim to ensure compatibility\r\n *  with older / less advanced devices. If you experience unexplained flickering prefer this environment.\r\n * @property {number} WEBGL - Version 1 of WebGL\r\n * @property {number} WEBGL2 - Version 2 of WebGL\r\n */\r\nexport declare enum ENV {\r\n    WEBGL_LEGACY = 0,\r\n    WEBGL = 1,\r\n    WEBGL2 = 2\r\n}\r\n\r\n/**\r\n * Various GL texture/resources formats.\r\n * @memberof PIXI\r\n * @static\r\n * @name FORMATS\r\n * @enum {number}\r\n * @property {number} [RGBA=6408] -\r\n * @property {number} [RGB=6407] -\r\n * @property {number} [RG=33319] -\r\n * @property {number} [RED=6403] -\r\n * @property {number} [RGBA_INTEGER=36249] -\r\n * @property {number} [RGB_INTEGER=36248] -\r\n * @property {number} [RG_INTEGER=33320] -\r\n * @property {number} [RED_INTEGER=36244] -\r\n * @property {number} [ALPHA=6406] -\r\n * @property {number} [LUMINANCE=6409] -\r\n * @property {number} [LUMINANCE_ALPHA=6410] -\r\n * @property {number} [DEPTH_COMPONENT=6402] -\r\n * @property {number} [DEPTH_STENCIL=34041] -\r\n */\r\nexport declare enum FORMATS {\r\n    RGBA = 6408,\r\n    RGB = 6407,\r\n    RG = 33319,\r\n    RED = 6403,\r\n    RGBA_INTEGER = 36249,\r\n    RGB_INTEGER = 36248,\r\n    RG_INTEGER = 33320,\r\n    RED_INTEGER = 36244,\r\n    ALPHA = 6406,\r\n    LUMINANCE = 6409,\r\n    LUMINANCE_ALPHA = 6410,\r\n    DEPTH_COMPONENT = 6402,\r\n    DEPTH_STENCIL = 34041\r\n}\r\n\r\n/**\r\n * The gc modes that are supported by pixi.\r\n *\r\n * The {@link PIXI.settings.GC_MODE} Garbage Collection mode for PixiJS textures is AUTO\r\n * If set to GC_MODE, the renderer will occasionally check textures usage. If they are not\r\n * used for a specified period of time they will be removed from the GPU. They will of course\r\n * be uploaded again when they are required. This is a silent behind the scenes process that\r\n * should ensure that the GPU does not  get filled up.\r\n *\r\n * Handy for mobile devices!\r\n * This property only affects WebGL.\r\n * @name GC_MODES\r\n * @enum {number}\r\n * @static\r\n * @memberof PIXI\r\n * @property {number} AUTO - Garbage collection will happen periodically automatically\r\n * @property {number} MANUAL - Garbage collection will need to be called manually\r\n */\r\nexport declare enum GC_MODES {\r\n    AUTO = 0,\r\n    MANUAL = 1\r\n}\r\n\r\n/**\r\n * Constants for mask implementations.\r\n * We use `type` suffix because it leads to very different behaviours\r\n * @name MASK_TYPES\r\n * @memberof PIXI\r\n * @static\r\n * @enum {number}\r\n * @property {number} NONE - Mask is ignored\r\n * @property {number} SCISSOR - Scissor mask, rectangle on screen, cheap\r\n * @property {number} STENCIL - Stencil mask, 1-bit, medium, works only if renderer supports stencil\r\n * @property {number} SPRITE - Mask that uses SpriteMaskFilter, uses temporary RenderTexture\r\n */\r\nexport declare enum MASK_TYPES {\r\n    NONE = 0,\r\n    SCISSOR = 1,\r\n    STENCIL = 2,\r\n    SPRITE = 3\r\n}\r\n\r\n/**\r\n * Mipmap filtering modes that are supported by pixi.\r\n *\r\n * The {@link PIXI.settings.MIPMAP_TEXTURES} affects default texture filtering.\r\n * Mipmaps are generated for a baseTexture if its `mipmap` field is `ON`,\r\n * or its `POW2` and texture dimensions are powers of 2.\r\n * Due to platform restriction, `ON` option will work like `POW2` for webgl-1.\r\n *\r\n * This property only affects WebGL.\r\n * @name MIPMAP_MODES\r\n * @memberof PIXI\r\n * @static\r\n * @enum {number}\r\n * @property {number} OFF - No mipmaps\r\n * @property {number} POW2 - Generate mipmaps if texture dimensions are pow2\r\n * @property {number} ON - Always generate mipmaps\r\n * @property {number} ON_MANUAL - Use mipmaps, but do not auto-generate them; this is used with a resource\r\n *   that supports buffering each level-of-detail.\r\n */\r\nexport declare enum MIPMAP_MODES {\r\n    OFF = 0,\r\n    POW2 = 1,\r\n    ON = 2,\r\n    ON_MANUAL = 3\r\n}\r\n\r\n/**\r\n * Constants for multi-sampling antialiasing.\r\n * @see PIXI.Framebuffer#multisample\r\n * @name MSAA_QUALITY\r\n * @memberof PIXI\r\n * @static\r\n * @enum {number}\r\n * @property {number} NONE - No multisampling for this renderTexture\r\n * @property {number} LOW - Try 2 samples\r\n * @property {number} MEDIUM - Try 4 samples\r\n * @property {number} HIGH - Try 8 samples\r\n */\r\nexport declare enum MSAA_QUALITY {\r\n    NONE = 0,\r\n    LOW = 2,\r\n    MEDIUM = 4,\r\n    HIGH = 8\r\n}\r\n\r\n/**\r\n * Constants that specify float precision in shaders.\r\n * @name PRECISION\r\n * @memberof PIXI\r\n * @constant\r\n * @static\r\n * @enum {string}\r\n * @property {string} [LOW='lowp'] -\r\n * @property {string} [MEDIUM='mediump'] -\r\n * @property {string} [HIGH='highp'] -\r\n */\r\nexport declare enum PRECISION {\r\n    LOW = \"lowp\",\r\n    MEDIUM = \"mediump\",\r\n    HIGH = \"highp\"\r\n}\r\n\r\n/**\r\n * Constant to identify the Renderer Type.\r\n * @static\r\n * @memberof PIXI\r\n * @name RENDERER_TYPE\r\n * @enum {number}\r\n * @property {number} UNKNOWN - Unknown render type.\r\n * @property {number} WEBGL - WebGL render type.\r\n * @property {number} CANVAS - Canvas render type.\r\n */\r\nexport declare enum RENDERER_TYPE {\r\n    UNKNOWN = 0,\r\n    WEBGL = 1,\r\n    CANVAS = 2\r\n}\r\n\r\n/**\r\n * Various sampler types. Correspond to `sampler`, `isampler`, `usampler` GLSL types respectively.\r\n * WebGL1 works only with FLOAT.\r\n * @memberof PIXI\r\n * @static\r\n * @name SAMPLER_TYPES\r\n * @enum {number}\r\n * @property {number} [FLOAT=0] -\r\n * @property {number} [INT=1] -\r\n * @property {number} [UINT=2] -\r\n */\r\nexport declare enum SAMPLER_TYPES {\r\n    FLOAT = 0,\r\n    INT = 1,\r\n    UINT = 2\r\n}\r\n\r\n/**\r\n * The scale modes that are supported by pixi.\r\n *\r\n * The {@link PIXI.settings.SCALE_MODE} scale mode affects the default scaling mode of future operations.\r\n * It can be re-assigned to either LINEAR or NEAREST, depending upon suitability.\r\n * @memberof PIXI\r\n * @static\r\n * @name SCALE_MODES\r\n * @enum {number}\r\n * @property {number} LINEAR Smooth scaling\r\n * @property {number} NEAREST Pixelating scaling\r\n */\r\nexport declare enum SCALE_MODES {\r\n    NEAREST = 0,\r\n    LINEAR = 1\r\n}\r\n\r\n/**\r\n * Various GL target types.\r\n * @memberof PIXI\r\n * @static\r\n * @name TARGETS\r\n * @enum {number}\r\n * @property {number} [TEXTURE_2D=3553] -\r\n * @property {number} [TEXTURE_CUBE_MAP=34067] -\r\n * @property {number} [TEXTURE_2D_ARRAY=35866] -\r\n * @property {number} [TEXTURE_CUBE_MAP_POSITIVE_X=34069] -\r\n * @property {number} [TEXTURE_CUBE_MAP_NEGATIVE_X=34070] -\r\n * @property {number} [TEXTURE_CUBE_MAP_POSITIVE_Y=34071] -\r\n * @property {number} [TEXTURE_CUBE_MAP_NEGATIVE_Y=34072] -\r\n * @property {number} [TEXTURE_CUBE_MAP_POSITIVE_Z=34073] -\r\n * @property {number} [TEXTURE_CUBE_MAP_NEGATIVE_Z=34074] -\r\n */\r\nexport declare enum TARGETS {\r\n    TEXTURE_2D = 3553,\r\n    TEXTURE_CUBE_MAP = 34067,\r\n    TEXTURE_2D_ARRAY = 35866,\r\n    TEXTURE_CUBE_MAP_POSITIVE_X = 34069,\r\n    TEXTURE_CUBE_MAP_NEGATIVE_X = 34070,\r\n    TEXTURE_CUBE_MAP_POSITIVE_Y = 34071,\r\n    TEXTURE_CUBE_MAP_NEGATIVE_Y = 34072,\r\n    TEXTURE_CUBE_MAP_POSITIVE_Z = 34073,\r\n    TEXTURE_CUBE_MAP_NEGATIVE_Z = 34074\r\n}\r\n\r\n/**\r\n * Various GL data format types.\r\n * @memberof PIXI\r\n * @static\r\n * @name TYPES\r\n * @enum {number}\r\n * @property {number} [UNSIGNED_BYTE=5121] -\r\n * @property {number} [UNSIGNED_SHORT=5123] -\r\n * @property {number} [UNSIGNED_SHORT_5_6_5=33635] -\r\n * @property {number} [UNSIGNED_SHORT_4_4_4_4=32819] -\r\n * @property {number} [UNSIGNED_SHORT_5_5_5_1=32820] -\r\n * @property {number} [UNSIGNED_INT=5125] -\r\n * @property {number} [UNSIGNED_INT_10F_11F_11F_REV=35899] -\r\n * @property {number} [UNSIGNED_INT_2_10_10_10_REV=33640] -\r\n * @property {number} [UNSIGNED_INT_24_8=34042] -\r\n * @property {number} [UNSIGNED_INT_5_9_9_9_REV=35902] -\r\n * @property {number} [BYTE=5120] -\r\n * @property {number} [SHORT=5122] -\r\n * @property {number} [INT=5124] -\r\n * @property {number} [FLOAT=5126] -\r\n * @property {number} [FLOAT_32_UNSIGNED_INT_24_8_REV=36269] -\r\n * @property {number} [HALF_FLOAT=36193] -\r\n */\r\nexport declare enum TYPES {\r\n    UNSIGNED_BYTE = 5121,\r\n    UNSIGNED_SHORT = 5123,\r\n    UNSIGNED_SHORT_5_6_5 = 33635,\r\n    UNSIGNED_SHORT_4_4_4_4 = 32819,\r\n    UNSIGNED_SHORT_5_5_5_1 = 32820,\r\n    UNSIGNED_INT = 5125,\r\n    UNSIGNED_INT_10F_11F_11F_REV = 35899,\r\n    UNSIGNED_INT_2_10_10_10_REV = 33640,\r\n    UNSIGNED_INT_24_8 = 34042,\r\n    UNSIGNED_INT_5_9_9_9_REV = 35902,\r\n    BYTE = 5120,\r\n    SHORT = 5122,\r\n    INT = 5124,\r\n    FLOAT = 5126,\r\n    FLOAT_32_UNSIGNED_INT_24_8_REV = 36269,\r\n    HALF_FLOAT = 36193\r\n}\r\n\r\n/**\r\n * The wrap modes that are supported by pixi.\r\n *\r\n * The {@link PIXI.settings.WRAP_MODE} wrap mode affects the default wrapping mode of future operations.\r\n * It can be re-assigned to either CLAMP or REPEAT, depending upon suitability.\r\n * If the texture is non power of two then clamp will be used regardless as WebGL can\r\n * only use REPEAT if the texture is po2.\r\n *\r\n * This property only affects WebGL.\r\n * @name WRAP_MODES\r\n * @memberof PIXI\r\n * @static\r\n * @enum {number}\r\n * @property {number} CLAMP - The textures uvs are clamped\r\n * @property {number} REPEAT - The texture uvs tile and repeat\r\n * @property {number} MIRRORED_REPEAT - The texture uvs tile and repeat with mirroring\r\n */\r\nexport declare enum WRAP_MODES {\r\n    CLAMP = 33071,\r\n    REPEAT = 10497,\r\n    MIRRORED_REPEAT = 33648\r\n}\r\n\r\nexport { }\r\n"
    ]
  