
    export default [
      "engine.io-client\\build\\esm\\socket.d.ts",
      "import { Emitter } from \"@socket.io/component-emitter\";\nexport interface SocketOptions {\n    /**\n     * The host that we're connecting to. Set from the URI passed when connecting\n     */\n    host: string;\n    /**\n     * The hostname for our connection. Set from the URI passed when connecting\n     */\n    hostname: string;\n    /**\n     * If this is a secure connection. Set from the URI passed when connecting\n     */\n    secure: boolean;\n    /**\n     * The port for our connection. Set from the URI passed when connecting\n     */\n    port: string;\n    /**\n     * Any query parameters in our uri. Set from the URI passed when connecting\n     */\n    query: {\n        [key: string]: string;\n    };\n    /**\n     * `http.Agent` to use, defaults to `false` (NodeJS only)\n     */\n    agent: string | boolean;\n    /**\n     * Whether the client should try to upgrade the transport from\n     * long-polling to something better.\n     * @default true\n     */\n    upgrade: boolean;\n    /**\n     * Forces base 64 encoding for polling transport even when XHR2\n     * responseType is available and WebSocket even if the used standard\n     * supports binary.\n     */\n    forceBase64: boolean;\n    /**\n     * The param name to use as our timestamp key\n     * @default 't'\n     */\n    timestampParam: string;\n    /**\n     * Whether to add the timestamp with each transport request. Note: this\n     * is ignored if the browser is IE or Android, in which case requests\n     * are always stamped\n     * @default false\n     */\n    timestampRequests: boolean;\n    /**\n     * A list of transports to try (in order). Engine.io always attempts to\n     * connect directly with the first one, provided the feature detection test\n     * for it passes.\n     * @default ['polling','websocket']\n     */\n    transports: string[];\n    /**\n     * The port the policy server listens on\n     * @default 843\n     */\n    policyPost: number;\n    /**\n     * If true and if the previous websocket connection to the server succeeded,\n     * the connection attempt will bypass the normal upgrade process and will\n     * initially try websocket. A connection attempt following a transport error\n     * will use the normal upgrade process. It is recommended you turn this on\n     * only when using SSL/TLS connections, or if you know that your network does\n     * not block websockets.\n     * @default false\n     */\n    rememberUpgrade: boolean;\n    /**\n     * Are we only interested in transports that support binary?\n     */\n    onlyBinaryUpgrades: boolean;\n    /**\n     * Timeout for xhr-polling requests in milliseconds (0) (only for polling transport)\n     */\n    requestTimeout: number;\n    /**\n     * Transport options for Node.js client (headers etc)\n     */\n    transportOptions: Object;\n    /**\n     * (SSL) Certificate, Private key and CA certificates to use for SSL.\n     * Can be used in Node.js client environment to manually specify\n     * certificate information.\n     */\n    pfx: string;\n    /**\n     * (SSL) Private key to use for SSL. Can be used in Node.js client\n     * environment to manually specify certificate information.\n     */\n    key: string;\n    /**\n     * (SSL) A string or passphrase for the private key or pfx. Can be\n     * used in Node.js client environment to manually specify certificate\n     * information.\n     */\n    passphrase: string;\n    /**\n     * (SSL) Public x509 certificate to use. Can be used in Node.js client\n     * environment to manually specify certificate information.\n     */\n    cert: string;\n    /**\n     * (SSL) An authority certificate or array of authority certificates to\n     * check the remote host against.. Can be used in Node.js client\n     * environment to manually specify certificate information.\n     */\n    ca: string | string[];\n    /**\n     * (SSL) A string describing the ciphers to use or exclude. Consult the\n     * [cipher format list]\n     * (http://www.openssl.org/docs/apps/ciphers.html#CIPHER_LIST_FORMAT) for\n     * details on the format.. Can be used in Node.js client environment to\n     * manually specify certificate information.\n     */\n    ciphers: string;\n    /**\n     * (SSL) If true, the server certificate is verified against the list of\n     * supplied CAs. An 'error' event is emitted if verification fails.\n     * Verification happens at the connection level, before the HTTP request\n     * is sent. Can be used in Node.js client environment to manually specify\n     * certificate information.\n     */\n    rejectUnauthorized: boolean;\n    /**\n     * Headers that will be passed for each request to the server (via xhr-polling and via websockets).\n     * These values then can be used during handshake or for special proxies.\n     */\n    extraHeaders?: {\n        [header: string]: string;\n    };\n    /**\n     * Whether to include credentials (cookies, authorization headers, TLS\n     * client certificates, etc.) with cross-origin XHR polling requests\n     * @default false\n     */\n    withCredentials: boolean;\n    /**\n     * Whether to automatically close the connection whenever the beforeunload event is received.\n     * @default true\n     */\n    closeOnBeforeunload: boolean;\n    /**\n     * Whether to always use the native timeouts. This allows the client to\n     * reconnect when the native timeout functions are overridden, such as when\n     * mock clocks are installed.\n     * @default false\n     */\n    useNativeTimers: boolean;\n    /**\n     * weather we should unref the reconnect timer when it is\n     * create automatically\n     * @default false\n     */\n    autoUnref: boolean;\n    /**\n     * parameters of the WebSocket permessage-deflate extension (see ws module api docs). Set to false to disable.\n     * @default false\n     */\n    perMessageDeflate: {\n        threshold: number;\n    };\n    /**\n     * The path to get our client file from, in the case of the server\n     * serving it\n     * @default '/engine.io'\n     */\n    path: string;\n    /**\n     * Either a single protocol string or an array of protocol strings. These strings are used to indicate sub-protocols,\n     * so that a single server can implement multiple WebSocket sub-protocols (for example, you might want one server to\n     * be able to handle different types of interactions depending on the specified protocol)\n     * @default []\n     */\n    protocols: string | string[];\n}\ninterface SocketReservedEvents {\n    open: () => void;\n    handshake: (data: any) => void;\n    packet: (packet: any) => void;\n    packetCreate: (packet: any) => void;\n    data: (data: any) => void;\n    message: (data: any) => void;\n    drain: () => void;\n    flush: () => void;\n    heartbeat: () => void;\n    ping: () => void;\n    pong: () => void;\n    error: (err: string | Error) => void;\n    upgrading: (transport: any) => void;\n    upgrade: (transport: any) => void;\n    upgradeError: (err: Error) => void;\n    close: (reason: string, desc?: Error) => void;\n}\nexport declare class Socket extends Emitter<{}, {}, SocketReservedEvents> {\n    id: string;\n    transport: any;\n    binaryType: string;\n    private readyState;\n    private writeBuffer;\n    private prevBufferLen;\n    private upgrades;\n    private pingInterval;\n    private pingTimeout;\n    private pingTimeoutTimer;\n    private setTimeoutFn;\n    private clearTimeoutFn;\n    private offlineEventListener;\n    private upgrading;\n    private readonly opts;\n    private readonly secure;\n    private readonly hostname;\n    private readonly port;\n    private readonly transports;\n    static priorWebsocketSuccess: boolean;\n    static protocol: number;\n    /**\n     * Socket constructor.\n     *\n     * @param {String|Object} uri or options\n     * @param {Object} opts - options\n     * @api public\n     */\n    constructor(uri: any, opts?: Partial<SocketOptions>);\n    /**\n     * Creates transport of the given type.\n     *\n     * @param {String} transport name\n     * @return {Transport}\n     * @api private\n     */\n    private createTransport;\n    /**\n     * Initializes transport to use and starts probe.\n     *\n     * @api private\n     */\n    private open;\n    /**\n     * Sets the current transport. Disables the existing one (if any).\n     *\n     * @api private\n     */\n    private setTransport;\n    /**\n     * Probes a transport.\n     *\n     * @param {String} transport name\n     * @api private\n     */\n    private probe;\n    /**\n     * Called when connection is deemed open.\n     *\n     * @api private\n     */\n    private onOpen;\n    /**\n     * Handles a packet.\n     *\n     * @api private\n     */\n    private onPacket;\n    /**\n     * Called upon handshake completion.\n     *\n     * @param {Object} data - handshake obj\n     * @api private\n     */\n    private onHandshake;\n    /**\n     * Sets and resets ping timeout timer based on server pings.\n     *\n     * @api private\n     */\n    private resetPingTimeout;\n    /**\n     * Called on `drain` event\n     *\n     * @api private\n     */\n    private onDrain;\n    /**\n     * Flush write buffers.\n     *\n     * @api private\n     */\n    private flush;\n    /**\n     * Sends a message.\n     *\n     * @param {String} message.\n     * @param {Function} callback function.\n     * @param {Object} options.\n     * @return {Socket} for chaining.\n     * @api public\n     */\n    write(msg: any, options: any, fn?: any): this;\n    send(msg: any, options: any, fn?: any): this;\n    /**\n     * Sends a packet.\n     *\n     * @param {String} packet type.\n     * @param {String} data.\n     * @param {Object} options.\n     * @param {Function} callback function.\n     * @api private\n     */\n    private sendPacket;\n    /**\n     * Closes the connection.\n     *\n     * @api public\n     */\n    close(): this;\n    /**\n     * Called upon transport error\n     *\n     * @api private\n     */\n    private onError;\n    /**\n     * Called upon transport close.\n     *\n     * @api private\n     */\n    private onClose;\n    /**\n     * Filters upgrades, returning only those matching client transports.\n     *\n     * @param {Array} server upgrades\n     * @api private\n     *\n     */\n    private filterUpgrades;\n}\nexport {};\n"
    ]
  