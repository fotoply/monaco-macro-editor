
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\client\\pixi\\core\\shapes\\source-polygon.d.ts",
      "interface PointSourcePolygonConfig {\n  /** The type of polygon being computed */\n  type?: foundry.CONST.WALL_RESTRICTION_TYPES;\n\n  /** The angle of emission, if limited */\n  angle?: number;\n\n  /** The desired density of padding rays, a number per PI */\n  density?: number;\n\n  /** A limited radius of the resulting polygon */\n  radius?: number;\n\n  /** The direction of facing, required if the angle is limited */\n  rotation?: number;\n\n  /** Display debugging visualization and logging for the polygon */\n  debug?: boolean;\n\n  /** Is this polygon constrained by any walls? */\n  walls?: boolean;\n\n  /** The object (if any) that spawned this polygon. */\n  source?: PointSource;\n}\n\n/**\n * An extension of the default PIXI.Polygon which is used to represent the line of sight for a point source.\n */\ndeclare abstract class PointSourcePolygon extends PIXI.Polygon {\n  /**\n   * The origin point of the source polygon.\n   */\n  origin: Point;\n\n  /**\n   * The configuration of this polygon.\n   * @defaultValue `{}`\n   */\n  config: PointSourcePolygonConfig;\n\n  /**\n   * A cached array of SightRay objects used to compute the polygon.\n   * @defaultValue `[]`\n   * @remarks This is documented as `SightRay[]` but that's only correct for the {@link RadialSweepPolygon}\n   */\n  rays: Ray[];\n\n  /**\n   * Compute the rectangular bounds for the Polygon.\n   * @param points - The initially provided array of coordinates\n   * @returns The computed Rectangular bounds\n   */\n  protected _getBounds(points: number[]): PIXI.Rectangle;\n\n  /**\n   * Benchmark the performance of polygon computation for this source\n   * @param iterations - The number of test iterations to perform\n   * @param args       - Arguments passed to the compute method\n   */\n  static benchmark(\n    iterations: number,\n    ...args: Parameters<typeof PointSourcePolygon['create']>\n  ): ReturnType<typeof foundry.utils.benchmark>;\n\n  /**\n   * Compute the polygon given a point origin and radius\n   * @param origin - The origin source point\n   * @param config - Configuration options which customize the polygon computation\n   *                 (default: `{}`)\n   * @returns The computed polygon instance\n   */\n  static create(\n    origin: Point,\n    config?: Parameters<PointSourcePolygon['initialize']>[1] | undefined\n  ): ReturnType<PointSourcePolygon['compute']>;\n\n  /**\n   * Compute the polygon using the origin and configuration options.\n   * @returns The computed polygon\n   */\n  compute(): this;\n\n  /**\n   * Perform the implementation-specific computation\n   */\n  protected abstract _compute(): void;\n\n  /**\n   * Customize the provided configuration object for this polygon type.\n   * @param origin - The provided polygon origin\n   * @param config - The provided configuration object\n   */\n  initialize(origin: Point, config: PointSourcePolygonConfig): void;\n\n  /**\n   * Visualize the polygon, displaying its computed area, rays, and collision points\n   */\n  visualize(): void;\n}\n\n/**\n * Compare sight performance between different algorithms\n * @param n    - The number of iterations\n * @param args - Arguments passed to the polygon compute function\n */\ndeclare function benchmarkSight(\n  n: number,\n  ...args: Parameters<typeof ClockwiseSweepPolygon['benchmark']>\n): Promise<void>;\n"
    ]
  