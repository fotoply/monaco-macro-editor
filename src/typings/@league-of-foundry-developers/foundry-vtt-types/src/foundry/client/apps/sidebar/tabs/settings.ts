
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\client\\apps\\sidebar\\tabs\\settings.d.ts",
      "import { ConfiguredDocumentClass } from '../../../../../types/helperTypes';\n\ndeclare global {\n  /**\n   * The sidebar tab which displays various game settings, help messages, and configuration options.\n   * The Settings sidebar is the furthest-to-right using a triple-cogs icon.\n   * @typeParam Options - The type of the options object\n   * @typeParam Data    - The data structure used to render the handlebars template.\n   */\n  class Settings<\n    Options extends ApplicationOptions = ApplicationOptions,\n    Data extends object = Settings.Data\n  > extends SidebarTab<Options> {\n    /**\n     * @defaultValue\n     * ```typescript\n     * const options = super.defaultOptions;\n     * options.id = \"settings\";\n     * options.template = \"templates/sidebar/settings.html\";\n     * options.title = \"Settings\";\n     * ```\n     */\n    static override get defaultOptions(): ApplicationOptions;\n\n    override getData(options?: Partial<Options>): Data | Promise<Data>;\n\n    override activateListeners(html: JQuery): void;\n\n    /**\n     * Delegate different actions for different settings buttons\n     * @internal\n     */\n    protected _onSettingsButton(event: JQuery.ClickEvent): void;\n\n    /**\n     * Executes with the update notification pip is clicked\n     * @param event - The originating click event\n     * @internal\n     */\n    protected _onUpdateNotificationClick(event: JQuery.ClickEvent): void;\n  }\n\n  namespace Settings {\n    interface Data {\n      user: InstanceType<ConfiguredDocumentClass<typeof User>>;\n      system: Game['system'];\n      release: Game['data']['release'];\n      versionDisplay: Game['release']['display'];\n      isDemo: boolean;\n      canConfigure: boolean;\n      canEditWorld: boolean;\n      canManagePlayers: boolean;\n      canReturnSetup: boolean;\n      coreUpdate: string | false;\n      systemUpdate: string | false;\n      modules: number;\n    }\n  }\n\n  /**\n   * A simple window application which shows the built documentation pages within an iframe\n   */\n  class FrameViewer extends Application {\n    url: string;\n\n    /**\n     * @defaultValue\n     * ```\n     * mergeObject(super.defaultOptions, {\n     *   height: window.innerHeight * 0.9,\n     *   width: Math.min(window.innerWidth * 0.9, 1200),\n     *   top: (window.innerHeight - height) / 2,\n     *   left: (window.innerWidth - width) / 2,\n     *   id: \"documentation\",\n     *   template: \"templates/apps/documentation.html\",\n     * })\n     * ```\n     */\n    static override get defaultOptions(): typeof Application['defaultOptions'];\n\n    override getData(options?: Partial<ApplicationOptions>): Promise<{ src: string }>;\n\n    override close(options?: Application.CloseOptions): ReturnType<Application['close']>;\n  }\n}\n"
    ]
  