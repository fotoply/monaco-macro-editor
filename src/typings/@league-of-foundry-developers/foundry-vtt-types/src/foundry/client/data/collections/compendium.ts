
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\client\\data\\collections\\compendium.d.ts",
      "import { ConfiguredDocumentClassForName } from '../../../../types/helperTypes';\nimport { DocumentModificationOptions } from '../../../common/abstract/document.mjs.js';\n\ndeclare global {\n  /**\n   * A collection of Document objects contained within a specific compendium pack.\n   * Each Compendium pack has its own associated instance of the CompendiumCollection class which contains its contents.\n   *\n   * @see {@link Game#packs}\n   */\n  class CompendiumCollection<T extends CompendiumCollection.Metadata> extends DocumentCollection<\n    DocumentClassForCompendiumMetadata<T>,\n    'CompendiumCollection'\n  > {\n    /** @param metadata - The compendium metadata, an object provided by game.data */\n    constructor(metadata: T);\n\n    /** The compendium metadata which defines the compendium content and location */\n    metadata: T & {\n      /** @deprecated \"The 'entity' field of compendium metadata is deprecated. Please use CompendiumCollection#documentName instead.\" */\n      get entity(): T['type'];\n    };\n\n    /**  A subsidiary collection which contains the more minimal index of the pack */\n    index: IndexTypeForMetadata<T>;\n\n    /**\n     * A debounced function which will clear the contents of the Compendium pack if it is not accessed frequently.\n     * @internal\n     */\n    _flush: () => void;\n\n    /**\n     * Has this Compendium pack been fully indexed?\n     * @defaultValue `false`\n     */\n    indexed: boolean;\n\n    /**\n     * The amount of time that Document instances within this CompendiumCollection are held in memory.\n     * Accessing the contents of the Compendium pack extends the duration of this lifetime.\n     * @defaultValue `300`\n     */\n    static CACHE_LIFETIME_SECONDS: number;\n\n    /**\n     * The named game setting which contains Compendium configurations.\n     */\n    static CONFIG_SETTING: 'compendiumConfiguration';\n\n    /**\n     * The default index fields which should be retrieved for each Compendium document type\n     * @remarks TODO: We should also allow nested paths\n     */\n    static INDEX_FIELDS: {\n      /** @defaultValue `[\"name\", \"img\", \"type\"]` */\n      Actor: (keyof foundry.data.ActorData['_source'])[];\n\n      /** @defaultValue `[\"name\", \"img\"]` */\n      Adventure: (keyof foundry.data.AdventureData['_source'])[];\n\n      /** @defaultValue `[\"name\", \"img\", \"type\"]` */\n      Item: (keyof foundry.data.ItemData['_source'])[];\n\n      /** @defaultValue `[\"name\", \"img\", \"type\"]` */\n      Cards: (keyof foundry.data.CardsData['_source'])[];\n\n      /** @defaultValue `[\"name\", \"thumb\"]` */\n      Scene: (keyof foundry.data.SceneData['_source'])[];\n\n      /** @defaultValue `[\"name\", \"img\"]` */\n      JournalEntry: (keyof foundry.data.JournalEntryData['_source'])[];\n\n      /** @defaultValue `[\"name\", \"img\"]` */\n      Macro: (keyof foundry.data.MacroData['_source'])[];\n\n      /** @defaultValue `[\"name\", \"img\"]` */\n      RollTable: (keyof foundry.data.RollTableData['_source'])[];\n\n      /** @defaultValue `[\"name\"]` */\n      Playlist: (keyof foundry.data.PlaylistData['_source'])[];\n    };\n\n    /** The canonical Compendium name - comprised of the originating package and the pack name */\n    get collection(): string;\n\n    /** Access the compendium configuration data for this pack */\n    get config(): CompendiumCollection.Configuration | {};\n\n    get documentName(): this['metadata']['type'];\n\n    /** Track whether the Compendium Collection is locked for editing */\n    get locked(): boolean;\n\n    /** Track whether the Compendium Collection is private */\n    get private(): boolean;\n\n    /** A convenience reference to the label which should be used as the title for the Compendium pack. */\n    get title(): string;\n\n    get(key: string, { strict }: { strict: true }): StoredDocument<DocumentInstanceForCompendiumMetadata<T>>;\n    get(\n      key: string,\n      { strict }?: { strict?: false | undefined } | undefined\n    ): StoredDocument<DocumentInstanceForCompendiumMetadata<T>> | undefined;\n\n    set(id: string, document: StoredDocument<DocumentInstanceForCompendiumMetadata<T>>): this;\n\n    delete: (id: string) => boolean;\n\n    /**\n     * Load the Compendium index and cache it as the keys and values of the Collection.\n     * @param options - Options which customize how the index is created\n     */\n    getIndex(options?: CompendiumCollection.GetIndexOptions<T> | undefined): Promise<this['index']>;\n\n    /**\n     * Get a single Document from this Compendium by ID.\n     * The document may already be locally cached, otherwise it is retrieved from the server.\n     * @param id -  The requested Document id\n     * @returns The retrieved Document instance\n     */\n    getDocument(id: string): Promise<StoredDocument<DocumentInstanceForCompendiumMetadata<T>> | undefined | null>;\n\n    /**\n     * Load multiple documents from the Compendium pack using a provided query object.\n     * @param query - A database query used to retrieve documents from the underlying database\n     *                default: `{}`\n     * @returns The retrieved Document instances\n     */\n    getDocuments(\n      query?: Record<string, unknown> | undefined\n    ): Promise<StoredDocument<DocumentInstanceForCompendiumMetadata<T>>[]>;\n\n    /**\n     * Import a Document into this Compendium Collection.\n     * @param document - The existing Document you wish to import\n     * @param options  - Additional options which modify how the data is imported. See {@link ClientDocumentMixin#toCompendium}\n     *                   (default: `{}`)\n     * @returns The imported Document instance\n     */\n    importDocument(\n      document: DocumentInstanceForCompendiumMetadata<T>,\n      options?: ClientDocumentMixin.CompendiumExportOptions | undefined\n    ): Promise<StoredDocument<DocumentInstanceForCompendiumMetadata<T>> | undefined>;\n\n    /**\n     * Fully import the contents of a Compendium pack into a World folder.\n     * @param folderId   - An existing Folder _id to use.\n     *                     (default: `null`)\n     * @param folderName - A new Folder name to create.\n     *                     (default: `''`)\n     * @param options    - Additional options forwarded to {@link WorldCollection#fromCompendium} and {@link Document.createDocuments}\n     *                     (default: `{}`)\n     * @returns The imported Documents, now existing within the World\n     */\n    importAll({\n      folderId,\n      folderName,\n      options\n    }?: ImportAllOptions | undefined): Promise<StoredDocument<DocumentInstanceForCompendiumMetadata<T>>[]>;\n\n    /**\n     * Provide a dialog form that prompts the user to import the full contents of a Compendium pack into the World.\n     * @param options - Additional options passed to the Dialog.confirm method\n     *                  (default: `{}`)\n     * @returns A promise which resolves in the following ways: an array of imported\n     *          Documents if the \"yes\" button was pressed, false if the \"no\" button was pressed, or\n     *          null if the dialog was closed without making a choice.\n     */\n    importDialog(\n      options?: DialogOptions | undefined\n    ): Promise<StoredDocument<DocumentInstanceForCompendiumMetadata<T>>[] | null | false>;\n\n    /**\n     * Add a Document to the index, capturing it's relevant index attributes\n     * @param document -The document to index\n     */\n    indexDocument(document: StoredDocument<DocumentInstanceForCompendiumMetadata<T>>): void;\n\n    /**\n     * Create a new Compendium Collection using provided metadata.\n     * @param metadata - The compendium metadata used to create the new pack\n     * @param options - Additional options which modify the Compendium creation request\n     *                  default `{}`\n     */\n    static createCompendium<T extends CompendiumCollection.Metadata>(\n      metadata: T,\n      options?: Partial<DocumentModificationOptions> | undefined\n    ): Promise<CompendiumCollection<T>>;\n\n    /**\n     * Assign configuration metadata settings to the compendium pack\n     * @param settings - The object of compendium settings to define\n     *                   default: `{}`\n     * @returns A Promise which resolves once the setting is updated\n     */\n    configure(\n      settings?: Partial<CompendiumCollection.Configuration> | undefined\n    ): Promise<CompendiumCollection.Configuration>;\n\n    /**\n     * Delete an existing world-level Compendium Collection.\n     * This action may only be performed for world-level packs by a Gamemaster User.\n     */\n    deleteCompendium(): Promise<this>;\n\n    /**\n     * Duplicate a compendium pack to the current World.\n     * @param label - A new Compendium label\n     */\n    duplicateCompendium({ label }?: { label?: string | undefined }): Promise<this>;\n\n    /**\n     * Validate that the current user is able to modify content of this Compendium pack\n     * @param requireUnlocked - `(default: true)`\n     * @internal\n     */\n    protected _assertUserCanModify({ requireUnlocked }?: { requireUnlocked?: boolean | undefined } | undefined): true;\n\n    /**\n     * Request that a Compendium pack be migrated to the latest System data template\n     * @remarks\n     * Currently, there are no options that are being considered by foundry when migrating a\n     * a compendium pack.\n     */\n    migrate(options?: Record<string, unknown> | undefined): Promise<this>;\n\n    override updateAll(\n      transformation:\n        | DeepPartial<DocumentInstanceForCompendiumMetadata<T>['data']['_source']>\n        | ((\n            doc: StoredDocument<DocumentInstanceForCompendiumMetadata<T>>\n          ) => DeepPartial<DocumentInstanceForCompendiumMetadata<T>['data']['_source']>),\n      condition?: ((obj: StoredDocument<DocumentInstanceForCompendiumMetadata<T>>) => boolean) | null,\n      options?: DocumentModificationContext\n    ): ReturnType<this['documentClass']['updateDocuments']>;\n\n    protected _onCreateDocuments(\n      documents: StoredDocument<DocumentInstanceForCompendiumMetadata<T>>[],\n      result: (DocumentInstanceForCompendiumMetadata<T>['data']['_source'] & { _id: string })[],\n      options: DocumentModificationOptions,\n      userId: string\n    ): void;\n\n    protected _onUpdateDocuments(\n      documents: StoredDocument<DocumentInstanceForCompendiumMetadata<T>>[],\n      result: (DeepPartial<DocumentInstanceForCompendiumMetadata<T>['data']['_source']> & { _id: string })[],\n      options: DocumentModificationOptions,\n      userId: string\n    ): void;\n\n    protected _onDeleteDocuments(\n      documents: StoredDocument<DocumentInstanceForCompendiumMetadata<T>>[],\n      result: string[],\n      options: DocumentModificationOptions,\n      userId: string\n    ): void;\n\n    /**\n     * Follow-up actions taken when Documents within this Compendium pack are modified\n     * @internal\n     */\n    protected _onModifyContents(\n      documents: StoredDocument<DocumentInstanceForCompendiumMetadata<T>>[],\n      options: DocumentModificationOptions,\n      userId: string\n    ): void;\n  }\n\n  namespace CompendiumCollection {\n    interface Configuration {\n      private: boolean;\n      locked: boolean;\n    }\n    interface Metadata {\n      type: foundry.CONST.COMPENDIUM_DOCUMENT_TYPES;\n      name: string;\n      label: string;\n      path: string;\n      private: boolean;\n      package: string;\n      system?: string;\n    }\n\n    interface GetIndexOptions<T extends CompendiumCollection.Metadata> {\n      /** An array of fields to return as part of the index */\n      fields?: (keyof DocumentInstanceForCompendiumMetadata<T>['data']['_source'])[];\n    }\n  }\n}\n\ninterface ImportAllOptions {\n  /**\n   * An existing Folder _id to use.\n   * @defaultValue `null`\n   * */\n  folderId?: string | null | undefined;\n  /**\n   * A new Folder name to create.\n   * @defaultValue `\"\"`\n   * */\n  folderName?: string | undefined;\n  /**\n   * Additional options forwarded to {@link WorldCollection#fromCompendium} and {@link Document.createDocuments}\n   * @defaultValue `{}`\n   */\n  options?: (DocumentModificationContext & WorldCollection.FromCompendiumOptions) | undefined;\n}\n\ntype DocumentClassForCompendiumMetadata<T extends CompendiumCollection.Metadata> = ConfiguredDocumentClassForName<\n  T['type']\n>;\n\ntype DocumentInstanceForCompendiumMetadata<T extends CompendiumCollection.Metadata> = InstanceType<\n  DocumentClassForCompendiumMetadata<T>\n>;\n\ntype IndexTypeForMetadata<T extends CompendiumCollection.Metadata> = foundry.utils.Collection<\n  { _id: string } & Partial<DocumentInstanceForCompendiumMetadata<T>['data']['_source']>\n>;\n"
    ]
  