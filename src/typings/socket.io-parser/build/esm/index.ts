
    export default [
      "socket.io-parser\\build\\esm\\index.d.ts",
      "import { Emitter } from \"@socket.io/component-emitter\";\n/**\n * Protocol version.\n *\n * @public\n */\nexport declare const protocol: number;\nexport declare enum PacketType {\n    CONNECT = 0,\n    DISCONNECT = 1,\n    EVENT = 2,\n    ACK = 3,\n    CONNECT_ERROR = 4,\n    BINARY_EVENT = 5,\n    BINARY_ACK = 6\n}\nexport interface Packet {\n    type: PacketType;\n    nsp: string;\n    data?: any;\n    id?: number;\n    attachments?: number;\n}\n/**\n * A socket.io Encoder instance\n */\nexport declare class Encoder {\n    /**\n     * Encode a packet as a single string if non-binary, or as a\n     * buffer sequence, depending on packet type.\n     *\n     * @param {Object} obj - packet object\n     */\n    encode(obj: Packet): any[];\n    /**\n     * Encode packet as string.\n     */\n    private encodeAsString;\n    /**\n     * Encode packet as 'buffer sequence' by removing blobs, and\n     * deconstructing packet into object with placeholders and\n     * a list of buffers.\n     */\n    private encodeAsBinary;\n}\ninterface DecoderReservedEvents {\n    decoded: (packet: Packet) => void;\n}\n/**\n * A socket.io Decoder instance\n *\n * @return {Object} decoder\n */\nexport declare class Decoder extends Emitter<{}, {}, DecoderReservedEvents> {\n    private reconstructor;\n    constructor();\n    /**\n     * Decodes an encoded packet string into packet JSON.\n     *\n     * @param {String} obj - encoded packet\n     */\n    add(obj: any): void;\n    /**\n     * Decode a packet String (JSON data)\n     *\n     * @param {String} str\n     * @return {Object} packet\n     */\n    private decodeString;\n    private static isPayloadValid;\n    /**\n     * Deallocates a parser's resources\n     */\n    destroy(): void;\n}\nexport {};\n"
    ]
  