
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\client\\data\\documents\\table.d.ts",
      "import { ConfiguredDocumentClass } from '../../../../types/helperTypes';\nimport { DocumentModificationOptions } from '../../../common/abstract/document.mjs';\n\ndeclare global {\n  /**\n   * The client-side RollTable document which extends the common BaseRollTable model.\n   * Each RollTable document contains RollTableData which defines its data schema.\n   *\n   * @see {@link data.RollTableData}              The RollTable data schema\n   * @see {@link documents.RollTables}            The world-level collection of RollTable documents\n   * @see {@link applications.RollTableConfig}    The RollTable configuration application\n   */\n  class RollTable extends ClientDocumentMixin(foundry.documents.BaseRollTable) {\n    /**\n     * @param data    - Initial data provided to construct the RollTable document\n     * @param context - The document context, see {@link foundry.abstract.Document}\n     */\n    constructor(\n      data: ConstructorParameters<typeof foundry.documents.BaseRollTable>[0],\n      context?: ConstructorParameters<typeof foundry.documents.BaseRollTable>[1]\n    );\n\n    /**\n     * Provide a thumbnail image path used to represent this document.\n     */\n    get thumbnail(): this['data']['img'];\n\n    /**\n     * Display a result drawn from a RollTable in the Chat Log along.\n     * Optionally also display the Roll which produced the result and configure aspects of the displayed messages.\n     *\n     * @param results - An Array of one or more TableResult Documents which were drawn and should be displayed\n     * @param options - Additional options which modify message creation\n     */\n    toMessage(\n      results: InstanceType<ConfiguredDocumentClass<typeof foundry.documents.BaseTableResult>>[],\n      options?: Partial<RollTable.ToMessageOptions>\n    ): Promise<InstanceType<ConfiguredDocumentClass<typeof foundry.documents.BaseChatMessage>> | undefined>;\n\n    /**\n     * Draw a result from the RollTable based on the table formula or a provided Roll instance\n     * @param options - Optional arguments which customize the draw behavior\n     * @returns A Promise which resolves to an object containing the executed roll and the produced results\n     */\n    draw(options?: RollTable.DrawOptions): Promise<RollTableDraw>;\n\n    /**\n     * Draw multiple results from a RollTable, constructing a final synthetic Roll as a dice pool of inner rolls.\n     * @param number  - The number of results to draw\n     * @param options - Optional arguments which customize the draw\n     * @returns The drawn results\n     */\n    drawMany(number: number, options?: Partial<RollTable.DrawOptions>): Promise<RollTableDraw>;\n\n    /**\n     * Normalize the probabilities of rolling each item in the RollTable based on their assigned weights\n     */\n    normalize(): Promise<this | undefined>;\n\n    /**\n     * Reset the state of the RollTable to return any drawn items to the table\n     * @remarks Actually, returns list of TableEntries updated, not the RollTable.\n     * As written, it force updates all records, not just the ones already drawn.\n     */\n    reset(): Promise<InstanceType<ConfiguredDocumentClass<typeof foundry.documents.BaseTableResult>>[]>;\n\n    /**\n     * Evaluate a RollTable by rolling its formula and retrieving a drawn result.\n     *\n     * Note that this function only performs the roll and identifies the result, the RollTable#draw function should be\n     * called to formalize the draw from the table.\n     *\n     * @param options - (default: `{}`)\n     * @returns The Roll and results drawn by that Roll\n     *\n     * @example\n     * ```typescript\n     * // Draw results using the default table formula\n     * const defaultResults = await table.roll();\n     *\n     * // Draw results using a custom roll formula\n     * const roll = new Roll(\"1d20 + @abilities.wis.mod\", actor.getRollData());\n     * const customResults = await table.roll({roll});\n     * ```\n     */\n    roll(options?: RollTable.RollOptions | undefined): Promise<RollTableDraw>;\n\n    /**\n     * Get an Array of valid results for a given rolled total\n     * @param value - The rolled value\n     * @returns An Array of results\n     */\n    getResultsForRoll(value: number): InstanceType<ConfiguredDocumentClass<typeof TableResult>>[];\n\n    protected override _onCreateEmbeddedDocuments(\n      embeddedName: string,\n      documents: foundry.abstract.Document<any, any>[],\n      result: Record<string, unknown>[],\n      options: DocumentModificationOptions,\n      userId: string\n    ): void;\n\n    override _onDeleteEmbeddedDocuments(\n      embeddedName: string,\n      documents: InstanceType<ConfiguredDocumentClass<typeof TableResult>>[],\n      result: string[],\n      options: DocumentModificationContext,\n      userId: string\n    ): void;\n\n    override toCompendium(\n      pack?: CompendiumCollection<CompendiumCollection.Metadata> | null | undefined,\n      options?: ClientDocumentMixin.CompendiumExportOptions | undefined\n    ): Omit<foundry.data.RollTableData['_source'], '_id' | 'folder' | 'permission'> & {\n      permission?: foundry.data.RollTableData extends { toObject(): infer U } ? U : never;\n    };\n\n    /**\n     * Create a new RollTable document using all of the Documents from a specific Folder as new results.\n     * @param folder  - The Folder document from which to create a roll table\n     * @param options - Additional options passed to the RollTable.create method\n     */\n    static fromFolder(\n      folder: InstanceType<ConfiguredDocumentClass<typeof foundry.documents.BaseFolder>>,\n      options?: DocumentModificationOptions\n    ): Promise<InstanceType<ConfiguredDocumentClass<typeof foundry.documents.BaseRollTable>> | undefined>;\n  }\n\n  namespace RollTable {\n    /**\n     * Optional arguments which customize the draw\n     */\n    interface DrawOptions {\n      /**\n       * An existing Roll instance to use for drawing from the table\n       */\n      roll: Roll;\n\n      /**\n       * Allow drawing recursively from inner RollTable results\n       * @defaultValue `true`\n       */\n      recursive: boolean;\n\n      /**\n       * One or more table results which have been drawn\n       * @defaultValue `[]`\n       */\n      results: foundry.data.TableResultData[];\n\n      /**\n       * Whether to automatically display the results in chat\n       * @defaultValue `true`\n       */\n      displayChat: boolean;\n\n      /**\n       * The chat roll mode to use when displaying the result\n       */\n      rollMode: keyof CONFIG.Dice.RollModes | 'roll';\n    }\n\n    /**\n     * Additional options which modify message creation\n     */\n    interface ToMessageOptions {\n      /**\n       * An optional Roll instance which produced the drawn results\n       */\n      roll: Roll | null;\n\n      /**\n       * Additional data which customizes the created messages\n       * @defaultValue `{}`\n       */\n      messageData: ConstructorParameters<typeof foundry.documents.BaseChatMessage>[0];\n\n      /**\n       * Additional options which customize the created messages\n       * @defaultValue `{}`\n       */\n      messageOptions: DocumentModificationContext & { rollMode: keyof CONFIG.Dice.RollModes | 'roll' };\n    }\n\n    interface RollOptions {\n      /**\n       * An alternative dice Roll to use instead of the default formula for the table\n       */\n      roll?: Roll;\n\n      /**\n       * If a RollTable document is drawn as a result, recursively roll it\n       * @defaultValue `true`\n       */\n      recursive?: boolean;\n\n      /**\n       * An internal flag used to track recursion depth\n       * @defaultValue `0`\n       */\n      _depth?: number;\n    }\n  }\n\n  /**\n   * An object containing the executed Roll and the produced results\n   */\n  interface RollTableDraw {\n    /**\n     * The Dice roll which generated the draw\n     */\n    roll: Roll;\n\n    /**\n     * An array of drawn TableResult documents\n     */\n    results: InstanceType<ConfiguredDocumentClass<typeof foundry.documents.BaseTableResult>>[];\n  }\n}\nexport {};\n"
    ]
  