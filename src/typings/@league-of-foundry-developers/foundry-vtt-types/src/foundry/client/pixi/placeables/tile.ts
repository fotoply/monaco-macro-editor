
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\client\\pixi\\placeables\\tile.d.ts",
      "import type { ConfiguredDocumentClass, ConfiguredObjectClassForName } from '../../../../types/helperTypes';\nimport { DocumentModificationOptions } from '../../../common/abstract/document.mjs';\nimport type { TileDataConstructorData } from '../../../common/data/data.mjs/tileData';\n\ndeclare global {\n  /**\n   * A Tile is an implementation of PlaceableObject which represents a static piece of artwork or prop within the Scene.\n   * Tiles are drawn inside a {@link BackgroundLayer} container.\n   *\n   * @see {@link TileDocument}\n   * @see {@link BackgroundLayer}\n   * @see {@link TileSheet}\n   * @see {@link TileHUD}\n   */\n  class Tile extends PlaceableObject<InstanceType<ConfiguredDocumentClass<typeof TileDocument>>> {\n    /**\n     * @remarks Not used for `Tile`\n     */\n    controlIcon: null;\n\n    /**\n     * The Tile border frame\n     * @defaultValue `undefined`\n     */\n    frame: PIXI.Container | undefined;\n\n    /**\n     * The primary tile image texture\n     * @defaultValue `undefined`\n     */\n    texture: PIXI.Texture | undefined;\n\n    /**\n     * The Tile image sprite\n     * @defaultValue `undefined`\n     */\n    tile: PIXI.Sprite | undefined;\n\n    /**\n     * The occlusion image sprite\n     * @defaultValue `undefined`\n     */\n    occlusionTile: PIXI.Sprite | undefined;\n\n    /**\n     * A Tile background which is displayed if no valid image texture is present\n     * @defaultValue `undefined`\n     */\n    bg: PIXI.Graphics | undefined;\n\n    /**\n     * A cached mapping of non-transparent pixels\n     * @defaultValue `undefined`\n     * @internal\n     */\n    protected _alphaMap:\n      | {\n          minX: number;\n          minY: number;\n          maxX: number;\n          maxY: number;\n          pixels: Uint8Array | undefined;\n          texture: PIXI.RenderTexture | undefined;\n        }\n      | undefined;\n\n    /**\n     * A flag which tracks whether the overhead tile is currently in an occluded state\n     * @defaultValue `false`\n     */\n    occluded: boolean;\n\n    /**\n     * A flag which tracks if the Tile is currently playing\n     * @defaultValue `false`\n     */\n    playing: boolean;\n\n    static override embeddedName: 'Tile';\n\n    /**\n     * Get the native aspect ratio of the base texture for the Tile sprite\n     */\n    get aspectRatio(): number;\n\n    override get bounds(): Rectangle;\n\n    /**\n     * The HTML source element for the primary Tile texture\n     */\n    get sourceElement(): HTMLImageElement | HTMLVideoElement | undefined;\n\n    /**\n     * Does this Tile depict an animated video texture?\n     */\n    get isVideo(): boolean;\n\n    /**\n     * Is this tile a roof\n     */\n    get isRoof(): boolean;\n\n    /**\n     * The effective volume at which this Tile should be playing, including the global ambient volume modifier\n     */\n    get volume(): number;\n\n    override draw(): Promise<this>;\n\n    override destroy(options?: Parameters<PlaceableObject['destroy']>[0]): void;\n\n    /**\n     * @param options - (default: `{}`) */\n\n    override refresh(options?: Tile.RefreshOptions | undefined): this;\n\n    /**\n     * Refresh the display of the Tile border\n     * @internal\n     */\n    protected _refreshBorder(b: Rectangle): void;\n\n    /**\n     * Refresh the display of the Tile resizing handle\n     * @internal\n     */\n    protected _refreshHandle(b: Rectangle): void;\n\n    /**\n     * Play video for this Tile (if applicable).\n     * @param playing - Should the Tile video be playing?\n     * @param options - Additional options for modifying video playback\n     *                  (default: `{}`)\n     */\n    play(playing: boolean, options?: Tile.PlayOptions | undefined): void;\n\n    /**\n     * Unlink the playback of this video tile from the playback of other tokens which are using the same base texture.\n     * @param source - The video element source\n     * @internal\n     */\n    protected _unlinkVideoPlayback(source: HTMLVideoElement): Promise<void>;\n\n    /**\n     * Update the occlusion rendering for this overhead Tile for a given controlled Token.\n     * @param tokens - The set of currently controlled Token objects\n     */\n    updateOcclusion(tokens: Array<InstanceType<ConfiguredObjectClassForName<'Token'>>>): void;\n\n    /**\n     * Test whether a specific Token occludes this overhead tile.\n     * Occlusion is tested against 9 points, the center, the four corners-, and the four cardinal directions\n     * @param token   - The Token to test\n     * @param options - Additional options that affect testing\n     * @returns Is the Token occluded by the Tile?\n     */\n    testOcclusion(\n      token: InstanceType<ConfiguredObjectClassForName<'Token'>>,\n      options?: Tile.OcclusionOptions | undefined\n    ): boolean;\n\n    /**\n     * Test whether the Tile pixel data contains a specific point in canvas space\n     */\n    containsPixel(x: number, y: number): boolean;\n\n    /**\n     * Draw a sprite for the Roof which can be deducted from the fog exploration container\n     */\n    getRoofSprite(): PIXI.Sprite | undefined;\n\n    /**\n     * Swap a Tile from the background to the foreground - or vice versa\n     * TODO: Refactor to private _onSwapLayer\n     */\n    swapLayer(): void;\n\n    /**\n     * Created a cached mapping of pixel alpha for this Tile.\n     * Cache the bounding box of non-transparent pixels for the un-rotated shape.\n     * Store an array of booleans for whether each pixel has a non-transparent value.\n     * @param options - Options which customize the return value\n     * @internal\n     */\n    protected _createAlphaMap(options: Tile.AlphaMapOptions): Exclude<Tile['_alphaMap'], undefined>;\n\n    /**\n     * Compute the alpha-based bounding box for the tile, including an angle of rotation.\n     * @internal\n     */\n    protected _getAlphaBounds(): NormalizedRectangle;\n\n    /**\n     * Create the filter instance used to reverse-mask overhead tiles using radial or vision-based occlusion.\n     * @internal\n     */\n    protected _createOcclusionFilter(): AbstractBaseMaskFilter;\n\n    protected override _onUpdate(\n      changed: DeepPartial<foundry.data.TileData['_source']>,\n      options?: DocumentModificationOptions,\n      userId?: string\n    ): Promise<this> | void;\n\n    protected override _onDelete(options: DocumentModificationOptions, userId: string): void;\n\n    override activateListeners(): void;\n\n    protected override _canConfigure(user: User, event?: any): boolean;\n\n    protected override _onClickLeft2(event: PIXI.InteractionEvent): void;\n\n    protected override _onDragLeftStart(event: PIXI.InteractionEvent): void;\n\n    protected override _onDragLeftMove(event: PIXI.InteractionEvent): void;\n\n    protected override _onDragLeftDrop(event: PIXI.InteractionEvent): Promise<unknown>;\n\n    protected override _onDragLeftCancel(event: MouseEvent): void;\n\n    /**\n     * Handle mouse-over event on a control handle\n     * @param event - The mouseover event\n     */\n    protected _onHandleHoverIn(event: PIXI.InteractionEvent): void;\n\n    /**\n     * Handle mouse-out event on a control handle\n     * @param event - The mouseout event\n     */\n    protected _onHandleHoverOut(event: PIXI.InteractionEvent): void;\n\n    /**\n     * When we start a drag event - create a preview copy of the Tile for re-positioning\n     * @param event - The mousedown event\n     */\n    protected _onHandleMouseDown(event: PIXI.InteractionEvent): void;\n\n    /**\n     * Handle the beginning of a drag event on a resize handle\n     * @param event - The mousedown event\n     */\n    protected _onHandleDragStart(event: PIXI.InteractionEvent): void;\n\n    /**\n     * Handle mousemove while dragging a tile scale handler\n     * @param event - The mousemove event\n     */\n    protected _onHandleDragMove(event: PIXI.InteractionEvent): void;\n\n    /**\n     * Handle mouseup after dragging a tile scale handler\n     * @param event - The mouseup event\n     */\n    protected _onHandleDragDrop(event: PIXI.InteractionEvent): Promise<this>;\n\n    /**\n     * Get resized Tile dimensions\n     * @internal\n     */\n    protected _getResizedDimensions(event: MouseEvent, origin: Point, destination: Point): Rectangle;\n\n    /**\n     * Handle cancellation of a drag event for one of the resizing handles\n     */\n    protected _onHandleDragCancel(): void;\n\n    /**\n     * Create a preview tile with a background texture instead of an image\n     * @param data - Initial data with which to create the preview Tile\n     */\n    static createPreview(data: TileDataConstructorData): InstanceType<ConfiguredObjectClassForName<'Tile'>>;\n  }\n\n  namespace Tile {\n    interface RefreshOptions {\n      /**\n       * Also refresh the perception layer.\n       * @defaultValue `false`\n       */\n      refreshPerception?: boolean | undefined;\n    }\n\n    interface PlayOptions {\n      /** Should the video loop? */\n      loop?: boolean | undefined;\n      /** A specific timestamp between 0 and the video duration to begin playback */\n      offset?: number | undefined;\n      /** Desired volume level of the video's audio channel (if any) */\n      volume?: number | undefined;\n    }\n\n    interface OcclusionOptions {\n      /**\n       * Test corners of the hit-box in addition to the token center?\n       * @defaultValue `true`\n       */\n      corners?: boolean | undefined;\n    }\n\n    interface AlphaMapOptions {\n      /**\n       * Keep the Uint8Array of pixel alphas?\n       * @defaultValue `false`\n       */\n      keepPixels?: boolean | undefined;\n\n      /**\n       * Keep the pure white RenderTexture?\n       * @defaultValue `false`\n       */\n      keepTexture?: boolean | undefined;\n    }\n  }\n}\n"
    ]
  