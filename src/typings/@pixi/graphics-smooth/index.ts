
    export default [
      "@pixi\\graphics-smooth\\index.d.ts",
      "import { BatchTextureArray } from '@pixi/core';\r\nimport { BLEND_MODES } from '@pixi/constants';\r\nimport { Bounds } from '@pixi/display';\r\nimport { Buffer as Buffer_2 } from '@pixi/core';\r\nimport type { Circle } from '@pixi/math';\r\nimport { Container } from '@pixi/display';\r\nimport type { Ellipse } from '@pixi/math';\r\nimport { Geometry } from '@pixi/core';\r\nimport type { IDestroyOptions } from '@pixi/display';\r\nimport type { IPointData } from '@pixi/math';\r\nimport type { IShape as IShape_2 } from '@pixi/math';\r\nimport { LINE_CAP } from '@pixi/graphics';\r\nimport { LINE_JOIN } from '@pixi/graphics';\r\nimport { Matrix } from '@pixi/math';\r\nimport { Point } from '@pixi/math';\r\nimport { Polygon } from '@pixi/math';\r\nimport { Program } from '@pixi/core';\r\nimport type { Rectangle } from '@pixi/math';\r\nimport { Renderer } from '@pixi/core';\r\nimport type { RoundedRectangle } from '@pixi/math';\r\nimport { Shader } from '@pixi/core';\r\nimport { SHAPES } from '@pixi/math';\r\nimport { Texture } from '@pixi/core';\r\n\r\nexport declare const BATCH_POOL: Array<BatchPart>;\r\n\r\nexport declare class BatchDrawCall {\r\n    texArray: BatchTextureArray;\r\n    styleArray: BatchStyleArray;\r\n    blend: BLEND_MODES;\r\n    start: number;\r\n    size: number;\r\n    data: any;\r\n    shader: Shader;\r\n    TICK: number;\r\n    settings: IGraphicsBatchSettings;\r\n    constructor();\r\n    clear(): void;\r\n    begin(settings: IGraphicsBatchSettings, shader: Shader): void;\r\n    check(shader: Shader): boolean;\r\n    add(texture: Texture, matrix: Matrix, lineWidth: number, lineAlignment: number, lineScaleMode: number): number;\r\n}\r\n\r\nexport declare class BatchPart {\r\n    style: LineStyle | FillStyle;\r\n    start: number;\r\n    size: number;\r\n    jointEnd: number;\r\n    attribStart: number;\r\n    attribSize: number;\r\n    styleId: number;\r\n    rgba: number;\r\n    constructor();\r\n    begin(style: LineStyle | FillStyle, startIndex: number, attribStart: number): void;\r\n    end(endIndex: number, endAttrib: number): void;\r\n    reset(): void;\r\n}\r\n\r\nexport declare class BatchStyleArray {\r\n    textureIds: number[];\r\n    matrices: Matrix[];\r\n    lines: number[];\r\n    count: number;\r\n    constructor();\r\n    clear(): void;\r\n    add(textureId: number, matrix: Matrix, lineWidth: number, lineAlignment: number, lineScaleMode: number, settings: IGraphicsBatchSettings): number;\r\n}\r\n\r\nexport declare class BuildData {\r\n    verts: Array<number>;\r\n    joints: Array<number>;\r\n    vertexSize: number;\r\n    indexSize: number;\r\n    closePointEps: number;\r\n    clear(): void;\r\n    destroy(): void;\r\n}\r\n\r\nexport declare class CircleBuilder implements IShapeBuilder {\r\n    path(graphicsData: SmoothGraphicsData, _target: BuildData): void;\r\n    fill(graphicsData: SmoothGraphicsData, target: BuildData): void;\r\n    line(graphicsData: SmoothGraphicsData, target: BuildData): void;\r\n}\r\n\r\nexport declare class DashLineShader extends SmoothGraphicsShader {\r\n    constructor(dashParams?: IDashParams);\r\n}\r\n\r\nexport declare const DRAW_CALL_POOL: Array<BatchDrawCall>;\r\n\r\nexport declare const FILL_COMMANDS: Record<SHAPES, IShapeBuilder>;\r\n\r\nexport declare class FillStyle {\r\n    constructor();\r\n    color: number;\r\n    alpha: number;\r\n    texture: Texture;\r\n    matrix: Matrix;\r\n    matrixTex: Matrix;\r\n    shader: Shader;\r\n    visible: boolean;\r\n    smooth: boolean;\r\n    toJSON(): any;\r\n    clone(): FillStyle;\r\n    copyTo(obj: any): any;\r\n    packLineScale(): number;\r\n    reset(): void;\r\n    destroy(): void;\r\n    getTextureMatrix(): Matrix;\r\n}\r\n\r\nexport declare interface IDashParams {\r\n    dash: number;\r\n    gap: number;\r\n}\r\n\r\nexport declare interface IFillStyleOptions {\r\n    color?: number;\r\n    alpha?: number;\r\n    texture?: Texture;\r\n    matrix?: Matrix;\r\n    smooth?: boolean;\r\n    shader?: Shader;\r\n}\r\n\r\nexport declare interface IGraphicsBatchSettings {\r\n    maxStyles: number;\r\n    maxTextures: number;\r\n    pixelLine: number;\r\n}\r\n\r\nexport declare interface ILineStyleOptions extends IFillStyleOptions {\r\n    width?: number;\r\n    alignment?: number;\r\n    scaleMode?: LINE_SCALE_MODE;\r\n    cap?: LINE_CAP;\r\n    join?: LINE_JOIN;\r\n    miterLimit?: number;\r\n}\r\n\r\nexport declare interface ISettings {\r\n    LINE_SCALE_MODE: string;\r\n    SHADER_MAX_STYLES: number;\r\n    SHADER_MAX_TEXTURES: number;\r\n    PIXEL_LINE: number;\r\n}\r\n\r\nexport declare type IShape = Circle | Ellipse | Polygon | Rectangle | RoundedRectangle;\r\n\r\nexport declare interface IShapeBuilder {\r\n    path(graphicsData: SmoothGraphicsData, target: BuildData): void;\r\n    line(graphicsData: SmoothGraphicsData, target: BuildData): void;\r\n    fill(graphicsData: SmoothGraphicsData, target: BuildData): void;\r\n}\r\n\r\nexport declare enum JOINT_TYPE {\r\n    NONE = 0,\r\n    FILL = 1,\r\n    JOINT_BEVEL = 4,\r\n    JOINT_MITER = 8,\r\n    JOINT_ROUND = 12,\r\n    JOINT_CAP_BUTT = 16,\r\n    JOINT_CAP_SQUARE = 18,\r\n    JOINT_CAP_ROUND = 20,\r\n    FILL_EXPAND = 24,\r\n    CAP_BUTT = 32,\r\n    CAP_SQUARE = 64,\r\n    CAP_ROUND = 96,\r\n    CAP_BUTT2 = 128\r\n}\r\n\r\nexport declare enum LINE_SCALE_MODE {\r\n    NONE = \"none\",\r\n    NORMAL = \"normal\",\r\n    HORIZONTAL = \"horizontal\",\r\n    VERTICAL = \"vertical\"\r\n}\r\n\r\nexport declare class LineStyle extends FillStyle {\r\n    width: number;\r\n    alignment: number;\r\n    cap: LINE_CAP;\r\n    join: LINE_JOIN;\r\n    miterLimit: number;\r\n    scaleMode: LINE_SCALE_MODE;\r\n    clone(): LineStyle;\r\n    copyTo(obj: any): LineStyle;\r\n    packLineScale(): number;\r\n    reset(): void;\r\n}\r\n\r\nexport declare function matrixEquals(th: Matrix, matrix: Matrix, eps?: number): boolean;\r\n\r\nexport declare class PolyBuilder implements IShapeBuilder {\r\n    path(graphicsData: SmoothGraphicsData, buildData: BuildData): void;\r\n    line(graphicsData: SmoothGraphicsData, buildData: BuildData): void;\r\n    fill(graphicsData: SmoothGraphicsData, buildData: BuildData): void;\r\n}\r\n\r\nexport declare class RectangleBuilder implements IShapeBuilder {\r\n    path(graphicsData: SmoothGraphicsData, _target: BuildData): void;\r\n    line(graphicsData: SmoothGraphicsData, target: BuildData): void;\r\n    fill(graphicsData: SmoothGraphicsData, target: BuildData): void;\r\n}\r\n\r\nexport declare class RoundedRectangleBuilder implements IShapeBuilder {\r\n    path(graphicsData: SmoothGraphicsData, _target: BuildData): void;\r\n    line(graphicsData: SmoothGraphicsData, target: BuildData): void;\r\n    fill(graphicsData: SmoothGraphicsData, target: BuildData): void;\r\n}\r\n\r\nexport declare class SegmentPacker {\r\n    static vertsByJoint: Array<number>;\r\n    strideFloats: number;\r\n    updateBufferSize(jointStart: number, jointLen: number, triangles: number, target: BuildData): void;\r\n    bufferPos: number;\r\n    indexPos: number;\r\n    bufFloat: Float32Array;\r\n    bufUint: Uint32Array;\r\n    indices: Uint16Array;\r\n    buildData: BuildData;\r\n    beginPack(buildData: BuildData, bufFloat: Float32Array, bufUint: Uint32Array, indices: Uint16Array, bufferPos?: number, indexPos?: number): void;\r\n    endPack(): void;\r\n    packInterleavedGeometry(jointStart: number, jointLen: number, triangles: number[], lineStyle: number, color: number): void;\r\n}\r\n\r\nexport declare const settings: ISettings;\r\n\r\nexport declare class SmoothGraphics extends Container {\r\n    static _TEMP_POINT: Point;\r\n    shader: Shader;\r\n    shaderSettings: IGraphicsBatchSettings;\r\n    pluginName: string;\r\n    currentPath: Polygon;\r\n    protected batches: Array<any>;\r\n    protected batchTint: number;\r\n    protected batchDirty: number;\r\n    protected vertexData: Float32Array;\r\n    protected _fillStyle: FillStyle;\r\n    protected _lineStyle: LineStyle;\r\n    protected _matrix: Matrix;\r\n    protected _holeMode: boolean;\r\n    protected _transformID: number;\r\n    protected _tint: number;\r\n    private state;\r\n    private _geometry;\r\n    get geometry(): SmoothGraphicsGeometry;\r\n    constructor(geometry?: SmoothGraphicsGeometry);\r\n    clone(): SmoothGraphics;\r\n    set blendMode(value: BLEND_MODES);\r\n    get blendMode(): BLEND_MODES;\r\n    get tint(): number;\r\n    set tint(value: number);\r\n    get fill(): FillStyle;\r\n    get line(): LineStyle;\r\n    lineStyle(width: number, color?: number, alpha?: number, alignment?: number, scaleMode?: LINE_SCALE_MODE): this;\r\n    lineStyle(options?: ILineStyleOptions): this;\r\n    lineTextureStyle(options: ILineStyleOptions): this;\r\n    protected startPoly(): void;\r\n    finishPoly(): void;\r\n    moveTo(x: number, y: number): this;\r\n    lineTo(x: number, y: number): this;\r\n    protected _initCurve(x?: number, y?: number): void;\r\n    quadraticCurveTo(cpX: number, cpY: number, toX: number, toY: number): this;\r\n    bezierCurveTo(cpX: number, cpY: number, cpX2: number, cpY2: number, toX: number, toY: number): this;\r\n    arcTo(x1: number, y1: number, x2: number, y2: number, radius: number): this;\r\n    arc(cx: number, cy: number, radius: number, startAngle: number, endAngle: number, anticlockwise?: boolean): this;\r\n    beginFill(color?: number, alpha?: number, smooth?: boolean): this;\r\n    beginTextureFill(options?: IFillStyleOptions): this;\r\n    endFill(): this;\r\n    drawRect(x: number, y: number, width: number, height: number): this;\r\n    drawRoundedRect(x: number, y: number, width: number, height: number, radius: number): this;\r\n    drawCircle(x: number, y: number, radius: number): this;\r\n    drawEllipse(x: number, y: number, width: number, height: number): this;\r\n    drawPolygon(...path: Array<number> | Array<Point>): this;\r\n    drawPolygon(path: Array<number> | Array<Point> | Polygon): this;\r\n    drawShape(shape: IShape_2): this;\r\n    clear(): this;\r\n    isFastRect(): boolean;\r\n    protected _renderCanvas(renderer: any): void;\r\n    protected _render(renderer: Renderer): void;\r\n    protected _populateBatches(): void;\r\n    protected _renderBatched(renderer: Renderer): void;\r\n    protected _renderDirect(renderer: Renderer): void;\r\n    protected _resolveDirectShader(_renderer: Renderer): Shader;\r\n    protected _calculateBounds(): void;\r\n    containsPoint(point: IPointData): boolean;\r\n    protected calculateTints(): void;\r\n    protected calculateVertices(): void;\r\n    closePath(): this;\r\n    setMatrix(matrix: Matrix): this;\r\n    beginHole(): this;\r\n    endHole(): this;\r\n    destroy(options?: IDestroyOptions | boolean): void;\r\n}\r\n\r\nexport declare class SmoothGraphicsData {\r\n    shape: IShape_2;\r\n    lineStyle: LineStyle;\r\n    fillStyle: FillStyle;\r\n    matrix: Matrix;\r\n    type: SHAPES;\r\n    holes: Array<SmoothGraphicsData>;\r\n    closeStroke: boolean;\r\n    points: number[];\r\n    triangles: number[];\r\n    attribStart: number;\r\n    fillStart: number;\r\n    fillLen: number;\r\n    strokeStart: number;\r\n    strokeLen: number;\r\n    fillAA: boolean;\r\n    constructor(shape: IShape_2, fillStyle?: FillStyle, lineStyle?: LineStyle, matrix?: Matrix);\r\n    clearPath(): void;\r\n    clearBuild(): void;\r\n    clone(): SmoothGraphicsData;\r\n    capType(): number;\r\n    goodJointType(): number;\r\n    jointType(): number;\r\n    destroy(): void;\r\n}\r\n\r\nexport declare class SmoothGraphicsGeometry extends Geometry {\r\n    static BATCHABLE_SIZE: number;\r\n    boundsPadding: number;\r\n    indicesUint16: Uint16Array | Uint32Array;\r\n    batchable: boolean;\r\n    buildData: BuildData;\r\n    get points(): number[];\r\n    get closePointEps(): number;\r\n    graphicsData: Array<SmoothGraphicsData>;\r\n    drawCalls: Array<BatchDrawCall>;\r\n    batchDirty: number;\r\n    batches: Array<BatchPart>;\r\n    packer: SegmentPacker;\r\n    packSize: number;\r\n    pack32index: boolean;\r\n    strideFloats: number;\r\n    protected dirty: number;\r\n    protected cacheDirty: number;\r\n    protected clearDirty: number;\r\n    protected shapeBuildIndex: number;\r\n    protected shapeBatchIndex: number;\r\n    protected _bounds: Bounds;\r\n    protected boundsDirty: number;\r\n    _buffer: Buffer_2;\r\n    _indexBuffer: Buffer_2;\r\n    _bufferFloats: Float32Array;\r\n    _bufferUint: Uint32Array;\r\n    initAttributes(_static: boolean): void;\r\n    constructor();\r\n    checkInstancing(instanced: boolean, allow32Indices: boolean): void;\r\n    get bounds(): Bounds;\r\n    protected invalidate(): void;\r\n    clear(): SmoothGraphicsGeometry;\r\n    drawShape(shape: IShape, fillStyle?: FillStyle, lineStyle?: LineStyle, matrix?: Matrix): SmoothGraphicsGeometry;\r\n    drawHole(shape: IShape, matrix?: Matrix): SmoothGraphicsGeometry;\r\n    destroy(): void;\r\n    containsPoint(point: IPointData): boolean;\r\n    updatePoints(): void;\r\n    updateBufferSize(): void;\r\n    updateBuild(): void;\r\n    updateBatches(shaderSettings?: IGraphicsBatchSettings): void;\r\n    updatePack(): void;\r\n    protected _compareStyles(styleA: FillStyle | LineStyle, styleB: FillStyle | LineStyle): boolean;\r\n    protected validateBatching(): boolean;\r\n    protected packBatches(): void;\r\n    protected isBatchable(): boolean;\r\n    protected buildDrawCalls(shaderSettings?: IGraphicsBatchSettings): void;\r\n    protected processHoles(holes: Array<SmoothGraphicsData>): void;\r\n    protected calculateBounds(): void;\r\n    protected transformPoints(points: Array<number>, matrix: Matrix): void;\r\n}\r\n\r\nexport declare class SmoothGraphicsProgram extends Program {\r\n    settings: IGraphicsBatchSettings;\r\n    constructor(settings: IGraphicsBatchSettings, vert?: string, frag?: string, _uniforms?: {});\r\n}\r\n\r\nexport declare class SmoothGraphicsShader extends Shader {\r\n    settings: IGraphicsBatchSettings;\r\n    constructor(settings: IGraphicsBatchSettings, prog?: SmoothGraphicsProgram, uniforms?: {});\r\n    static generateSampleSrc(maxTextures: number): string;\r\n}\r\n\r\nexport { }\r\n"
    ]
  