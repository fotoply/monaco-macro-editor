
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\client\\pixi\\core\\shapes\\polygon-helpers.d.ts",
      "import type { ConfiguredObjectClassForName } from '../../../../../types/helperTypes';\n\ndeclare global {\n  /**\n   * An internal data structure for polygon vertices\n   * @internal\n   */\n  class PolygonVertex {\n    constructor(x: number, y: number, { distance, index }?: PolygonVertexOptions);\n\n    x: number;\n\n    y: number;\n\n    key: number;\n\n    protected _distance: number | undefined;\n\n    protected _d2: undefined;\n\n    protected _index: number | undefined;\n\n    /** @defaultValue `false` */\n    protected _inLimitedAngle: boolean;\n\n    /**\n     * The set of edges which connect to this vertex.\n     * This set is initially empty and populated later after vertices are de-duplicated.\n     * @defaultValue `new Set()`\n     */\n    edges: EdgeSet;\n\n    /**\n     * The subset of edges which continue clockwise from this vertex.\n     * @defaultValue `new Set()`\n     */\n    cwEdges: EdgeSet;\n\n    /**\n     * The subset of edges which continue counter-clockwise from this vertex.\n     * @defaultValue `new Set()`\n     */\n    ccwEdges: EdgeSet;\n\n    /**\n     * The maximum restriction type of this vertex\n     * @defaultValue `null`\n     */\n    type: number | null;\n\n    /**\n     * Associate an edge with this vertex.\n     * @param edge        - The edge being attached\n     * @param orientation - The orientation of the edge with respect to the origin\n     */\n    attachEdge(edge: PolygonEdge, orientation: number): void;\n\n    /**\n     * Is this vertex limited in type?\n     */\n    get isLimited(): boolean;\n\n    /**\n     * Is this vertex terminal (at the maximum radius)\n     */\n    get isTerminal(): boolean;\n\n    /**\n     * Does this vertex have a limited edge connected to it?\n     */\n    get hasLimitedEdge(): boolean;\n\n    /**declareme point?\n     */\n    equals(other: PolygonVertex): boolean;\n\n    /**\n     * Construct a PolygonVertex instance from some other Point structure.\n     * @param point   - The point\n     * @param options - Additional options that apply to this vertex\n     * @returns The constructed vertex\n     */\n    static fromPoint(point: Point, options?: PolygonVertexOptions): PolygonVertex;\n  }\n\n  interface PolygonVertexOptions {\n    distance: PolygonVertex['_distance'];\n    index: PolygonVertex['_index'];\n  }\n\n  /**\n   * An internal data structure for polygon edges\n   * @internal\n   */\n  class PolygonEdge {\n    constructor(a: Point, b: Point, type: foundry.CONST.WALL_SENSE_TYPES, wall: Wall);\n\n    /**\n     * Is this edge limited in type?\n     */\n    get isLimited(): boolean;\n\n    /**\n     * Construct a PolygonEdge instance from a Wall placeable object.\n     * @param wall - The Wall from which to construct an edge\n     * @param type - The type of polygon being constructed\n     */\n    static fromWall(\n      wall: ConfiguredObjectClassForName<'Wall'> | WallDocument,\n      type: foundry.CONST.WALL_RESTRICTION_TYPES\n    ): PolygonEdge;\n  }\n\n  /**\n   * An object containing the result of a collision test.\n   * @internal\n   */\n  class CollisionResult {\n    constructor(values?: {\n      target?: PolygonVertex | null;\n      collisions?: PolygonVertex[];\n      cwEdges?: EdgeSet;\n      ccwEdges?: EdgeSet;\n      isBehind?: boolean;\n      isLimited?: boolean;\n      isRequired?: boolean;\n      wasLimited?: boolean;\n    });\n\n    /**\n     * The vertex that was the target of this result\n     * @defaultValue `null`\n     */\n    target: PolygonVertex | null;\n\n    /**\n     * The array of collision points which apply to this result\n     * @defaultValue `[]`\n     */\n    collisions: PolygonVertex[];\n\n    /**\n     * The set of edges connected to the target vertex that continue clockwise\n     * @defaultValue `new Set()`\n     */\n    cwEdges: EdgeSet;\n\n    /**\n     * The set of edges connected to the target vertex that continue counter-clockwise\n     * @defaultValue `new Set()`\n     */\n    ccwEdges: EdgeSet;\n\n    /**\n     * Is the target vertex for this result behind some closer active edge?\n     */\n    isBehind: boolean | undefined;\n\n    /**\n     * Does the target vertex for this result impose a limited collision?\n     */\n    isLimited: boolean | undefined;\n\n    /**\n     * Is this result required due to a limited angle?\n     */\n    isRequired: boolean | undefined;\n\n    /**\n     * Has the set of collisions for this result encountered a limited edge?\n     */\n    wasLimited: boolean | undefined;\n  }\n\n  /**\n   * A special subclass of PIXI.Point which is used for modeling Wall endpoints.\n   * A wall endpoint must have integer coordinates.\n   *\n   * This was used for the RadialSweepPolygon but can now be deleted once that is\n   * @deprecated since v9d2\n   */\n  class WallEndpoint extends PIXI.Point {\n    /**\n     * @param x - The integer x-coordinate\n     * @param y - The integer y-coordinate\n     */\n    constructor(x: number, y: number);\n\n    /**\n     * Express the point as a 32-bit integer with 16 bits allocated to x and 16 bits allocated to y\n     */\n    key: number;\n\n    /**\n     * The angle between this point and the polygon origin\n     * @defaultValue `undefined`\n     */\n    angle: number | undefined;\n\n    /**\n     * Record the set of walls which connect to this Endpoint\n     */\n    walls: Set<ConfiguredObjectClassForName<'Wall'>>;\n\n    /**\n     * Record whether this point is the endpoint of any Wall\n     * @defaultValue `false`\n     */\n    isEndpoint: boolean;\n\n    /**\n     * Record whether this point is a midpoint of any wall?\n     * @defaultValue `false`\n     */\n    isMidpoint: boolean;\n\n    /**\n     * Record whether this point is the termination of the Ray\n     * @defaultValue `false`\n     */\n    isTerminal: boolean;\n\n    /**\n     * Aggregate the maximum of each wall restriction type\n     */\n    types: Record<foundry.CONST.WALL_RESTRICTION_TYPES, number>;\n\n    /**\n     * An intermediate variable used to store the proportional distance of this point from a SightRay origin\n     * @defaultValue `undefined`\n     */\n    protected _r: number | undefined;\n\n    /**\n     * An intermediate variable used to cache the continuation attributes for a certain point\n     * @defaultValue `undefined`\n     */\n    protected _c: { left: boolean; right: boolean } | undefined;\n\n    attachWall(wall: ConfiguredObjectClassForName<'Wall'>): this;\n\n    /**\n     * Does this endpoint equal some other endpoint?\n     * @param other - Some other point with x and y coordinates\n     * @returns Are the points equal?\n     */\n    equals(other: Point): boolean;\n\n    /**\n     * Is this point one that provides only limited perspective?\n     * @param type - The perspective type being tested\n     * @returns Is perspective limited?\n     */\n    isLimited(type: foundry.CONST.WALL_RESTRICTION_TYPES): boolean;\n\n    /**\n     * Encode a x/y coordinate as a 32-bit integer\n     * @param x - The x-coordinate\n     * @param y - The y-coordinate\n     */\n    static getKey(x: number, y: number): number;\n  }\n}\n"
    ]
  