
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\client\\pixi\\placeables\\drawing.d.ts",
      "import { ConfiguredDocumentClass, ConfiguredDocumentClassForName } from '../../../../types/helperTypes';\nimport { DocumentModificationOptions } from '../../../common/abstract/document.mjs';\n\ndeclare global {\n  /**\n   * The Drawing object is an implementation of the PlaceableObject container.\n   * Each Drawing is a placeable object in the DrawingsLayer.\n   */\n  class Drawing extends PlaceableObject<InstanceType<ConfiguredDocumentClass<typeof DrawingDocument>>> {\n    constructor(document: InstanceType<ConfiguredDocumentClass<typeof DrawingDocument>>);\n    /**\n     * @remarks Not used for `Drawing`\n     */\n    controlIcon: null;\n\n    /**\n     * The inner drawing container\n     * @defaultValue `null`\n     */\n    drawing: PIXI.Container | null;\n\n    /**\n     * The primary drawing shape\n     * @defaultValue `null`\n     */\n    shape: PIXI.Graphics | null;\n\n    /**\n     * Text content, if included\n     * @defaultValue `null`\n     */\n    text: PIXI.Text | null;\n\n    /**\n     * The Graphics outer frame and handles\n     * @defaultValue `null`\n     */\n    frame: PIXI.Container | null;\n\n    /**\n     * Internal timestamp for the previous freehand draw time, to limit sampling\n     * @defaultValue `0`\n     * @internal\n     */\n    protected _drawTime: number;\n\n    /**\n     * @defaultValue `0`\n     * @internal\n     */\n    protected _sampleTime: number;\n\n    /**\n     * Internal flag for the permanent points of the polygon\n     * @defaultValue `foundry.utils.deepClone(this.data.points || [])`\n     * @internal\n     */\n    protected _fixedPoints: Array<[x: number, y: number]>;\n\n    static override embeddedName: 'Drawing';\n\n    /**\n     * The rate at which points are sampled (in milliseconds) during a freehand drawing workflow\n     * @defaultValue `75`\n     */\n    static FREEHAND_SAMPLE_RATE: number;\n\n    override get bounds(): Rectangle;\n\n    /**\n     * A Boolean flag for whether or not the Drawing utilizes a tiled texture background\n     */\n    get isTiled(): boolean;\n\n    /**\n     * A Boolean flag for whether or not the Drawing is a Polygon type (either linear or freehand)\n     */\n    get isPolygon(): boolean;\n\n    override draw(): Promise<this>;\n\n    /**\n     * Clean the drawing data to constrain its allowed position\n     * @internal\n     */\n    protected _cleanData(): void;\n\n    /**\n     * Create the components of the drawing element, the drawing container, the drawn shape, and the overlay text\n     */\n    protected _createDrawing(): void;\n\n    /**\n     * Create elements for the foreground text\n     * @internal\n     */\n    protected _createText(): PreciseText;\n\n    /**\n     * Create elements for the Drawing border and handles\n     * @internal\n     */\n    protected _createFrame(): void;\n\n    override refresh(): void;\n\n    /**\n     * Draw rectangular shapes\n     * @internal\n     */\n    protected _drawRectangle(): void;\n\n    /**\n     * Draw ellipsoid shapes\n     * @internal\n     */\n    protected _drawEllipse(): void;\n\n    /**\n     * Draw polygonal shapes\n     * @internal\n     */\n    protected _drawPolygon(): void;\n\n    /**\n     * Draw freehand shapes with bezier spline smoothing\n     * @internal\n     */\n    protected _drawFreehand(): void;\n\n    /**\n     * Attribution: The equations for how to calculate the bezier control points are derived from Rob Spencer's article:\n     * http://scaledinnovation.com/analytics/splines/aboutSplines.html\n     * @param factor   - The smoothing factor\n     * @param previous - The prior point\n     * @param point    - The current point\n     * @param next     - The next point\n     * @internal\n     */\n    protected _getBezierControlPoints(\n      factor: number,\n      previous: [number, number],\n      point: [number, number],\n      next: [number, number]\n    ): {\n      cp1: {\n        x: number;\n        y: number;\n      };\n      next_cp0: {\n        x: number;\n        y: number;\n      };\n    };\n\n    /**\n     * Refresh the boundary frame which outlines the Drawing shape\n     * @internal\n     */\n    protected _refreshFrame({ x, y, width, height }: Rectangle): void;\n\n    /**\n     * Add a new polygon point to the drawing, ensuring it differs from the last one\n     * @param temporary - (default: `true`)\n     * @internal\n     */\n    protected _addPoint(position: Point, temporary?: boolean): void;\n\n    /**\n     * Remove the last fixed point from the polygon\n     * @internal\n     */\n    protected _removePoint(): void;\n\n    protected override _onControl(options: PlaceableObject.ControlOptions & { isNew?: boolean }): void;\n\n    protected override _onRelease(options: PlaceableObject.ReleaseOptions): void;\n\n    protected override _onDelete(options: DocumentModificationOptions, userId: string): void;\n\n    /**\n     * Handle text entry in an active text tool\n     * @internal\n     */\n    protected _onDrawingTextKeydown(event: KeyboardEvent): void;\n\n    protected override _onUpdate(data: DeepPartial<foundry.data.DrawingData['_source']>): void;\n\n    /**\n     * @param event - unused\n     */\n    protected override _canControl(user: InstanceType<ConfiguredDocumentClassForName<'User'>>, event?: any): boolean;\n\n    /**\n     * @param user  - unused\n     * @param event - unused\n     */\n    protected override _canConfigure(user: InstanceType<ConfiguredDocumentClassForName<'User'>>, event?: any): boolean;\n\n    override activateListeners(): void;\n\n    /**\n     * Handle mouse movement which modifies the dimensions of the drawn shape\n     * @internal\n     */\n    protected _onMouseDraw(event: PIXI.InteractionEvent): void;\n\n    protected override _onDragLeftStart(event: PIXI.InteractionEvent): void;\n\n    protected override _onDragLeftMove(event: PIXI.InteractionEvent): void;\n\n    protected override _onDragLeftDrop(event: PIXI.InteractionEvent): Promise<unknown>;\n\n    protected override _onDragLeftCancel(event: MouseEvent): void;\n\n    /**\n     * Handle mouse-over event on a control handle\n     * @param event - The mouseover event\n     * @internal\n     */\n    protected _onHandleHoverIn(event: PIXI.InteractionEvent): void;\n\n    /**\n     * Handle mouse-out event on a control handle\n     * @param event - The mouseout event\n     * @internal\n     */\n    protected _onHandleHoverOut(event: PIXI.InteractionEvent): void;\n\n    /**\n     * When we start a drag event - create a preview copy of the Tile for re-positioning\n     * @param event - The mousedown event\n     * @internal\n     */\n    protected _onHandleMouseDown(event: PIXI.InteractionEvent): void;\n\n    /**\n     * Handle the beginning of a drag event on a resize handle\n     * @internal\n     */\n    protected _onHandleDragStart(event: PIXI.InteractionEvent): void;\n\n    /**\n     * Handle mousemove while dragging a tile scale handler\n     * @param event - The mousemove event\n     * @internal\n     */\n    protected _onHandleDragMove(event: PIXI.InteractionEvent): void;\n\n    /**\n     * Handle mouseup after dragging a tile scale handler\n     * @param event - The mouseup event\n     * @internal\n     */\n    protected _onHandleDragDrop(\n      event: PIXI.InteractionEvent\n    ): ReturnType<InstanceType<ConfiguredDocumentClass<typeof DrawingDocument>>['update']>;\n\n    /**\n     * Handle cancellation of a drag event for one of the resizing handles\n     * @internal\n     */\n    protected _onHandleDragCancel(event: PIXI.InteractionEvent): void;\n\n    /**\n     * Apply a vectorized rescaling transformation for the drawing data\n     * @param original - The original drawing data\n     * @param dx       - The pixel distance dragged in the horizontal direction\n     * @param dy       - The pixel distance dragged in the vertical direction\n     * @internal\n     */\n    protected _rescaleDimensions(\n      original: Pick<foundry.data.DrawingData['_source'], 'x' | 'y' | 'points' | 'width' | 'height'>,\n      dx: number,\n      dy: number\n    ): Pick<foundry.data.DrawingData['_source'], 'x' | 'y' | 'width' | 'height' | 'points'>;\n\n    /**\n     * Adjust the location, dimensions, and points of the Drawing before committing the change\n     * @param data - The Drawing data pending update\n     * @returns The adjusted data\n     * @remarks This is intentionally public because it is called by the DrawingsLayer\n     * @internal\n     */\n    static normalizeShape(\n      data: Pick<foundry.data.DrawingData['_source'], 'x' | 'y' | 'width' | 'height' | 'points'>\n    ): Pick<foundry.data.DrawingData['_source'], 'x' | 'y' | 'width' | 'height' | 'points'>;\n  }\n}\n"
    ]
  