
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\common\\documents.mjs\\baseDrawing.d.ts",
      "import { ConfiguredDocumentClass } from '../../../types/helperTypes';\nimport { DocumentMetadata } from '../abstract/document.mjs';\nimport { Document } from '../abstract/module.mjs';\nimport * as data from '../data/data.mjs';\nimport type { CONST } from '../module.mjs';\nimport { BaseScene } from './baseScene';\nimport { BaseUser } from './baseUser';\n\ntype DrawingMetadata = Merge<\n  DocumentMetadata,\n  {\n    name: 'Drawing';\n    collection: 'drawings';\n    label: 'DOCUMENT.Drawing';\n    labelPlural: 'DOCUMENT.Drawings';\n    isEmbedded: true;\n    types: [\n      typeof CONST.DRAWING_TYPES.RECTANGLE,\n      typeof CONST.DRAWING_TYPES.ELLIPSE,\n      typeof CONST.DRAWING_TYPES.TEXT,\n      typeof CONST.DRAWING_TYPES.POLYGON,\n      typeof CONST.DRAWING_TYPES.FREEHAND\n    ];\n    permissions: {\n      create: 'DRAWING_CREATE';\n      update: (user: BaseUser, doc: BaseDrawing, data?: object) => boolean;\n      delete: (user: BaseUser, doc: BaseDrawing, data?: object) => boolean;\n    };\n  }\n>;\n\n/**\n * The base Drawing model definition which defines common behavior of an Drawing document between both client and server.\n */\nexport declare class BaseDrawing extends Document<\n  data.DrawingData,\n  InstanceType<ConfiguredDocumentClass<typeof BaseScene>>,\n  DrawingMetadata\n> {\n  static override get schema(): typeof data.DrawingData;\n\n  static override get metadata(): DrawingMetadata;\n\n  override testUserPermission(\n    user: BaseUser,\n    permission: keyof typeof foundry.CONST.ENTITY_PERMISSIONS | foundry.CONST.DOCUMENT_PERMISSION_LEVELS,\n    { exact }?: { exact?: boolean }\n  ): boolean;\n\n  /**\n   * Is a user able to update or delete an existing Drawing document??\n   */\n  protected static _canModify(user: BaseUser, doc: BaseDrawing, data?: object): boolean;\n}\n"
    ]
  