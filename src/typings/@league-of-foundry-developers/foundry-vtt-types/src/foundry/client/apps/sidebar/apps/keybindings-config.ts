
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\client\\apps\\sidebar\\apps\\keybindings-config.d.ts",
      "/**\n * Allows for viewing and editing of Keybinding Actions\n */\ndeclare class KeybindingsConfig<\n  Options extends FormApplicationOptions = FormApplicationOptions,\n  Data extends KeybindingsConfig.Data = KeybindingsConfig.Data\n> extends FormApplication<Options, Data> {\n  /**\n   * A cached copy of the Categories\n   */\n  protected _cachedData: KeybindingsConfig.CategoryData | null;\n\n  /**\n   * The category being filtered for\n   */\n  protected _category: string;\n\n  /**\n   * A Map of pending Edits. The Keys are bindingIds\n   * @internal\n   */\n  protected _pendingEdits: Map<string, KeybindingsConfig.PendingBinding[]>;\n\n  /**\n   * @defaultValue\n   * ```typescript\n   * foundry.utils.mergeObject(super.defaultOptions, {\n   *   title: game.i18n.localize(\"SETTINGS.Keybindings\"),\n   *   id: \"keybindings\",\n   *   template: \"templates/sidebar/apps/keybindings-config.html\",\n   *   width: 750,\n   *   height: 600,\n   *   resizable: true,\n   *   scrollY: [\".filters\", \".category-list\"],\n   *   filters: [{inputSelector: 'input[name=\"filter\"]', contentSelector: \".category-list\"}]\n   * })\n   * ```\n   */\n  static override get defaultOptions(): FormApplicationOptions;\n\n  override getData(options?: Partial<Options>): Data;\n\n  /**\n   * Builds the set of Bindings into a form usable for display and configuration\n   * @internal\n   */\n  protected _getCategoryData(): KeybindingsConfig.CategoryData;\n\n  /**\n   * Add faux-keybind actions that represent the possible Mouse Controls\n   * @param categories - The current Map of Categories to add to\n   * @returns The number of Actions added\n   * @internal\n   */\n  protected _addMouseControlsReference(categories: Map<string, KeybindingsConfig.Category>): number;\n\n  /**\n   * Given an Binding and its parent Action, detects other Actions that might conflict with that binding\n   * @param actionId - The namespaced Action ID the Binding belongs to\n   * @param action   - The Action config\n   * @param binding  - The Binding\n   * @internal\n   */\n  protected _detectConflictingActions(\n    actionId: string,\n    action: KeybindingActionConfig,\n    binding: KeybindingActionBinding\n  ): KeybindingAction[];\n\n  /**\n   * Transforms a Binding into a human readable string representation\n   * @param binding - The Binding\n   * @returns A human readable string\n   * @internal\n   */\n  protected static _humanizeBinding(binding: KeybindingActionBinding): string;\n\n  /**\n   * Compares two Category Filters for rendering\n   * This method ignores cases of equality because we know our categories are unique\n   * @param a - The first Category\n   * @param b - The second Category\n   * @returns A number for usage in the Sort method\n   * @internal\n   */\n  protected static _sortCategories(a: KeybindingsConfig.Category, b: KeybindingsConfig.Category): number;\n\n  /**\n   * Classify what Category an Action belongs to\n   * @param action - The Action to classify\n   * @returns The category the Action belongs to\n   * @internal\n   */\n  protected _categorizeAction(action: KeybindingsConfig): KeybindingsConfig.BaseCategory;\n\n  override activateListeners(html: JQuery): void;\n\n  /**\n   * Handle left-click events to filter to a certain category\n   * @internal\n   */\n  protected _onClickCategoryFilter(event: MouseEvent): void;\n\n  /**\n   * Handle left-click events to show / hide a certain category\n   * @internal\n   */\n  protected _onClickCategoryCollapse(event: MouseEvent): void;\n\n  /**\n   * Handle left-click events to reset all Actions to Default\n   * @internal\n   */\n  protected _onClickResetActions(event: MouseEvent): Promise<void>;\n\n  /**\n   * Handle Control clicks\n   * @internal\n   */\n  protected _onClickBindingControl(event: MouseEvent): void;\n\n  /**\n   * Handle left-click events to show / hide a certain category\n   * @internal\n   */\n  protected _onClickAdd(event: MouseEvent): Promise<void>;\n\n  /**\n   * Handle left-click events to show / hide a certain category\n   * @internal\n   */\n  protected _onClickDelete(event: MouseEvent): Promise<void>;\n\n  /**\n   * Inserts a Binding into the Pending Edits object, creating a new Map entry as needed\n   * @internal\n   */\n  protected _addPendingEdit(\n    namespace: string,\n    action: string,\n    bindingIndex: number,\n    binding: KeybindingsConfig.PendingBinding\n  ): void;\n\n  /**\n   * Toggle visibility of the Edit / Save UI\n   * @internal\n   */\n  protected _onClickEditableBinding(event: MouseEvent): void;\n\n  /**\n   * Toggle visibility of the Edit UI\n   * @internal\n   */\n  protected _onDoubleClickKey(event: MouseEvent): void;\n\n  /**\n   * Save the new Binding value and update the display of the UI\n   * @internal\n   */\n  protected _onClickSaveBinding(event: MouseEvent): Promise<void>;\n\n  /**\n   * Given a clicked Action element, finds the parent Action\n   * @internal\n   */\n  protected _getParentAction(event: KeyboardEvent | MouseEvent): {\n    namespace: string;\n    action: string;\n    actionHtml: HTMLElement;\n  };\n\n  /**\n   * Given a Clicked binding control element, finds the parent Binding\n   * @internal\n   */\n  protected _getParentBinding(event: KeyboardEvent | MouseEvent): { bindingHtml: HTMLElement; bindingId: string };\n\n  /**\n   * Iterates over all Pending edits, merging them in with unedited Bindings and then saving and resetting the UI\n   * @internal\n   */\n  protected _savePendingEdits(): Promise<void>;\n\n  /**\n   * Processes input from the keyboard to form a list of pending Binding edits\n   * @param event - The keyboard event\n   * @internal\n   */\n  protected _onKeydownBindingInput(event: KeyboardEvent): void;\n\n  protected override _onSearchFilter(event: KeyboardEvent, query: string, rgx: RegExp, html: HTMLElement): void;\n\n  /** @remarks KeybindingsConfig does not implement this method. */\n  protected _updateObject(event?: unknown, formData?: unknown): Promise<never>;\n}\n\ndeclare namespace KeybindingsConfig {\n  interface Data extends CategoryData {\n    categories: DataCategory[];\n    allActive: boolean;\n  }\n\n  interface DataCategory extends Category {\n    active: boolean;\n    hidden: boolean;\n  }\n\n  interface CategoryData {\n    categories: Category[];\n    totalActions: number;\n  }\n\n  interface BaseCategory {\n    id: string;\n    title: string;\n  }\n\n  interface Category extends BaseCategory {\n    actions: ActionData[];\n    count: number;\n  }\n\n  interface ActionData extends KeybindingActionConfig {\n    category: string;\n    bindings: DisplayBinding[];\n    id: string;\n    name: string;\n    hint?: string;\n    cssClass?: string;\n    notes: string;\n  }\n\n  interface DisplayBinding extends Partial<KeybindingActionBinding> {\n    id: string;\n    display: string;\n    cssClasses: string;\n    isEditable: boolean;\n    isFirst: boolean;\n    conflicts: string;\n    hasConflicts: boolean;\n  }\n\n  interface PendingBinding extends KeybindingActionBinding {\n    index: number;\n  }\n}\n"
    ]
  