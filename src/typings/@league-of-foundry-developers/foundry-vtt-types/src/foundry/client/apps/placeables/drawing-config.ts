
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\client\\apps\\placeables\\drawing-config.d.ts",
      "import type { ConfiguredDocumentClassForName } from '../../../../types/helperTypes';\n\ndeclare global {\n  interface DrawingConfigOptions extends FormApplicationOptions {\n    /**\n     * Configure the default drawing settings, instead of a specific Drawing\n     * @defaultValue `false`\n     */\n    configureDefault: boolean;\n  }\n\n  /**\n   * The Application responsible for configuring a single Drawing document within a parent Scene.\n   * @typeParam Options - the type of the options object\n   * @typeParam Data    - The data structure used to render the handlebars template.\n   */\n  class DrawingConfig<\n    Options extends DrawingConfigOptions = DrawingConfigOptions,\n    Data extends object = DrawingConfig.Data<Options>\n  > extends FormApplication<Options, Data, InstanceType<ConfiguredDocumentClassForName<'Drawing'>>> {\n    /**\n     * @defaultValue\n     * ```typescript\n     * foundry.utils.mergeObject(super.defaultOptions, {\n     *   id: \"drawing-config\",\n     *   classes: [\"sheet\"],\n     *   template: \"templates/scene/drawing-config.html\",\n     *   width: 480,\n     *   height: \"auto\",\n     *   configureDefault: false,\n     *   tabs: [{ navSelector: \".tabs\", contentSelector: \"form\", initial: \"position\" }],\n     * });\n     * ```\n     */\n    static override get defaultOptions(): DrawingConfigOptions;\n\n    override get title(): string;\n\n    override get id(): string;\n\n    override getData(options?: Partial<Options>): Data | Promise<Data>;\n\n    /**\n     * Get the names and labels of fill type choices which can be applied\n     * @internal\n     */\n    protected static _getFillTypes(): DrawingConfig.FillTypes;\n\n    protected override _updateObject(event: Event, formData: DrawingConfig.FormData): Promise<unknown>;\n\n    override close(options?: FormApplication.CloseOptions): Promise<void>;\n\n    override activateListeners(html: JQuery): void;\n\n    /**\n     * Reset the user Drawing configuration settings to their default values\n     * @param event - The originating mouse-click event\n     */\n    protected _onResetDefaults(event: JQuery.ClickEvent): void;\n  }\n\n  namespace DrawingConfig {\n    interface Data<Options extends DrawingConfigOptions = DrawingConfigOptions> {\n      author: string;\n      isDefault: boolean;\n      fillTypes: DrawingConfig.FillTypes;\n      fontFamilies: Record<string, string>;\n      object: foundry.data.DrawingData['_source'];\n      options: Options;\n      submitText: string;\n    }\n\n    type FillTypes = {\n      [Key in keyof typeof foundry.CONST['DRAWING_FILL_TYPES'] as typeof foundry.CONST['DRAWING_FILL_TYPES'][Key]]: `DRAWING.FillType${Titlecase<Key>}`;\n    };\n\n    interface FormData {\n      bezierFactor: number;\n      fillAlpha: number;\n      fillColor: string;\n      fillType: foundry.CONST.DRAWING_FILL_TYPES;\n      fontFamily: string;\n      fontSize: number | null;\n      height: number | null;\n      rotation: number | null;\n      strokeAlpha: number;\n      strokeColor: string;\n      strokeWidth: number | null;\n      text: string;\n      textAlpha: number;\n      textColor: string;\n      texture: string;\n      width: number | null;\n      x: number | null;\n      y: number | null;\n      z: number | null;\n    }\n  }\n}\n"
    ]
  