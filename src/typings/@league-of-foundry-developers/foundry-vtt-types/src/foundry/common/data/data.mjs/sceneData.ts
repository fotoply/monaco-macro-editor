
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\common\\data\\data.mjs\\sceneData.d.ts",
      "import {\n  ConfiguredDocumentClass,\n  ConfiguredFlags,\n  FieldReturnType,\n  PropertiesToSource\n} from '../../../../types/helperTypes';\nimport EmbeddedCollection from '../../abstract/embedded-collection.mjs';\nimport { DocumentData } from '../../abstract/module.mjs';\nimport * as documents from '../../documents.mjs';\nimport * as fields from '../fields.mjs';\nimport { AmbientLightDataConstructorData } from './ambientLightData';\nimport { AmbientSoundDataConstructorData } from './ambientSoundData';\nimport { DrawingDataConstructorData } from './drawingData';\nimport { MeasuredTemplateDataConstructorData } from './measuredTemplateData';\nimport { NoteDataConstructorData } from './noteData';\nimport { TileDataConstructorData } from './tileData';\nimport { TokenDataConstructorData } from './tokenData';\nimport { WallDataConstructorData } from './wallData';\n\ninterface SceneDataSchema extends DocumentSchema {\n  _id: fields.DocumentId;\n  name: fields.RequiredString;\n  active: fields.BooleanField;\n  navigation: FieldReturnType<fields.BooleanField, { default: true }>;\n  navOrder: fields.IntegerSortField;\n  navName: fields.BlankString;\n  img: fields.VideoField;\n  foreground: fields.VideoField;\n  thumb: fields.ImageField;\n  width: FieldReturnType<fields.PositiveIntegerField, { required: true; default: 4000 }>;\n  height: FieldReturnType<fields.PositiveIntegerField, { required: true; default: 3000 }>;\n  padding: DocumentField<Number> & {\n    type: typeof Number;\n    required: true;\n    default: 0.25;\n    validate: (p: unknown) => boolean;\n    validation: 'Invalid {name} {field} which must be a number between 0 and 0.5';\n  };\n  initial: DocumentField<Object> & {\n    type: typeof Object;\n    required: false;\n    nullable: true;\n    default: null;\n    validate: typeof _validateInitialViewPosition;\n    validationError: 'Invalid initial view position object provided for Scene';\n  };\n  backgroundColor: FieldReturnType<fields.ColorField, { required: true; default: '#999999' }>;\n  gridType: FieldReturnType<\n    fields.RequiredNumber,\n    {\n      default: typeof foundry.CONST.GRID_TYPES.SQUARE;\n      validate: (t: unknown) => t is foundry.CONST.GRID_TYPES;\n      validationError: 'Invalid {name } {field} which must be a value in CONST.GRID_TYPES';\n    }\n  >;\n  grid: DocumentField<Number> & {\n    type: typeof Number;\n    required: true;\n    default: 100;\n    validate: (n: unknown) => boolean;\n    validationError: `Invalid {name} {field} which must be an integer number of pixels, ${typeof foundry.CONST.GRID_MIN_SIZE} or greater`;\n  };\n  shiftX: FieldReturnType<fields.IntegerField, { required: true; default: 0 }>;\n  shiftY: FieldReturnType<fields.IntegerField, { required: true; default: 0 }>;\n  gridColor: FieldReturnType<fields.ColorField, { required: true; default: '#000000' }>;\n  gridAlpha: FieldReturnType<fields.AlphaField, { required: true; default: 0.2 }>;\n  gridDistance: FieldReturnType<fields.RequiredPositiveNumber, { default: () => number }>;\n  gridUnits: FieldReturnType<fields.BlankString, { default: () => string }>;\n  tokenVision: FieldReturnType<fields.BooleanField, { default: true }>;\n  fogExploration: FieldReturnType<fields.BooleanField, { default: true }>;\n  fogReset: fields.TimestampField;\n  globalLight: fields.BooleanField;\n  globalLightThreshold: DocumentField<Number> & {\n    type: typeof Number;\n    required: true;\n    nullable: true;\n    default: null;\n    validate: (n: unknown) => boolean;\n    validationError: 'Invalid {name} {field} which must be null, or a number between 0 and 1';\n  };\n  darkness: FieldReturnType<fields.AlphaField, { default: 0 }>;\n  drawings: fields.EmbeddedCollectionField<typeof documents.BaseDrawing>;\n  tokens: fields.EmbeddedCollectionField<typeof documents.BaseToken>;\n  lights: fields.EmbeddedCollectionField<typeof documents.BaseAmbientLight>;\n  notes: fields.EmbeddedCollectionField<typeof documents.BaseNote>;\n  sounds: fields.EmbeddedCollectionField<typeof documents.BaseAmbientSound>;\n  templates: fields.EmbeddedCollectionField<typeof documents.BaseMeasuredTemplate>;\n  tiles: fields.EmbeddedCollectionField<typeof documents.BaseTile>;\n  walls: fields.EmbeddedCollectionField<typeof documents.BaseWall>;\n  playlist: fields.ForeignDocumentField<{ type: typeof documents.BasePlaylist; required: false }>;\n  playlistSound: fields.ForeignDocumentField<{ type: typeof documents.BasePlaylistSound; required: false }>;\n  journal: fields.ForeignDocumentField<{ type: typeof documents.BaseJournalEntry; required: false }>;\n  weather: fields.BlankString;\n  folder: fields.ForeignDocumentField<{ type: typeof documents.BaseFolder }>;\n  sort: fields.IntegerSortField;\n  permission: fields.DocumentPermissions;\n  flags: fields.ObjectField;\n}\n\ninterface SceneDataProperties {\n  /**\n   * The _id which uniquely identifies this Scene document\n   * @defaultValue `null`\n   */\n  _id: string | null;\n\n  /**\n   * The name of this scene\n   */\n  name: string;\n\n  /**\n   * Is this scene currently active? Only one scene may be active at a given time.\n   * @defaultValue `false`\n   */\n  active: boolean;\n\n  /**\n   * Is this scene displayed in the top navigation bar?\n   * @defaultValue `true`\n   */\n  navigation: boolean;\n\n  /**\n   * The integer sorting order of this Scene in the navigation bar relative to others\n   * @defaultValue `0`\n   */\n  navOrder: number;\n\n  /**\n   * A string which overrides the canonical Scene name which is displayed in the navigation bar\n   * @defaultValue `\"\"`\n   */\n  navName: string;\n\n  /**\n   * An image or video file path which provides the background media for the scene\n   */\n  img: string | null | undefined;\n\n  /**\n   * An image or video file path which is drawn on top of all other elements in the scene\n   */\n  foreground: string | null | undefined;\n\n  /**\n   * A thumbnail image (base64) or file path which visually summarizes the scene\n   */\n  thumb: string | null | undefined;\n\n  /**\n   * The width of the scene canvas, this should normally be the width of the background media\n   * @defaultValue `4000`\n   */\n  width: number;\n\n  /**\n   * The height of the scene canvas, this should normally be the height of the background media\n   * @defaultValue `3000`\n   */\n  height: number;\n\n  /**\n   * The proportion of canvas padding applied around the outside of the scene\n   * dimensions to provide additional buffer space\n   * @defaultValue `0.25`\n   */\n  padding: number;\n\n  /**\n   * The initial view coordinates for the scene, or null\n   * @defaultValue `null`\n   */\n  initial: { x: number; y: number; scale: number } | null;\n\n  /**\n   * The color of the canvas which is displayed behind the scene background\n   * @defaultValue `'#999999'`\n   */\n  backgroundColor: string | null;\n\n  /**\n   * The type of grid used in this scene, a number from CONST.GRID_TYPES\n   * @defaultValue `CONST.GRID_TYPES.SQUARE`\n   */\n  gridType: foundry.CONST.GRID_TYPES;\n\n  /**\n   * The grid size which represents the width (or height) of a single grid space\n   * @defaultValue `100`\n   */\n  grid: number;\n\n  /**\n   * A number of offset pixels that the background image is shifted horizontally relative to the grid\n   * @defaultValue `0`\n   */\n  shiftX: number;\n\n  /**\n   * A number of offset pixels that the background image is shifted vertically relative to the grid\n   * @defaultValue `0`\n   */\n  shiftY: number;\n\n  /**\n   * A string representing the color used to render the grid lines\n   * @defaultValue `'#000000'`\n   */\n  gridColor: string | null;\n\n  /**\n   * A number between 0 and 1 for the opacity of the grid lines\n   * @defaultValue `0.2`\n   */\n  gridAlpha: number;\n\n  /**\n   * The number of distance units which are represented by a single grid space.\n   * @defaultValue `game.system.data.gridDistance || 1`\n   */\n  gridDistance: number;\n\n  /**\n   * A label for the units of measure which are used for grid distance.\n   * @defaultValue `game.system.data.gridUnits ?? \"\"`\n   */\n  gridUnits: string;\n\n  /**\n   * Do Tokens require vision in order to see the Scene environment?\n   * @defaultValue `true`\n   */\n  tokenVision: boolean;\n\n  /**\n   * Should fog exploration progress be tracked for this Scene?\n   * @defaultValue `true`\n   */\n  fogExploration: boolean;\n\n  /**\n   * The timestamp at which fog of war was last reset for this Scene.\n   * @defaultValue `Date.now()`\n   */\n  fogReset: number;\n\n  /**\n   * Does this Scene benefit from global illumination which provides bright light everywhere?\n   * @defaultValue `false`\n   */\n  globalLight: boolean;\n\n  /**\n   * A darkness level between 0 and 1, beyond which point global illumination is\n   * temporarily disabled if globalLight is true.\n   * @defaultValue `null`\n   */\n  globalLightThreshold: number | null;\n\n  /**\n   * The ambient darkness level in this Scene, where 0 represents mid-day\n   * (maximum illumination) and 1 represents mid-night (maximum darkness)\n   * @defaultValue `0`\n   */\n  darkness: number;\n\n  /**\n   * A collection of embedded Drawing objects.\n   * @defaultValue `new EmbeddedCollection(DrawingData, [], BaseDrawing.implementation)`\n   */\n  drawings: EmbeddedCollection<ConfiguredDocumentClass<typeof documents.BaseDrawing>, SceneData>;\n\n  /**\n   * A collection of embedded Token objects.\n   * @defaultValue `new EmbeddedCollection(TokenData, [], BaseToken.implementation)`\n   */\n  tokens: EmbeddedCollection<ConfiguredDocumentClass<typeof documents.BaseToken>, SceneData>;\n\n  /**\n   * A collection of embedded AmbientLight objects.\n   * @defaultValue `new EmbeddedCollection(AmbientLightData, [], BaseAmbientLight.implementation)`\n   */\n  lights: EmbeddedCollection<ConfiguredDocumentClass<typeof documents.BaseAmbientLight>, SceneData>;\n\n  /**\n   * A collection of embedded Note objects.\n   * @defaultValue `new EmbeddedCollection(NoteData, [], BaseNote.implementation)`\n   */\n  notes: EmbeddedCollection<ConfiguredDocumentClass<typeof documents.BaseNote>, SceneData>;\n\n  /**\n   * A collection of embedded AmbientSound objects.\n   * @defaultValue `new EmbeddedCollection(AmbientSoundData, [], BaseAmbientSound.implementation)`\n   */\n  sounds: EmbeddedCollection<ConfiguredDocumentClass<typeof documents.BaseAmbientSound>, SceneData>;\n\n  /**\n   * A collection of embedded MeasuredTemplate objects.\n   * @defaultValue `new EmbeddedCollection(MeasuredTemplateData, [], BaseMeasuredTemplate.implementation)`\n   */\n  templates: EmbeddedCollection<ConfiguredDocumentClass<typeof documents.BaseMeasuredTemplate>, SceneData>;\n\n  /**\n   * A collection of embedded Tile objects.\n   * @defaultValue `new EmbeddedCollection(TileData, [], BaseTile.implementation)`\n   */\n  tiles: EmbeddedCollection<ConfiguredDocumentClass<typeof documents.BaseTile>, SceneData>;\n\n  /**\n   * A collection of embedded Wall objects\n   * @defaultValue `new EmbeddedCollection(WallData, [], BaseWall.implementation)`\n   */\n  walls: EmbeddedCollection<ConfiguredDocumentClass<typeof documents.BaseWall>, SceneData>;\n\n  /**\n   * A linked Playlist document which should begin automatically playing when this\n   * Scene becomes active.\n   * @defaultValue `null`\n   */\n  playlist: string | null;\n\n  /**\n   * A linked PlaylistSound document from the selected playlist that will\n   * begin automatically playing when this Scene becomes active.\n   * @defaultValue `null`\n   */\n  playlistSound: string | null;\n\n  /**\n   * A linked JournalEntry document which provides narrative details about this Scene.\n   * @defaultValue `null`\n   */\n  journal: string | null;\n\n  /**\n   * A named weather effect which should be rendered in this Scene.\n   * @defaultValue `\"\"`\n   */\n  weather: string;\n\n  /**\n   * The _id of a Folder which contains this Actor\n   * @defaultValue `null`\n   */\n  folder: string | null;\n\n  /**\n   * The numeric sort value which orders this Actor relative to its siblings\n   * @defaultValue `0`\n   */\n  sort: number;\n\n  /**\n   * An object which configures user permissions to this Scene\n   * @defaultValue `{ default: CONST.ENTITY_PERMISSIONS.NONE }`\n   */\n  permission: Partial<Record<string, foundry.CONST.DOCUMENT_PERMISSION_LEVELS>>;\n\n  /**\n   * An object of optional key/value flags\n   */\n  flags: ConfiguredFlags<'Scene'>;\n}\n\ninterface SceneDataConstructorData {\n  /**\n   * The _id which uniquely identifies this Scene document\n   * @defaultValue `null`\n   */\n  _id?: string | null | undefined;\n\n  /**\n   * The name of this scene\n   */\n  name: string;\n\n  /**\n   * Is this scene currently active? Only one scene may be active at a given time.\n   * @defaultValue `false`\n   */\n  active?: boolean | null | undefined;\n\n  /**\n   * Is this scene displayed in the top navigation bar?\n   * @defaultValue `true`\n   */\n  navigation?: boolean | null | undefined;\n\n  /**\n   * The integer sorting order of this Scene in the navigation bar relative to others\n   * @defaultValue `0`\n   */\n  navOrder?: number | null | undefined;\n\n  /**\n   * A string which overrides the canonical Scene name which is displayed in the navigation bar\n   * @defaultValue `\"\"`\n   */\n  navName?: string | null | undefined;\n\n  /**\n   * An image or video file path which provides the background media for the scene\n   */\n  img?: string | null | undefined;\n\n  /**\n   * An image or video file path which is drawn on top of all other elements in the scene\n   */\n  foreground?: string | null | undefined;\n\n  /**\n   * A thumbnail image (base64) or file path which visually summarizes the scene\n   */\n  thumb?: string | null | undefined;\n\n  /**\n   * The width of the scene canvas, this should normally be the width of the background media\n   * @defaultValue `4000`\n   */\n  width?: number | null | undefined;\n\n  /**\n   * The height of the scene canvas, this should normally be the height of the background media\n   * @defaultValue `3000`\n   */\n  height?: number | null | undefined;\n\n  /**\n   * The proportion of canvas padding applied around the outside of the scene\n   * dimensions to provide additional buffer space\n   * @defaultValue `0.25`\n   */\n  padding?: number | null | undefined;\n\n  /**\n   * The initial view coordinates for the scene, or null\n   * @defaultValue `null`\n   */\n  initial?: { x: number; y: number; scale: number } | null | undefined;\n\n  /**\n   * The color of the canvas which is displayed behind the scene background\n   * @defaultValue `#999999`\n   */\n  backgroundColor?: string | null | undefined;\n\n  /**\n   * The type of grid used in this scene, a number from CONST.GRID_TYPES\n   * @defaultValue `CONST.GRID_TYPES.SQUARE`\n   */\n  gridType?: foundry.CONST.GRID_TYPES | null | undefined;\n\n  /**\n   * The grid size which represents the width (or height) of a single grid space\n   * @defaultValue `100`\n   */\n  grid?: number | null | undefined;\n\n  /**\n   * A number of offset pixels that the background image is shifted horizontally relative to the grid\n   * @defaultValue `0`\n   */\n  shiftX?: number | null | undefined;\n\n  /**\n   * A number of offset pixels that the background image is shifted vertically relative to the grid\n   * @defaultValue `0`\n   */\n  shiftY?: number | null | undefined;\n\n  /**\n   * A string representing the color used to render the grid lines\n   * @defaultValue `#000000`\n   */\n  gridColor?: string | null | undefined;\n\n  /**\n   * A number between 0 and 1 for the opacity of the grid lines\n   * @defaultValue `0.2`\n   */\n  gridAlpha?: number | null | undefined;\n\n  /**\n   * The number of distance units which are represented by a single grid space.\n   * @defaultValue `game.system.data.gridDistance || 1`\n   */\n  gridDistance?: number | null | undefined;\n\n  /**\n   * A label for the units of measure which are used for grid distance.\n   * @defaultValue `game.system.data.gridUnits ?? \"\"`\n   */\n  gridUnits?: string | null | undefined;\n\n  /**\n   * Do Tokens require vision in order to see the Scene environment?\n   * @defaultValue `true`\n   */\n  tokenVision?: boolean | null | undefined;\n\n  /**\n   * Should fog exploration progress be tracked for this Scene?\n   * @defaultValue `true`\n   */\n  fogExploration?: boolean | null | undefined;\n\n  /**\n   * The timestamp at which fog of war was last reset for this Scene.\n   * @defaultValue `Date.now()`\n   */\n  fogReset?: number | null | undefined;\n\n  /**\n   * Does this Scene benefit from global illumination which provides bright light everywhere?\n   * @defaultValue `false`\n   */\n  globalLight?: boolean | null | undefined;\n\n  /**\n   * A darkness level between 0 and 1, beyond which point global illumination is\n   * temporarily disabled if globalLight is true.\n   * @defaultValue `null`\n   */\n  globalLightThreshold?: number | null | undefined;\n\n  /**\n   * The ambient darkness level in this Scene, where 0 represents mid-day\n   * (maximum illumination) and 1 represents mid-night (maximum darkness)\n   * @defaultValue `0`\n   */\n  darkness?: number | null | undefined;\n\n  /**\n   * A collection of embedded Drawing objects.\n   * @defaultValue `new EmbeddedCollection(DrawingData, [], BaseDrawing.implementation)`\n   */\n  drawings?: DrawingDataConstructorData[] | null | undefined;\n\n  /**\n   * A collection of embedded Token objects.\n   * @defaultValue `new EmbeddedCollection(TokenData, [], BaseToken.implementation)`\n   */\n  tokens?: TokenDataConstructorData[] | null | undefined;\n\n  /**\n   * A collection of embedded AmbientLight objects.\n   * @defaultValue `new EmbeddedCollection(AmbientLightData, [], BaseAmbientLight.implementation)`\n   */\n  lights?: AmbientLightDataConstructorData[] | null | undefined;\n\n  /**\n   * A collection of embedded Note objects.\n   * @defaultValue `new EmbeddedCollection(NoteData, [], BaseNote.implementation)`\n   */\n  notes?: NoteDataConstructorData[] | null | undefined;\n\n  /**\n   * A collection of embedded AmbientSound objects.\n   * @defaultValue `new EmbeddedCollection(AmbientSoundData, [], BaseAmbientSound.implementation)`\n   */\n  sounds?: AmbientSoundDataConstructorData[] | null | undefined;\n\n  /**\n   * A collection of embedded MeasuredTemplate objects.\n   * @defaultValue `new EmbeddedCollection(MeasuredTemplateData, [], BaseMeasuredTemplate.implementation)`\n   */\n  templates?: MeasuredTemplateDataConstructorData[] | null | undefined;\n\n  /**\n   * A collection of embedded Tile objects.\n   * @defaultValue `new EmbeddedCollection(TileData, [], BaseTile.implementation)`\n   */\n  tiles?: TileDataConstructorData[] | null | undefined;\n\n  /**\n   * A collection of embedded Wall objects\n   * @defaultValue `new EmbeddedCollection(WallData, [], BaseWall.implementation)`\n   */\n  walls?: WallDataConstructorData[] | null | undefined;\n\n  /**\n   * A linked Playlist document which should begin automatically playing when this\n   * Scene becomes active.\n   * @defaultValue `null`\n   */\n  playlist?: InstanceType<ConfiguredDocumentClass<typeof documents.BasePlaylist>> | string | null | undefined;\n\n  /**\n   * A linked PlaylistSound document from the selected playlist that will\n   * begin automatically playing when this Scene becomes active.\n   * @defaultValue `null`\n   */\n  playlistSound?: InstanceType<ConfiguredDocumentClass<typeof documents.BasePlaylistSound>> | string | null | undefined;\n\n  /**\n   * A linked JournalEntry document which provides narrative details about this Scene.\n   * @defaultValue `null`\n   */\n  journal?: InstanceType<ConfiguredDocumentClass<typeof documents.BaseJournalEntry>> | string | null | undefined;\n\n  /**\n   * A named weather effect which should be rendered in this Scene.\n   * @defaultValue `\"\"`\n   */\n  weather?: string | null | undefined;\n\n  /**\n   * The _id of a Folder which contains this Actor\n   * @defaultValue `null`\n   */\n  folder?: InstanceType<ConfiguredDocumentClass<typeof documents.BaseFolder>> | string | null | undefined;\n\n  /**\n   * The numeric sort value which orders this Actor relative to its siblings\n   * @defaultValue `0`\n   */\n  sort?: number | null | undefined;\n\n  /**\n   * An object which configures user permissions to this Scene\n   * @defaultValue `{ default: CONST.ENTITY_PERMISSIONS.NONE }`\n   */\n  permission?: Partial<Record<string, foundry.CONST.DOCUMENT_PERMISSION_LEVELS>> | null | undefined;\n\n  /**\n   * An object of optional key/value flags\n   */\n  flags?: ConfiguredFlags<'Scene'> | null | undefined;\n}\n\ntype SceneDataSource = PropertiesToSource<SceneDataProperties>;\n\n/**\n * The data schema for a Scene document.\n * @see BaseScene\n */\nexport class SceneData extends DocumentData<\n  SceneDataSchema,\n  SceneDataProperties,\n  SceneDataSource,\n  SceneDataConstructorData,\n  documents.BaseScene\n> {\n  /**\n   * @remarks This override does not exist in foundry but is added here to prevent runtime errors.\n   */\n  constructor(data: SceneDataConstructorData, document?: documents.BaseScene | null);\n\n  static override defineSchema(): SceneDataSchema;\n\n  protected override _initialize(): void;\n\n  size: number;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface SceneData extends SceneDataProperties {}\n\n/**\n * Verify that the initial view position for a Scene is valid\n * @param pos - The scene position object, or null\n * @returns Is the position valid?\n */\ndeclare function _validateInitialViewPosition(pos: unknown): pos is { x: number; y: number; scale: number } | null;\n"
    ]
  