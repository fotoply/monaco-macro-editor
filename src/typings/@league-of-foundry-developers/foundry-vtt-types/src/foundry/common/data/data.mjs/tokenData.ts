
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\common\\data\\data.mjs\\tokenData.d.ts",
      "import {\n  ConfiguredDocumentClass,\n  ConfiguredFlags,\n  FieldReturnType,\n  PropertiesToSource\n} from '../../../../types/helperTypes';\nimport DocumentData from '../../abstract/data.mjs';\nimport { documents } from '../../module.mjs';\nimport * as fields from '../fields.mjs';\nimport { ActorDataSource } from './actorData';\nimport { LightData, LightDataConstructorData } from './lightData';\nimport { TokenBarData, TokenBarDataConstructorData } from './tokenBarData';\n\ninterface TokenDataSchema extends DocumentSchema {\n  _id: fields.DocumentId;\n  name: fields.StringField;\n  displayName: DocumentField<foundry.CONST.TOKEN_DISPLAY_MODES> & {\n    type: typeof Number;\n    required: true;\n    default: typeof foundry.CONST.TOKEN_DISPLAY_MODES.NONE;\n    validate: (m: any) => boolean;\n    validationError: 'Invalid {name} {field} which must be a value in CONST.TOKEN_DISPLAY_MODES';\n  };\n  actorId: fields.ForeignDocumentField<{ type: documents.BaseActor; required: true }>;\n  actorLink: fields.BooleanField;\n  actorData: fields.ObjectField;\n  img: FieldReturnType<fields.VideoField, { default: () => typeof TokenData.DEFAULT_ICON }>;\n  tint: fields.ColorField;\n  width: FieldReturnType<fields.RequiredPositiveNumber, { default: 1 }>;\n  height: FieldReturnType<fields.RequiredPositiveNumber, { default: 1 }>;\n  scale: DocumentField<number> & {\n    type: typeof Number;\n    required: true;\n    default: 1;\n    validate: (s: unknown) => boolean;\n    validationError: 'Invalid {name} {field} which must be a number between 0.25 and 10';\n  };\n  mirrorX: fields.BooleanField;\n  mirrorY: fields.BooleanField;\n  x: fields.RequiredNumber;\n  y: fields.RequiredNumber;\n  elevation: fields.RequiredNumber;\n  lockRotation: fields.BooleanField;\n  rotation: FieldReturnType<fields.AngleField, { default: 0 }>;\n  effects: DocumentField<string[]> & {\n    type: [typeof String];\n    required: true;\n    default: string[];\n  };\n  overlayEffect: fields.StringField;\n  alpha: fields.AlphaField;\n  hidden: fields.BooleanField;\n  vision: DocumentField<boolean> & {\n    type: typeof Boolean;\n    required: true;\n    default: (data: { readonly dimSight?: number; readonly brightSight?: number }) => boolean;\n  };\n  dimSight: fields.NonnegativeNumberField;\n  brightSight: fields.NonnegativeNumberField;\n  sightAngle: fields.AngleField;\n  light: DocumentField<LightData> & {\n    type: typeof LightData;\n    required: true;\n    default: Record<string, never>;\n  };\n  disposition: DocumentField<foundry.CONST.TOKEN_DISPOSITIONS> & {\n    type: typeof Number;\n    required: true;\n    default: typeof foundry.CONST.TOKEN_DISPOSITIONS.HOSTILE;\n    validate: (n: any) => boolean;\n    validationError: 'Invalid {name} {field} which must be a value in CONST.TOKEN_DISPOSITIONS';\n  };\n  displayBars: DocumentField<foundry.CONST.TOKEN_DISPLAY_MODES> & {\n    type: typeof Number;\n    required: true;\n    default: typeof foundry.CONST.TOKEN_DISPLAY_MODES.NONE;\n    validate: (m: any) => boolean;\n    validationError: 'Invalid {name} {field} which must be a value in CONST.TOKEN_DISPLAY_MODES';\n  };\n  bar1: DocumentField<TokenBarData> & {\n    type: typeof TokenBarData;\n    required: true;\n    default: () => { attribute: Game['system']['data']['primaryTokenAttribute'] | null };\n  };\n  bar2: DocumentField<TokenBarData> & {\n    type: typeof TokenBarData;\n    required: true;\n    default: () => { attribute: Game['system']['data']['secondaryTokenAttribute'] | null };\n  };\n  flags: fields.ObjectField;\n}\n\ninterface TokenDataProperties {\n  /**\n   * The Token _id which uniquely identifies it within its parent Scene\n   * @defaultValue `null`\n   */\n  _id: string | null;\n\n  /**\n   * The name used to describe the Token\n   */\n  name: string | undefined;\n\n  /**\n   * The display mode of the Token nameplate, from CONST.TOKEN_DISPLAY_MODES\n   * @defaultValue `CONST.TOKEN_DISPLAY_MODES.NONE`\n   */\n  displayName: foundry.CONST.TOKEN_DISPLAY_MODES;\n\n  /**\n   * The _id of an Actor document which this Token represents\n   * @defaultValue `null`\n   */\n  actorId: string | null;\n\n  /**\n   * Does this Token uniquely represent a singular Actor, or is it one of many?\n   * @defaultValue `false`\n   */\n  actorLink: boolean;\n\n  /**\n   * Token-level data which overrides the base data of the associated Actor\n   * @defaultValue `{}`\n   */\n  actorData: Partial<ActorDataSource>;\n\n  /**\n   * A file path to an image or video file used to depict the Token\n   * @defaultValue `TokenData.DEFAULT_ICON`\n   */\n  img: string | null;\n\n  /**\n   * An optional color tint applied to the Token image\n   */\n  tint: string | null | undefined;\n\n  /**\n   * The width of the Token in grid units\n   * @defaultValue `1`\n   */\n  width: number;\n\n  /**\n   * The height of the Token in grid units\n   * @defaultValue `1`\n   */\n  height: number;\n\n  /**\n   * A scale factor applied to the Token image, between 0.25 and 3\n   * @defaultValue `1`\n   */\n  scale: number;\n\n  /**\n   * Flip the Token image horizontally?\n   * @defaultValue `false`\n   */\n  mirrorX: boolean;\n\n  /**\n   * Flip the Token image vertically?\n   * @defaultValue `false`\n   */\n  mirrorY: boolean;\n\n  /**\n   * The x-coordinate of the top-left corner of the Token\n   * @defaultValue `0`\n   */\n  x: number;\n\n  /**\n   * The y-coordinate of the top-left corner of the Token\n   * @defaultValue `0`\n   */\n  y: number;\n\n  /**\n   * The vertical elevation of the Token, in distance units\n   * @defaultValue `0`\n   */\n  elevation: number;\n\n  /**\n   * Prevent the Token image from visually rotating?\n   * @defaultValue `false`\n   */\n  lockRotation: boolean;\n\n  /**\n   * The rotation of the Token in degrees, from 0 to 360. A value of 0 represents a southward-facing Token.\n   * @defaultValue `0`\n   */\n  rotation: number;\n\n  /**\n   * An array of effect icon paths which are displayed on the Token\n   * @defaultValue `[]`\n   */\n  effects: string[];\n\n  /**\n   * A single icon path which is displayed as an overlay on the Token\n   */\n  overlayEffect: string | undefined;\n\n  /**\n   * The opacity of the token image\n   * @defaultValue `1`\n   */\n  alpha: number;\n\n  /**\n   * Is the Token currently hidden from player view?\n   * @defaultValue `false`\n   */\n  hidden: boolean;\n\n  /**\n   * Is this Token a source of vision?\n   * @defaultValue Whether dimSight or brightSight have a value greater 0.\n   */\n  vision: boolean;\n\n  /**\n   * How far in distance units the Token can naturally see as if in dim light\n   * @defaultValue `0`\n   */\n  dimSight: number;\n\n  /**\n   * How far in distance units the Token can naturally see as if in bright light\n   * @defaultValue `0`\n   */\n  brightSight: number;\n\n  /**\n   * The angle at which this Token is able to see, if it has vision\n   * @defaultValue `360`\n   */\n  sightAngle: number;\n\n  /**\n   * Configuration of the light source that this Token emits, if any\n   * @defaultValue `new LightData({})`\n   */\n  light: LightData;\n\n  /**\n   * A displayed Token disposition from CONST.TOKEN_DISPOSITIONS\n   * @defaultValue `CONST.TOKEN_DISPOSITIONS.HOSTILE`\n   */\n  disposition: foundry.CONST.TOKEN_DISPOSITIONS;\n\n  /**\n   * The display mode of Token resource bars, from CONST.TOKEN_DISPLAY_MODES\n   * @defaultValue `CONST.TOKEN_DISPLAY_MODES.NONE`\n   */\n  displayBars: foundry.CONST.TOKEN_DISPLAY_MODES;\n\n  /**\n   * The configuration of the Token's primary resource bar\n   * @defaultValue `new TokenBarData({ attribute: game?.system.data.primaryTokenAttribute || null })`\n   */\n  bar1: TokenBarData;\n\n  /**\n   * The configuration of the Token's secondary resource bar\n   * @defaultValue `new TokenBarData({ attribute: game?.system.data.secondaryTokenAttribute || null })`\n   */\n  bar2: TokenBarData;\n\n  /**\n   * An object of optional key/value flags\n   * @defaultValue `{}`\n   */\n  flags: ConfiguredFlags<'Token'>;\n}\n\ninterface TokenDataConstructorData {\n  /**\n   * The Token _id which uniquely identifies it within its parent Scene\n   * @defaultValue `null`\n   */\n  _id?: string | null | undefined;\n\n  /**\n   * The name used to describe the Token\n   */\n  name?: string | null | undefined;\n\n  /**\n   * The display mode of the Token nameplate, from CONST.TOKEN_DISPLAY_MODES\n   * @defaultValue `CONST.TOKEN_DISPLAY_MODES.NONE`\n   */\n  displayName?: foundry.CONST.TOKEN_DISPLAY_MODES | null | undefined;\n\n  /**\n   * The _id of an Actor document which this Token represents\n   * @defaultValue `null`\n   */\n  actorId?: InstanceType<ConfiguredDocumentClass<typeof documents.BaseActor>> | string | null | undefined;\n\n  /**\n   * Does this Token uniquely represent a singular Actor, or is it one of many?\n   * @defaultValue `false`\n   */\n  actorLink?: boolean;\n\n  /**\n   * Token-level data which overrides the base data of the associated Actor\n   * @defaultValue `{}`\n   */\n  actorData?: Partial<ActorDataSource> | null | undefined;\n\n  /**\n   * A file path to an image or video file used to depict the Token\n   * @defaultValue `TokenData.DEFAULT_ICON`\n   */\n  img?: string | null | undefined;\n\n  /**\n   * An optional color tint applied to the Token image\n   */\n  tint?: string | null | undefined;\n\n  /**\n   * The width of the Token in grid units\n   * @defaultValue `1`\n   */\n  width?: number | null | undefined;\n\n  /**\n   * The height of the Token in grid units\n   * @defaultValue `1`\n   */\n  height?: number | null | undefined;\n\n  /**\n   * A scale factor applied to the Token image, between 0.25 and 3\n   * @defaultValue `1`\n   */\n  scale?: number | null | undefined;\n\n  /**\n   * Flip the Token image horizontally?\n   * @defaultValue `false`\n   */\n  mirrorX?: boolean | null | undefined;\n\n  /**\n   * Flip the Token image vertically?\n   * @defaultValue `false`\n   */\n  mirrorY?: boolean | null | undefined;\n\n  /**\n   * The x-coordinate of the top-left corner of the Token\n   * @defaultValue `0`\n   */\n  x?: number | null | undefined;\n\n  /**\n   * The y-coordinate of the top-left corner of the Token\n   * @defaultValue `0`\n   */\n  y?: number | null | undefined;\n\n  /**\n   * The vertical elevation of the Token, in distance units\n   * @defaultValue `0`\n   */\n  elevation?: number | null | undefined;\n\n  /**\n   * Prevent the Token image from visually rotating?\n   * @defaultValue `false`\n   */\n  lockRotation?: boolean | null | undefined;\n\n  /**\n   * The rotation of the Token in degrees, from 0 to 360. A value of 0 represents a southward-facing Token.\n   * @defaultValue `0`\n   */\n  rotation?: number | null | undefined;\n\n  /**\n   * An array of effect icon paths which are displayed on the Token\n   * @defaultValue `[]`\n   */\n  effects?: string[] | null | undefined;\n\n  /**\n   * A single icon path which is displayed as an overlay on the Token\n   */\n  overlayEffect?: string | null | undefined;\n\n  /**\n   * The opacity of the token image\n   * @defaultValue `1`\n   */\n  alpha?: number | null | undefined;\n\n  /**\n   * Is the Token currently hidden from player view?\n   * @defaultValue `false`\n   */\n  hidden?: boolean | null | undefined;\n\n  /**\n   * Is this Token a source of vision?\n   * @defaultValue Whether dimSight or brightSight have a value greater 0.\n   */\n  vision?: boolean | null | undefined;\n\n  /**\n   * How far in distance units the Token can naturally see as if in dim light\n   * @defaultValue `0`\n   */\n  dimSight?: number | null | undefined;\n\n  /**\n   * How far in distance units the Token can naturally see as if in bright light\n   * @defaultValue `0`\n   */\n  brightSight?: number | null | undefined;\n\n  /**\n   * The angle at which this Token is able to see, if it has vision\n   * @defaultValue `360`\n   */\n  sightAngle?: number | null | undefined;\n\n  /**\n   * Configuration of the light source that this Token emits, if any\n   * @defaultValue `new LightData({})`\n   */\n  light?: LightDataConstructorData | null | undefined;\n\n  /**\n   * A displayed Token disposition from CONST.TOKEN_DISPOSITIONS\n   * @defaultValue `CONST.TOKEN_DISPOSITIONS.HOSTILE`\n   */\n  disposition?: foundry.CONST.TOKEN_DISPOSITIONS | null | undefined;\n\n  /**\n   * The display mode of Token resource bars, from CONST.TOKEN_DISPLAY_MODES\n   * @defaultValue `CONST.TOKEN_DISPLAY_MODES.NONE`\n   */\n  displayBars?: foundry.CONST.TOKEN_DISPLAY_MODES | null | undefined;\n\n  /**\n   * The configuration of the Token's primary resource bar\n   * @defaultValue `new TokenBarData({ attribute: game?.system.data.primaryTokenAttribute || null })`\n   */\n  bar1?: TokenBarDataConstructorData | null | undefined;\n\n  /**\n   * The configuration of the Token's secondary resource bar\n   * @defaultValue `new TokenBarData({ attribute: game?.system.data.secondaryTokenAttribute || null })`\n   */\n  bar2?: TokenBarDataConstructorData | null | undefined;\n\n  /**\n   * An object of optional key/value flags\n   * @defaultValue `{}`\n   */\n  flags?: ConfiguredFlags<'Token'> | null | undefined;\n}\n\ntype TokenDataSource = PropertiesToSource<TokenDataProperties>;\n\n/**\n * The data schema for a Token document.\n */\nexport class TokenData extends DocumentData<\n  TokenDataSchema,\n  TokenDataProperties,\n  TokenDataSource,\n  TokenDataConstructorData,\n  documents.BaseToken\n> {\n  static override defineSchema(): TokenDataSchema;\n\n  /**\n   * The default icon used for newly created Token documents\n   * @defaultValue `CONST.DEFAULT_TOKEN`\n   */\n  static DEFAULT_ICON: string;\n\n  /**\n   * Migrate TokenData attributes to the new inner LightData structure.\n   * This can be safely removed after several major versions have passed. Maybe V12?\n   */\n  override _initializeSource(data: TokenDataConstructorData): TokenDataSource;\n\n  protected override _initialize(): void;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface TokenData extends TokenDataProperties {}\n"
    ]
  