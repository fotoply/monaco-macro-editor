
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\client\\pixi\\placeables\\note.d.ts",
      "import type { ConfiguredDocumentClass, ConfiguredDocumentClassForName } from '../../../../types/helperTypes';\nimport { HoverInOptions } from '../placeable';\n\ndeclare global {\n  /**\n   * A Note is an implementation of PlaceableObject which represents an annotated location within the Scene.\n   * Each Note links to a JournalEntry document and represents its location on the map.\n   */\n  class Note extends PlaceableObject<InstanceType<ConfiguredDocumentClass<typeof NoteDocument>>> {\n    static override embeddedName: 'Note';\n\n    override get bounds(): Rectangle;\n\n    /**\n     * The associated JournalEntry which is described by this note\n     */\n    get entry(): InstanceType<ConfiguredDocumentClassForName<'JournalEntry'>>;\n\n    /**\n     * The text label used to annotate this Note\n     */\n    get text(): string;\n\n    /**\n     * The Map Note icon size\n     */\n    get size(): number;\n\n    /**\n     * Determine whether the Note is visible to the current user based on their perspective of the Scene.\n     * Visibility depends on permission to the underlying journal entry, as well as the perspective of controlled Tokens.\n     * If Token Vision is required, the user must have a token with vision over the note to see it.\n     */\n    get isVisible(): boolean;\n\n    override draw(): Promise<this>;\n\n    /**\n     * Draw the ControlIcon for the Map Note\n     */\n    protected _drawControlIcon(): ControlIcon;\n\n    /**\n     * Draw the map note Tooltip as a Text object\n     */\n    protected _drawTooltip(): PreciseText;\n\n    /**\n     * Define a PIXI TextStyle object which is used for the tooltip displayed for this Note\n     */\n    protected _getTextStyle(): PIXI.TextStyle;\n\n    override refresh(): this;\n\n    protected override _onUpdate(changed: DeepPartial<foundry.data.NoteData['_source']>): void;\n\n    protected override _canHover(user: InstanceType<ConfiguredDocumentClassForName<'User'>>): true;\n\n    protected override _canView(user: InstanceType<ConfiguredDocumentClassForName<'User'>>): boolean;\n\n    protected override _onHoverIn(event: PIXI.InteractionEvent, options?: HoverInOptions): false | void;\n\n    protected override _onHoverOut(event: PIXI.InteractionEvent): false | void;\n\n    protected override _onClickLeft2(event: PIXI.InteractionEvent): void;\n  }\n}\n"
    ]
  