
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\common\\documents.mjs\\baseCombat.d.ts",
      "import { DocumentMetadata } from '../abstract/document.mjs';\nimport { Document } from '../abstract/module.mjs';\nimport type { CombatDataConstructorData } from '../data/data.mjs/combatData';\nimport { data } from '../module.mjs';\nimport { BaseCombatant } from './baseCombatant';\nimport { BaseUser } from './baseUser';\n\ntype CombatMetadata = Merge<\n  DocumentMetadata,\n  {\n    name: 'Combat';\n    collection: 'combats';\n    label: 'DOCUMENT.Combat';\n    labelPlural: 'DOCUMENT.Combats';\n    embedded: {\n      Combatant: typeof BaseCombatant;\n    };\n    isPrimary: true;\n    permissions: {\n      update: (user: BaseUser, doc: BaseCombat, data: DeepPartial<CombatDataConstructorData>) => boolean;\n    };\n  }\n>;\n\n/**\n * The base Combat model definition which defines common behavior of an Combat document between both client and server.\n */\nexport declare class BaseCombat extends Document<data.CombatData, null, CombatMetadata> {\n  static override get schema(): typeof data.CombatData;\n\n  static override get metadata(): CombatMetadata;\n\n  /** A reference to the Collection of Combatant instances in the Combat document, indexed by id. */\n  get combatants(): this['data']['combatants'];\n\n  /**\n   * Is a user able to update an existing Combat?\n   */\n  protected static _canUpdate(user: BaseUser, doc: BaseCombat, data: DeepPartial<CombatDataConstructorData>): boolean;\n}\n"
    ]
  