
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\client\\pixi\\placeables\\template.d.ts",
      "import { ConfiguredDocumentClass } from '../../../../types/helperTypes';\nimport { DocumentModificationOptions } from '../../../common/abstract/document.mjs';\n\ndeclare global {\n  /**\n   * A type of Placeable Object which highlights an area of the grid as covered by some area of effect.\n   * @see {@link MeasuredTemplateDocument}\n   * @see {@link TemplateLayer}\n   */\n  class MeasuredTemplate extends PlaceableObject<\n    InstanceType<ConfiguredDocumentClass<typeof MeasuredTemplateDocument>>\n  > {\n    /**\n     * The geometry shape used for testing point intersection\n     * @defaultValue `undefined`\n     */\n    shape: PIXI.Circle | PIXI.Ellipse | PIXI.Polygon | PIXI.Rectangle | PIXI.RoundedRectangle | undefined;\n\n    /**\n     * The tiling texture used for this template, if any\n     */\n    texture: PIXI.Texture | undefined;\n\n    /**\n     * The template graphics\n     * @defaultValue `undefined`\n     */\n    template: PIXI.Graphics | undefined;\n\n    /**\n     * The UI frame container which depicts Token metadata and status, displayed in the ControlsLayer.\n     * @defaultValue `new ObjectHUD(this)`\n     */\n    hud: MeasuredTemplate.ObjectHUD;\n\n    /**\n     * Internal property used to configure the control border thickness\n     * @defaultValue `3`\n     * @internal\n     */\n    protected _borderThickness: number;\n\n    static override embeddedName: 'MeasuredTemplate';\n\n    override get bounds(): Rectangle;\n\n    /**\n     * A convenience accessor for the border color as a numeric hex code\n     */\n    get borderColor(): string | number;\n\n    /**\n     * A convenience accessor for the fill color as a numeric hex code\n     */\n    get fillColor(): string | number;\n\n    /**\n     * A flag for whether the current User has full ownership over the MeasuredTemplate document.\n     */\n    get owner(): boolean;\n\n    override draw(): Promise<this>;\n\n    override destroy(options?: Parameters<PlaceableObject['destroy']>[0]): void;\n\n    /**\n     * Draw the HUD container which provides an interface for managing this template\n     * @internal\n     */\n    protected _drawHUD(): MeasuredTemplate.InitializedObjectHUD;\n\n    /**\n     * Draw the ControlIcon for the MeasuredTemplate\n     * @internal\n     */\n    protected _drawControlIcon(): ControlIcon;\n\n    /**\n     * Draw the Text label used for the MeasuredTemplate\n     * @internal\n     */\n    protected _drawRulerText(): PreciseText;\n\n    override refresh(): this;\n\n    /**\n     * Get a Circular area of effect given a radius of effect\n     * @internal\n     */\n    protected _getCircleShape(distance: number): PIXI.Circle;\n\n    /**\n     * Get a Conical area of effect given a direction, angle, and distance\n     * @internal\n     */\n    protected _getConeShape(direction: number, angle: number, distance: number): PIXI.Polygon;\n\n    /**\n     * Get a Rectangular area of effect given a width and height\n     * @internal\n     */\n    protected _getRectShape(direction: number, distance: number): NormalizedRectangle;\n\n    /**\n     * Get a rotated Rectangular area of effect given a width, height, and direction\n     * @internal\n     */\n    protected _getRayShape(direction: number, distance: number, width: number): PIXI.Polygon;\n\n    /**\n     * Update the displayed ruler tooltip text\n     * @internal\n     */\n    protected _refreshRulerText(): void;\n\n    /**\n     * Highlight the grid squares which should be shown under the area of effect\n     */\n    highlightGrid(): void;\n\n    override rotate(angle: number, snap: number): Promise<this>;\n\n    protected override _canControl(user: InstanceType<ConfiguredDocumentClass<typeof User>>, event?: any): boolean;\n\n    protected override _canConfigure(user: InstanceType<ConfiguredDocumentClass<typeof User>>, event?: any): boolean;\n\n    protected override _canView(user: InstanceType<ConfiguredDocumentClass<typeof User>>, event?: any): boolean;\n\n    protected override _onUpdate(\n      data: DeepPartial<InstanceType<ConfiguredDocumentClass<typeof MeasuredTemplateDocument>>['data']['_source']>,\n      options?: DocumentModificationOptions,\n      userId?: string\n    ): void;\n\n    protected override _onDelete(options: DocumentModificationOptions, userId: string): void;\n  }\n\n  namespace MeasuredTemplate {\n    interface ObjectHUD extends globalThis.ObjectHUD {\n      /**\n       * Template control icon\n       */\n      icon?: ControlIcon;\n\n      /**\n       * Ruler text tooltip\n       */\n      ruler?: PreciseText;\n    }\n\n    type InitializedObjectHUD = RequiredProps<ObjectHUD, 'icon' | 'ruler'>;\n  }\n}\n"
    ]
  