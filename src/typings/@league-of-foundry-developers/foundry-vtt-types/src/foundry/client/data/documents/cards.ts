
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\client\\data\\documents\\cards.d.ts",
      "import type {\n  ConfiguredDocumentClass,\n  ConfiguredDocumentClassForName,\n  ConstructorDataType,\n  DocumentConstructor\n} from '../../../../types/helperTypes';\nimport type { DocumentModificationOptions } from '../../../common/abstract/document.mjs';\n\ndeclare global {\n  /**\n   * The client-side Cards document which extends the common BaseCards model.\n   * Each Cards document contains CardsData which defines its data schema.\n   *\n   * @see {@link data.CardsData}                     The Cards data schema\n   * @see {@link CardStacks}                         The world-level collection of Cards documents\n   */\n  class Cards extends ClientDocumentMixin(foundry.documents.BaseCards) {\n    /**\n     * Provide a thumbnail image path used to represent this document.\n     */\n    get thumbnail(): string | null;\n\n    /**\n     * The Card documents within this stack which are able to be drawn.\n     */\n    get availableCards(): InstanceType<ConfiguredDocumentClassForName<'Card'>>[];\n\n    /**\n     * The Card documents which belong to this stack but have already been drawn.\n     */\n    get drawnCards(): InstanceType<ConfiguredDocumentClassForName<'Card'>>[];\n\n    /**\n     * Returns the localized Label for the type of Card Stack this is\n     */\n    get typeLabel(): string;\n\n    static override createDocuments(\n      data: Array<\n        | ConstructorDataType<foundry.data.CardsData>\n        | (ConstructorDataType<foundry.data.CardsData> & Record<string, unknown>)\n      >,\n      context: DocumentModificationContext & { temporary: false }\n    ): Promise<StoredDocument<InstanceType<ConfiguredDocumentClassForName<'Cards'>>>[]>;\n    static createDocuments(\n      data: Array<\n        | ConstructorDataType<foundry.data.CardsData>\n        | (ConstructorDataType<foundry.data.CardsData> & Record<string, unknown>)\n      >,\n      context: DocumentModificationContext & { temporary: boolean }\n    ): Promise<InstanceType<ConfiguredDocumentClassForName<'Cards'>>[]>;\n    static createDocuments(\n      data: Array<\n        | ConstructorDataType<foundry.data.CardsData>\n        | (ConstructorDataType<foundry.data.CardsData> & Record<string, unknown>)\n      >,\n      context?: DocumentModificationContext\n    ): Promise<StoredDocument<InstanceType<ConfiguredDocumentClassForName<'Cards'>>>[]>;\n\n    /**\n     * Deal one or more cards from this Cards document to each of a provided array of Cards destinations.\n     * Cards are allocated from the top of the deck in cyclical order until the required number of Cards have been dealt.\n     * @param to      - An array of other Cards documents to which cards are dealt\n     * @param number  - The number of cards to deal to each other document\n     *                  (default: `1`)\n     * @param options - (default: `{}`)\n     * @returns This Cards document after the deal operation has completed\n     */\n    deal(\n      to: InstanceType<ConfiguredDocumentClassForName<'Cards'>>[],\n      number?: number | undefined,\n      options?: Cards.DealOptions | undefined\n    ): Promise<InstanceType<ConfiguredDocumentClassForName<'Cards'>>>;\n\n    /**\n     * Pass an array of specific Card documents from this document to some other Cards stack.\n     * @param to      - Some other Cards document that is the destination for the pass operation\n     * @param ids     - The embedded Card ids which should be passed\n     * @param options - Additional options which modify the pass operation\n     *                  (default: `{}`)\n     * @returns An array of the Card embedded documents created within the destination stack\n     */\n    pass(\n      to: InstanceType<ConfiguredDocumentClassForName<'Cards'>>,\n      ids: string[],\n      options?: Cards.PassOptions | undefined\n    ): Promise<InstanceType<ConfiguredDocumentClassForName<'Card'>>[]>;\n\n    /**\n     * Draw one or more cards from some other Cards document.\n     * @param from    - Some other Cards document from which to draw\n     * @param number  - The number of cards to draw\n     *                  (default: `1`)\n     * @param options - (default: `{}`)\n     * @returns An array of the Card documents which were drawn\n     */\n    draw(\n      from: InstanceType<ConfiguredDocumentClassForName<'Cards'>>,\n      number?: number | undefined,\n      options?: Cards.DrawOptions | undefined\n    ): Promise<InstanceType<ConfiguredDocumentClassForName<'Card'>>[]>;\n\n    /**\n     * Shuffle this Cards stack, randomizing the sort order of all the cards it contains.\n     * @param options - (default: `{}`)\n     * @returns The Cards document after the shuffle operation has completed\n     */\n    shuffle(options?: Cards.ShuffleOptions | undefined): Promise<InstanceType<ConfiguredDocumentClassForName<'Cards'>>>;\n\n    /**\n     * Reset the Cards stack, retrieving all original cards from other stacks where they may have been drawn if this is a\n     * deck, otherwise returning all the cards in this stack to the decks where they originated.\n     * @param options - Options which modify the reset operation\n     *                  (default: `{}`)\n     * @returns The Cards document after the reset operation has completed\n     */\n    reset(options?: Cards.ResetOptions | undefined): Promise<InstanceType<ConfiguredDocumentClassForName<'Cards'>>>;\n\n    /**\n     * Perform a reset operation for a deck, retrieving all original cards from other stacks where they may have been\n     * drawn.\n     * @param options - Options which modify the reset operation.\n     *                  (default: `{}`)\n     * @returns The Cards document after the reset operation has completed.\n     * @internal\n     */\n    protected _resetDeck(\n      options?: Cards.ResetOptions | undefined\n    ): Promise<InstanceType<ConfiguredDocumentClassForName<'Cards'>>>;\n\n    /**\n     * Return all cards in this stack to their original decks.\n     * @param options - Options which modify the return operation.\n     *                  (default: `{}`)\n     * @returns The Cards document after the return operation has completed.\n     * @internal\n     */\n    protected _resetStack(\n      options?: Cards.ResetOptions | undefined\n    ): Promise<InstanceType<ConfiguredDocumentClassForName<'Cards'>>>;\n\n    /**\n     * A sorting function that is used to determine the standard order of Card documents within an un-shuffled stack.\n     * @param a - The card being sorted\n     * @param b - Another card being sorted against\n     */\n    protected sortStandard(a: foundry.data.CardData, b: foundry.data.CardData): number;\n\n    /**\n     * A sorting function that is used to determine the order of Card documents within a shuffled stack.\n     * @param a - The card being sorted\n     * @param b - Another card being sorted against\n     */\n    protected sortShuffled(a: foundry.data.CardData, b: foundry.data.CardData): number;\n\n    /**\n     * An internal helper method for drawing a certain number of Card documents from this Cards stack.\n     * @param number - The number of cards to draw\n     * @param how    - A draw mode from CONST.CARD_DRAW_MODES\n     * @returns An array of drawn Card documents\n     */\n    protected _drawCards(\n      number: number,\n      how: foundry.CONST.CARD_DRAW_MODES\n    ): InstanceType<ConfiguredDocumentClassForName<'Card'>>[];\n\n    /**\n     * Create a ChatMessage which provides a notification of the cards operation which was just performed.\n     * Visibility of the resulting message is linked to the default roll mode selected in the chat log dropdown.\n     * @param source  - The source Cards document from which the action originated\n     * @param action  - The localization key which formats the chat message notification\n     * @param context - Data passed to the i18n.format method for the localization key\n     * @returns A created ChatMessage document\n     * @internal\n     */\n    protected _postChatNotification(\n      source: InstanceType<ConfiguredDocumentClassForName<'Cards'>>,\n      action: string,\n      context: Record<string, unknown>\n    ): Promise<InstanceType<ConfiguredDocumentClassForName<'ChatMessage'>> | undefined>;\n\n    protected override _onUpdate(\n      data: DeepPartial<foundry.data.CardsData>,\n      options: DocumentModificationOptions,\n      userId: string\n    ): void;\n\n    protected override _preDelete(\n      options: DocumentModificationOptions,\n      user: foundry.documents.BaseUser\n    ): Promise<void>;\n\n    // TODO: It's a bit weird that we have to do it in this generic way but otherwise there is an error overriding this. Investigate later.\n    static override deleteDocuments<T extends DocumentConstructor>(\n      this: T,\n      ids?: string[] | undefined,\n      context?: DocumentModificationContext | undefined\n    ): Promise<InstanceType<ConfiguredDocumentClass<T>>[]>;\n\n    /**\n     * Display a dialog which prompts the user to deal cards to some number of hand-type Cards documents.\n     * @see {@link Cards#deal}\n     */\n    dealDialog(): Promise<InstanceType<ConfiguredDocumentClassForName<'Cards'>> | null>;\n\n    /**\n     * Display a dialog which prompts the user to draw cards from some other deck-type Cards documents.\n     * @see {@link Cards#draw}\n     */\n    drawDialog(): Promise<InstanceType<ConfiguredDocumentClassForName<'Card'>>[] | null>;\n\n    /**\n     * Display a dialog which prompts the user to pass cards from this document to some other other Cards document.\n     * @see {@link Cards#deal}\n     */\n    passDialog(): Promise<InstanceType<ConfiguredDocumentClassForName<'Cards'>> | null>;\n\n    /**\n     * Display a dialog which prompts the user to play a specific Card to some other Cards document\n     * @see {@link Cards#pass}\n     * @param card - The specific card being played as part of this dialog\n     */\n    playDialog(\n      card: InstanceType<ConfiguredDocumentClassForName<'Card'>>\n    ): Promise<InstanceType<ConfiguredDocumentClassForName<'Card'>>[] | void | null>;\n\n    /**\n     * Display a confirmation dialog for whether or not the user wishes to reset a Cards stack\n     * @see {@link Cards#reset}\n     */\n    resetDialog(): Promise<InstanceType<ConfiguredDocumentClassForName<'Cards'>> | false | null>;\n\n    override deleteDialog(options?: Partial<DialogOptions> | undefined): Promise<this | false | null | undefined>;\n\n    // TODO: It's a bit weird that we have to do it in this generic way but otherwise there is an error overriding this. Investigate later.\n    static override createDialog<T extends DocumentConstructor>(\n      this: T,\n      data?:\n        | DeepPartial<\n            | ConstructorDataType<foundry.data.CardsData>\n            | (ConstructorDataType<foundry.data.CardsData> & Record<string, unknown>)\n          >\n        | undefined,\n      context?: (Pick<DocumentModificationContext, 'parent' | 'pack'> & Partial<DialogOptions>) | undefined\n    ): Promise<InstanceType<ConfiguredDocumentClass<T>> | null | undefined>;\n  }\n\n  namespace Cards {\n    interface BaseOperationOptions {\n      /**\n       * Create a ChatMessage which notifies that this action has occurred\n       * @defaultValue `true`\n       */\n      chatNotification?: boolean | undefined;\n    }\n\n    interface DealOptions extends BaseOperationOptions {\n      /**\n       * How to draw, a value from CONST.CARD_DRAW_MODES\n       * @defaultValue `foundry.CONST.CARD_DRAW_MODES.FIRST`\n       */\n      how?: foundry.CONST.CARD_DRAW_MODES | undefined;\n\n      /**\n       * Modifications to make to each Card as part of the deal operation,\n       * for example the displayed face\n       * @defaultValue `{}`\n       */\n      updateData?: DeepPartial<ConstructorDataType<foundry.data.CardData>> | undefined;\n\n      /**\n       * The name of the action being performed, used as part of the dispatched Hook event\n       * @defaultValue `'deal'`\n       */\n      action?: string | undefined;\n    }\n\n    /** Additional context which describes the operation */\n    interface DealContext {\n      /** The action name being performed, i.e. \"deal\", \"pass\" */\n      action: string;\n\n      /** An array of Card creation operations to be performed in each destination Cards document */\n      toCreate: ConstructorDataType<foundry.data.CardData>[][];\n\n      /** Card update operations to be performed in the origin Cards document */\n      fromUpdate: DeepPartial<ConstructorDataType<foundry.data.CardData>>[];\n\n      /** Card deletion operations to be performed in the origin Cards document */\n      fromDelete: string[];\n    }\n\n    interface PassOptions extends BaseOperationOptions {\n      /**\n       * Modifications to make to each Card as part of the pass operation,\n       * for example the displayed face\n       * @defaultValue `{}`\n       */\n      updateData?: DeepPartial<ConstructorDataType<foundry.data.CardData>> | undefined;\n\n      /**\n       * The name of the action being performed, used as part of the dispatched Hook event\n       * @defaultValue `'pass'`\n       */\n      action?: string | undefined;\n    }\n\n    /** Additional context which describes the operation */\n    interface PassContext {\n      /** The action name being performed, i.e. \"pass\", \"play\", \"discard\", \"draw\" */\n      action: string;\n\n      /** Card creation operations to be performed in the destination Cards document */\n      toCreate: ConstructorDataType<foundry.data.CardData>[];\n\n      /** Card update operations to be performed in the destination Cards document */\n      toUpdate: DeepPartial<ConstructorDataType<foundry.data.CardData>>[];\n\n      /** Card update operations to be performed in the origin Cards document */\n      fromUpdate: DeepPartial<ConstructorDataType<foundry.data.CardData>>[];\n\n      /** Card deletion operations to be performed in the origin Cards document */\n      fromDelete: string[];\n    }\n\n    interface DrawOptions extends PassOptions {\n      /**\n       * How to draw, a value from CONST.CARD_DRAW_MODES\n       * @defaultValue `foundry.CONST.CARD_DRAW_MODES.FIRST`\n       */\n      how?: foundry.CONST.CARD_DRAW_MODES | undefined;\n\n      /**\n       * Modifications to make to each Card as part of the draw operation,\n       * for example the displayed face\n       * @defaultValue `{}`\n       */\n      updateData?: DeepPartial<ConstructorDataType<foundry.data.CardData>> | undefined;\n    }\n\n    interface ShuffleOptions extends BaseOperationOptions {\n      /**\n       * Modifications to make to each Card as part of the shuffle operation,\n       * for example the displayed face\n       * @defaultValue `{}`\n       * @remarks This is not actually used by {@link Cards.shuffle}.\n       */\n      updateData?: DeepPartial<ConstructorDataType<foundry.data.CardData>> | undefined;\n    }\n\n    /** Options which modify the reset operation */\n    interface ResetOptions extends BaseOperationOptions {\n      /**\n       * Modifications to make to each Card as part of the reset operation,\n       * for example the displayed face\n       * @defaultValue `{}`\n       */\n      updateData?: DeepPartial<ConstructorDataType<foundry.data.CardData>> | undefined;\n    }\n\n    /** Additional context which describes the operation. */\n    interface ReturnContext {\n      /**\n       * A mapping of Card deck IDs to the update operations that\n       * will be performed on them.\n       */\n      toUpdate: Record<string, DeepPartial<ConstructorDataType<foundry.data.CardData>>[]>;\n\n      /**\n       * Card deletion operations to be performed on the origin Cards\n       * document.\n       */\n      fromDelete: string[];\n    }\n  }\n}\n"
    ]
  