
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\common\\documents.mjs\\baseUser.d.ts",
      "import { DocumentMetadata } from '../abstract/document.mjs';\nimport { Document } from '../abstract/module.mjs';\nimport * as data from '../data/data.mjs';\nimport type { UserDataConstructorData, UserDataSource } from '../data/data.mjs/userData';\n\ntype UserMetadata = Merge<\n  DocumentMetadata,\n  {\n    name: 'User';\n    collection: 'users';\n    label: 'DOCUMENT.User';\n    labelPlural: 'DOCUMENT.Users';\n    isPrimary: true;\n    permissions: {\n      create: (user: BaseUser, doc: BaseUser, data: UserDataSource) => boolean;\n      update: (user: BaseUser, doc: BaseUser, data: DeepPartial<UserDataConstructorData>) => boolean;\n      delete: (user: BaseUser, doc: BaseUser) => boolean;\n    };\n  }\n>;\n\n/**\n * The base User model definition which defines common behavior of an User document between both client and server.\n */\nexport declare class BaseUser extends Document<data.UserData, null, UserMetadata> {\n  constructor(...args: ConstructorParameters<ConstructorOf<Document<data.UserData, null>>>);\n\n  /**\n   * Define an immutable property for the User's role\n   */\n  readonly role: ValueOf<typeof CONST.USER_ROLES>;\n\n  static override get schema(): typeof data.UserData;\n\n  static override get metadata(): UserMetadata;\n\n  /**\n   * Is a user able to create an existing User?\n   * @param user - The user attempting the creation.\n   * @param doc  - The User document being created.\n   * @param data - The supplied creation data.\n   * @internal\n   */\n  protected static _canCreate(user: BaseUser, doc: BaseUser, data: UserDataSource): boolean;\n\n  /**\n   * Is a user able to update an existing User?\n   * @param user - The user attempting the update.\n   * @param doc  - The User document being updated.\n   * @param data - The update delta.\n   * @internal\n   */\n  protected static _canUpdate(user: BaseUser, doc: BaseUser, data: DeepPartial<UserDataConstructorData>): boolean;\n\n  /**\n   * Is a user able to delete an existing User?\n   * @param user - The user attempting the deletion.\n   * @param doc  - The User document being deleted.\n   * @internal\n   */\n  protected static _canDelete(user: BaseUser, doc: BaseUser): boolean;\n\n  /**\n   * Test whether the User has a GAMEMASTER or ASSISTANT role in this World?\n   */\n  get isGM(): boolean;\n\n  /**\n   * Test whether the User is able to perform a certain permission action.\n   * The provided permission string may pertain to an explicit permission setting or a named user role.\n   * Alternatively, Gamemaster users are assumed to be allowed to take all actions.\n   *\n   * @param action - The action to test\n   * @returns Does the user have the ability to perform this action?\n   */\n  can(\n    action: ValueOf<typeof CONST.USER_ROLES> | keyof typeof CONST.USER_ROLES | keyof typeof CONST.USER_PERMISSIONS\n  ): boolean;\n\n  override getUserLevel(\n    user: BaseUser\n  ): typeof CONST.DOCUMENT_PERMISSION_LEVELS.OWNER | typeof CONST.DOCUMENT_PERMISSION_LEVELS.NONE;\n\n  /**\n   * Test whether the User has at least a specific permission\n   * @param permission - The permission name from USER_PERMISSIONS to test\n   * @returns Does the user have at least this permission\n   */\n  hasPermission(permission: keyof typeof CONST.USER_PERMISSIONS): boolean;\n\n  /**\n   * Test whether the User has at least the permission level of a certain role\n   * @param role  - The role name from USER_ROLES to test\n   * @param exact - Require the role match to be exact\n   *                (default: `false`)\n   * @returns Does the user have at this role level (or greater)?\n   */\n  hasRole(\n    role: ValueOf<typeof CONST.USER_ROLES> | keyof typeof CONST.USER_ROLES,\n    { exact }?: { exact?: boolean }\n  ): boolean;\n}\n"
    ]
  