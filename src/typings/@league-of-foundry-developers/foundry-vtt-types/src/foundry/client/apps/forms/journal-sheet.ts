
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\client\\apps\\forms\\journal-sheet.d.ts",
      "import type { ConfiguredDocumentClass } from '../../../../types/helperTypes';\n\ndeclare global {\n  interface JournalSheetOptions extends DocumentSheetOptions {\n    /** The current display mode of the journal. Either 'text' or 'image'. */\n    sheetMode?: JournalSheet.SheetMode | null;\n  }\n\n  /**\n   * The Application responsible for displaying and editing a single JournalEntry document.\n   * @typeParam Options - the type of the options object\n   * @typeParam Data    - The data structure used to render the handlebars template.\n   */\n  class JournalSheet<\n    Options extends JournalSheetOptions = JournalSheetOptions,\n    Data extends object = JournalSheet.Data<Options>\n  > extends DocumentSheet<Options, Data> {\n    /**\n     * @param object  - The JournalEntry instance which is being edited\n     * @param options - Application options\n     */\n    constructor(object: ConcreteJournalEntry, options?: Partial<Options>);\n\n    /**\n     * The current display mode of the journal. Either 'text' or 'image'.\n     * @internal\n     */\n    protected _sheetMode: JournalSheet.SheetMode | null;\n\n    /**\n     * The size of the application when it was in text mode, so we can go back\n     * to it when we switch modes.\n     * @defaultValue `null`\n     * @internal\n     */\n    protected _textPos: Application.Position | null;\n\n    /**\n     * @defaultValue\n     * ```ts\n     * foundry.utils.mergeObject(super.defaultOptions, {\n     *   classes: [\"sheet\", \"journal-sheet\"],\n     *   width: 720,\n     *   height: 800,\n     *   resizable: true,\n     *   closeOnSubmit: false,\n     *   submitOnClose: true,\n     *   viewPermission: CONST.DOCUMENT_PERMISSION_LEVELS.NONE\n     * })\n     * ```\n     */\n    static override get defaultOptions(): JournalSheetOptions;\n\n    override get template(): string;\n\n    override get title(): string;\n\n    /**\n     * Guess the default view mode for the sheet based on the player's permissions to the Entry\n     * @internal\n     */\n    protected _inferDefaultMode(): JournalSheet.SheetMode | null;\n\n    protected override _render(force?: boolean, options?: Application.RenderOptions<Options>): Promise<void>;\n\n    protected override _getHeaderButtons(): Application.HeaderButton[];\n\n    override getData(options?: Partial<Options>): Promise<Data> | Data;\n\n    protected override _updateObject(event: Event, formData: JournalSheet.FormData): Promise<unknown>;\n\n    /**\n     * Handle requests to switch the rendered mode of the Journal Entry sheet\n     * Save the form before triggering the show request, in case content has changed\n     * @param event - The triggering click event\n     * @param mode  - The journal mode to display\n     * @internal\n     */\n    protected _onSwapMode(event: Event, mode: JournalSheet.SheetMode): Promise<void>;\n\n    /**\n     * Handle requests to show the referenced Journal Entry to other Users\n     * Save the form before triggering the show request, in case content has changed\n     * @param event - The triggering click event\n     * @internal\n     */\n    protected _onShowPlayers(event: Event): Promise<void>;\n  }\n\n  namespace JournalSheet {\n    interface Data<Options extends JournalSheetOptions = JournalSheetOptions>\n      extends DocumentSheet.Data<ConcreteJournalEntry, Options> {\n      image: string;\n      folders: ReturnType<NonNullable<Game['folders']>['filter']>;\n    }\n\n    type SheetMode = 'text' | 'image';\n\n    interface FormData {\n      content: string;\n      folder: string;\n      name: string;\n    }\n  }\n}\n\ntype ConcreteJournalEntry = InstanceType<ConfiguredDocumentClass<typeof JournalEntry>>;\n"
    ]
  