
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\client\\pixi\\layers\\tokens.d.ts",
      "import { ConfiguredDocumentClass, ConfiguredObjectClassForName } from '../../../../types/helperTypes';\nimport { SelectOptions } from '../placeables';\n\ndeclare global {\n  /**\n   * The Tokens Container\n   */\n  class TokenLayer extends PlaceablesLayer<'Token', TokenLayer.LayerOptions> {\n    constructor();\n\n    /**\n     * The current index position in the tab cycle\n     * @defaultValue `null`\n     */\n    protected _tabIndex: number | null;\n\n    /**\n     * Remember the last drawn wildcard token image to avoid repetitions\n     * @defaultValue `null`\n     */\n    protected _lastWildcard: string | null;\n\n    /**\n     * @remarks This is not overridden in foundry but reflects the real behavior.\n     */\n    static get instance(): Canvas['tokens'];\n\n    /**\n     * @defaultValue\n     * ```typescript\n     * foundry.utils.mergeObject(super.layerOptions, {\n     *  name: \"tokens\",\n     *  canDragCreate: false,\n     *  controllableObjects: true,\n     *  rotatableObjects: true,\n     *  zIndex: 100\n     * })\n     * ```\n     */\n    static override get layerOptions(): TokenLayer.LayerOptions;\n\n    static override documentName: 'Token';\n\n    override get gridPrecision(): 1;\n\n    /**\n     * Token objects on this layer utilize the TokenHUD\n     */\n    get hud(): TokenHUD;\n\n    /**\n     * An Array of tokens which belong to actors which are owned\n     */\n    get ownedTokens(): ReturnType<this['placeables']['filter']>;\n\n    override tearDown(): Promise<this>;\n\n    override activate(): this;\n\n    override deactivate(): this;\n\n    /**\n     * @param options - (default: `{}`)\n     */\n    override selectObjects(options?: SelectOptions): boolean;\n\n    /**\n     * Target all Token instances which fall within a coordinate rectangle.\n     * @returns The number of Token instances which were targeted.\n     */\n    targetObjects(\n      {\n        x,\n        y,\n        width,\n        height\n      }: {\n        /** The top-left x-coordinate of the selection rectangle */\n        x: number;\n\n        /** The top-left y-coordinate of the selection rectangle */\n        y: number;\n\n        /** The width of the selection rectangle */\n        width: number;\n\n        /** The height of the selection rectangle */\n        height: number;\n      },\n      {\n        releaseOthers\n      }?: {\n        /**\n         * Whether or not to release other targeted tokens\n         * @defaultValue `true`\n         */\n        releaseOthers?: boolean;\n      }\n    ): number;\n\n    /**\n     * Cycle the controlled token by rotating through the list of Owned Tokens that are available within the Scene\n     * Tokens are currently sorted in order of their TokenID\n     *\n     * @param forwards - Which direction to cycle. A truthy value cycles forward, while a false value cycles backwards.\n     * @param reset    - Restart the cycle order back at the beginning?\n     * @returns The Token object which was cycled to, or null\n     */\n    cycleTokens(forwards: boolean, reset: boolean): InstanceType<ConfiguredObjectClassForName<'Token'>> | null;\n\n    /**\n     * Add or remove the set of currently controlled Tokens from the active combat encounter\n     * @param  state  - The desired combat state which determines if each Token is added (true) or removed (false)\n     *                  (default: `true`)\n     * @param  combat - A Combat encounter from which to add or remove the Token\n     *                  (default: `null`)\n     * @returns The Combatants added or removed\n     */\n    toggleCombat(\n      state?: boolean,\n      combat?: InstanceType<ConfiguredDocumentClass<typeof Combat>> | null,\n      {\n        token\n      }?: {\n        /**\n         * A specific Token which is the origin of the group toggle request\n         * @defaultValue `null`\n         */\n        token?: InstanceType<ConfiguredObjectClassForName<'Token'>> | null;\n      }\n    ): Promise<InstanceType<ConfiguredDocumentClass<typeof Combatant>>[]>;\n\n    /**\n     * Get the tab cycle order for tokens by sorting observable tokens based on their distance from top-left.\n     */\n    protected _getCycleOrder(): InstanceType<ConfiguredObjectClassForName<'Token'>>[];\n\n    /**\n     * Immediately conclude the animation of any/all tokens\n     */\n    concludeAnimation(): void;\n\n    /**\n     * Handle dropping of Actor data onto the Scene canvas\n     */\n    protected _onDropActorData(\n      event: DragEvent,\n      data: TokenLayer.DropData\n    ): Promise<void | false | InstanceType<ConfiguredObjectClassForName<'Token'>>>;\n\n    protected override _onClickLeft(event: PIXI.InteractionEvent): void;\n  }\n\n  namespace TokenLayer {\n    interface LayerOptions extends PlaceablesLayer.LayerOptions<'Token'> {\n      name: 'tokens';\n      canDragCreate: false;\n      controllableObjects: true;\n      rotatableObjects: true;\n      zIndex: 100;\n    }\n\n    interface DropData extends Canvas.DropPosition {\n      id?: string;\n      type?: 'Actor';\n      pack?: string;\n    }\n  }\n}\n"
    ]
  