
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\common\\data\\data.mjs\\cardData.d.ts",
      "import type {\n  ConfiguredData,\n  ConfiguredFlags,\n  ConfiguredSource,\n  FieldReturnType,\n  PropertiesToSource\n} from '../../../../types/helperTypes';\nimport type DocumentData from '../../abstract/data.mjs';\nimport * as documents from '../../documents.mjs';\nimport * as fields from '../fields.mjs';\nimport type { CardFaceData, CardFaceDataConstructorData } from './cardFaceData';\n\ninterface CardDataSchema extends DocumentSchema {\n  _id: fields.DocumentId;\n  name: fields.RequiredString;\n  description: fields.BlankString;\n  type: FieldReturnType<\n    fields.RequiredString,\n    {\n      default: () => string;\n      validate: (t: unknown) => boolean;\n      validationError: '{name} {field} \"{value}\" is not a valid type';\n    }\n  >;\n  data: fields.SystemDataField;\n  suit: fields.BlankString;\n  value: fields.NumericField;\n  back: DocumentField<CardFaceData> & {\n    type: typeof CardFaceData;\n    required: true;\n    default: Record<string, never>;\n  };\n  faces: DocumentField<CardFaceData[]> & {\n    type: [typeof CardFaceData];\n    required: true;\n    default: [];\n  };\n  face: DocumentField<number> & {\n    type: typeof Number;\n    required: true;\n    default: null;\n    nullable: true;\n    validate: (f: unknown) => boolean;\n    validationError: '{name} {field} \"{value}\" must have a non-negative integer value or null';\n  };\n  drawn: fields.BooleanField;\n  origin: Omit<fields.DocumentId, 'nullable'> & { nullable: true };\n  width: fields.PositiveIntegerField;\n  height: fields.PositiveIntegerField;\n  rotation: fields.AngleField;\n  sort: fields.IntegerSortField;\n  flags: fields.ObjectField;\n}\n\ninterface CardDataBaseProperties {\n  /**\n   * The _id which uniquely identifies this Card document\n   * @defaultValue `null`\n   */\n  _id: string | null;\n\n  /** The text name of this card */\n  name: string;\n\n  /**\n   * A text description of this card which applies to all faces\n   * @defaultValue `\"\"`\n   */\n  description: string;\n\n  /**\n   * A category of card (for example, a suit) to which this card belongs\n   * @defaultValue `game.system.documentTypes.Card[0]`\n   */\n  type: string;\n\n  /**\n   * Game system data which is defined by the system template.json model\n   * @defaultValue template from template.json for type or `{}`\n   */\n  data: object;\n\n  /**\n   * An optional suit designation which is used by default sorting\n   * @defaultValue `\"\"`\n   */\n  suit: string;\n\n  /** An optional numeric value of the card which is used by default sorting */\n  value: number | null | undefined;\n\n  /**\n   * An object of face data which describes the back of this card\n   * @defaultValue `new CardFaceData({})`\n   */\n  back: CardFaceData;\n\n  /**\n   * An array of face data which represent displayable faces of this card\n   * @defaultValue `[]`\n   */\n  faces: CardFaceData[];\n\n  /**\n   * The index of the currently displayed face\n   * @defaultValue `null`\n   */\n  face: number | null;\n\n  /**\n   * Whether this card is currently drawn from its source deck\n   * @defaultValue `false`\n   */\n  drawn: boolean;\n\n  /**\n   * The document ID of the origin deck to which this card belongs\n   * @defaultValue `null`\n   */\n  origin: string | null;\n\n  /** The visible width of this card */\n  width: number | undefined;\n\n  /** The visible height of this card */\n  height: number | undefined;\n\n  /**\n   * The angle of rotation of this card\n   * @defaultValue `360`\n   */\n  rotation: number;\n\n  /**\n   * The sort order of this card relative to others in the same stack\n   * @defaultValue `0`\n   */\n  sort: number;\n\n  /**\n   * An object of optional key/value flags\n   * @defaultValue `{}`\n   */\n  flags: ConfiguredFlags<'Card'>;\n}\n\ninterface CardDataConstructorData {\n  /**\n   * The _id which uniquely identifies this Card document\n   * @defaultValue `null`\n   */\n  _id?: string | null | undefined;\n\n  /** The text name of this card */\n  name: string;\n\n  /**\n   * A text description of this card which applies to all faces\n   * @defaultValue `\"\"`\n   */\n  description?: string | null | undefined;\n\n  /**\n   * A category of card (for example, a suit) to which this card belongs\n   * @defaultValue `game.system.documentTypes.Card[0]`\n   */\n  type?: CardDataSource['type'] | null | undefined;\n\n  /**\n   * Game system data which is defined by the system template.json model\n   * @defaultValue template from template.json for type or `{}`\n   */\n  data?: DeepPartial<CardDataSource['data']> | null | undefined;\n\n  /**\n   * An optional suit designation which is used by default sorting\n   * @defaultValue `\"\"`\n   */\n  suit?: string | null | undefined;\n\n  /** An optional numeric value of the card which is used by default sorting */\n  value?: number | null | undefined;\n\n  /**\n   * An object of face data which describes the back of this card\n   * @defaultValue `new CardFaceData({})`\n   */\n  back?: CardFaceDataConstructorData | null | undefined;\n\n  /**\n   * An array of face data which represent displayable faces of this card\n   * @defaultValue `[]`\n   */\n  faces?: CardFaceDataConstructorData[] | null | undefined;\n\n  /**\n   * The index of the currently displayed face\n   * @defaultValue `null`\n   */\n  face?: number | null | undefined;\n\n  /**\n   * Whether this card is currently drawn from its source deck\n   * @defaultValue `false`\n   */\n  drawn?: boolean | null | undefined;\n\n  /**\n   * The document ID of the origin deck to which this card belongs\n   * @defaultValue `null`\n   */\n  origin?: string | null | undefined;\n\n  /** The visible width of this card */\n  width?: number | null | undefined;\n\n  /** The visible height of this card */\n  height?: number | null | undefined;\n\n  /**\n   * The angle of rotation of this card\n   * @defaultValue `360`\n   */\n  rotation?: number | null | undefined;\n\n  /**\n   * The sort order of this card relative to others in the same stack\n   * @defaultValue `0`\n   */\n  sort?: number | null | undefined;\n\n  /**\n   * An object of optional key/value flags\n   * @defaultValue `{}`\n   */\n  flags?: ConfiguredFlags<'Card'> | null | undefined;\n}\n\ntype CardDataBaseSource = PropertiesToSource<CardDataBaseProperties>;\ntype CardDataProperties = CardDataBaseProperties & ConfiguredData<'Card'>;\ntype CardDataSource = CardDataBaseSource & ConfiguredSource<'Card'>;\n\ntype DocumentDataConstructor = Pick<typeof DocumentData, keyof typeof DocumentData>;\n\ninterface CardDataConstructor extends DocumentDataConstructor {\n  new (data: CardDataConstructorData, document?: documents.BaseCard | null | undefined): CardData;\n\n  defineSchema(): CardDataSchema;\n}\n\n/**\n * The data schema of a single Card document.\n * @see BaseCard\n */\nexport type CardData = DocumentData<\n  CardDataSchema,\n  CardDataProperties,\n  CardDataSource,\n  CardDataConstructorData,\n  documents.BaseCard\n> &\n  CardDataProperties;\n\nexport const CardData: CardDataConstructor;\n"
    ]
  