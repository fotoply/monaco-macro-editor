
    export default [
      "@pixi\\core\\index.d.ts",
      "/// <reference path=\"./global.d.ts\" />\n\nimport { ALPHA_MODES } from '@pixi/constants';\r\nimport type { ArrayFixed } from '@pixi/utils';\r\nimport type { BaseTexture as BaseTexture_2 } from '@pixi/core';\r\nimport { BLEND_MODES } from '@pixi/constants';\r\nimport { BUFFER_BITS } from '@pixi/constants';\r\nimport { BUFFER_TYPE } from '@pixi/constants';\r\nimport { CLEAR_MODES } from '@pixi/constants';\r\nimport type { Dict } from '@pixi/utils';\r\nimport { DRAW_MODES } from '@pixi/constants';\r\nimport { EventEmitter } from '@pixi/utils';\r\nimport { FORMATS } from '@pixi/constants';\r\nimport { GC_MODES } from '@pixi/constants';\r\nimport type { IPointData } from '@pixi/math';\r\nimport { ISize } from '@pixi/math';\r\nimport { ISpriteMaskFilter as ISpriteMaskFilter_2 } from '@pixi/core';\r\nimport { MASK_TYPES } from '@pixi/constants';\r\nimport { Matrix } from '@pixi/math';\r\nimport { MIPMAP_MODES } from '@pixi/constants';\r\nimport { MSAA_QUALITY } from '@pixi/constants';\r\nimport { Point } from '@pixi/math';\r\nimport { Rectangle } from '@pixi/math';\r\nimport { RENDERER_TYPE } from '@pixi/constants';\r\nimport { Runner } from '@pixi/runner';\r\nimport { SCALE_MODES } from '@pixi/constants';\r\nimport { TARGETS } from '@pixi/constants';\r\nimport { TYPES } from '@pixi/constants';\r\nimport { WRAP_MODES } from '@pixi/constants';\r\n\r\n/**\r\n * Renderer dedicated to drawing and batching sprites.\r\n *\r\n * This is the default batch renderer. It buffers objects\r\n * with texture-based geometries and renders them in\r\n * batches. It uploads multiple textures to the GPU to\r\n * reduce to the number of draw calls.\r\n * @memberof PIXI\r\n */\r\nexport declare class AbstractBatchRenderer extends ObjectRenderer {\r\n    /** The WebGL state in which this renderer will work. */\r\n    readonly state: State;\r\n    /**\r\n     * The number of bufferable objects before a flush\r\n     * occurs automatically.\r\n     * @default settings.SPRITE_BATCH_SIZE * 4\r\n     */\r\n    size: number;\r\n    /**\r\n     * Maximum number of textures that can be uploaded to\r\n     * the GPU under the current context. It is initialized\r\n     * properly in `this.contextChange`.\r\n     * @see PIXI.AbstractBatchRenderer#contextChange\r\n     * @readonly\r\n     */\r\n    MAX_TEXTURES: number;\r\n    /**\r\n     * This is used to generate a shader that can\r\n     * color each vertex based on a `aTextureId`\r\n     * attribute that points to an texture in `uSampler`.\r\n     *\r\n     * This enables the objects with different textures\r\n     * to be drawn in the same draw call.\r\n     *\r\n     * You can customize your shader by creating your\r\n     * custom shader generator.\r\n     */\r\n    protected shaderGenerator: BatchShaderGenerator;\r\n    /**\r\n     * The class that represents the geometry of objects\r\n     * that are going to be batched with this.\r\n     * @member {object}\r\n     * @default PIXI.BatchGeometry\r\n     */\r\n    protected geometryClass: typeof BatchGeometry;\r\n    /**\r\n     * Size of data being buffered per vertex in the\r\n     * attribute buffers (in floats). By default, the\r\n     * batch-renderer plugin uses 6:\r\n     *\r\n     * | aVertexPosition | 2 |\r\n     * |-----------------|---|\r\n     * | aTextureCoords  | 2 |\r\n     * | aColor          | 1 |\r\n     * | aTextureId      | 1 |\r\n     * @readonly\r\n     */\r\n    protected vertexSize: number;\r\n    /** Total count of all vertices used by the currently buffered objects. */\r\n    protected _vertexCount: number;\r\n    /** Total count of all indices used by the currently buffered objects. */\r\n    protected _indexCount: number;\r\n    /**\r\n     * Buffer of objects that are yet to be rendered.\r\n     * @member {PIXI.DisplayObject[]}\r\n     */\r\n    protected _bufferedElements: Array<IBatchableElement>;\r\n    /**\r\n     * Data for texture batch builder, helps to save a bit of CPU on a pass.\r\n     * @member {PIXI.BaseTexture[]}\r\n     */\r\n    protected _bufferedTextures: Array<BaseTexture>;\r\n    /** Number of elements that are buffered and are waiting to be flushed. */\r\n    protected _bufferSize: number;\r\n    /**\r\n     * This shader is generated by `this.shaderGenerator`.\r\n     *\r\n     * It is generated specifically to handle the required\r\n     * number of textures being batched together.\r\n     */\r\n    protected _shader: Shader;\r\n    /**\r\n     * A flush may occur multiple times in a single\r\n     * frame. On iOS devices or when\r\n     * `settings.CAN_UPLOAD_SAME_BUFFER` is false, the\r\n     * batch renderer does not upload data to the same\r\n     * `WebGLBuffer` for performance reasons.\r\n     *\r\n     * This is the index into `packedGeometries` that points to\r\n     * geometry holding the most recent buffers.\r\n     */\r\n    protected _flushId: number;\r\n    /**\r\n     * Pool of `ViewableBuffer` objects that are sorted in\r\n     * order of increasing size. The flush method uses\r\n     * the buffer with the least size above the amount\r\n     * it requires. These are used for passing attributes.\r\n     *\r\n     * The first buffer has a size of 8; each subsequent\r\n     * buffer has double capacity of its previous.\r\n     * @member {PIXI.ViewableBuffer[]}\r\n     * @see PIXI.AbstractBatchRenderer#getAttributeBuffer\r\n     */\r\n    protected _aBuffers: Array<ViewableBuffer>;\r\n    /**\r\n     * Pool of `Uint16Array` objects that are sorted in\r\n     * order of increasing size. The flush method uses\r\n     * the buffer with the least size above the amount\r\n     * it requires. These are used for passing indices.\r\n     *\r\n     * The first buffer has a size of 12; each subsequent\r\n     * buffer has double capacity of its previous.\r\n     * @member {Uint16Array[]}\r\n     * @see PIXI.AbstractBatchRenderer#getIndexBuffer\r\n     */\r\n    protected _iBuffers: Array<Uint16Array>;\r\n    protected _dcIndex: number;\r\n    protected _aIndex: number;\r\n    protected _iIndex: number;\r\n    protected _attributeBuffer: ViewableBuffer;\r\n    protected _indexBuffer: Uint16Array;\r\n    protected _tempBoundTextures: BaseTexture[];\r\n    /**\r\n     * Pool of `this.geometryClass` geometry objects\r\n     * that store buffers. They are used to pass data\r\n     * to the shader on each draw call.\r\n     *\r\n     * These are never re-allocated again, unless a\r\n     * context change occurs; however, the pool may\r\n     * be expanded if required.\r\n     * @member {PIXI.Geometry[]}\r\n     * @see PIXI.AbstractBatchRenderer.contextChange\r\n     */\r\n    private _packedGeometries;\r\n    /**\r\n     * Size of `this._packedGeometries`. It can be expanded\r\n     * if more than `this._packedGeometryPoolSize` flushes\r\n     * occur in a single frame.\r\n     */\r\n    private _packedGeometryPoolSize;\r\n    /**\r\n     * This will hook onto the renderer's `contextChange`\r\n     * and `prerender` signals.\r\n     * @param {PIXI.Renderer} renderer - The renderer this works for.\r\n     */\r\n    constructor(renderer: Renderer);\r\n    /**\r\n     * Handles the `contextChange` signal.\r\n     *\r\n     * It calculates `this.MAX_TEXTURES` and allocating the packed-geometry object pool.\r\n     */\r\n    contextChange(): void;\r\n    /** Makes sure that static and dynamic flush pooled objects have correct dimensions. */\r\n    initFlushBuffers(): void;\r\n    /** Handles the `prerender` signal. It ensures that flushes start from the first geometry object again. */\r\n    onPrerender(): void;\r\n    /**\r\n     * Buffers the \"batchable\" object. It need not be rendered immediately.\r\n     * @param {PIXI.DisplayObject} element - the element to render when\r\n     *    using this renderer\r\n     */\r\n    render(element: IBatchableElement): void;\r\n    buildTexturesAndDrawCalls(): void;\r\n    /**\r\n     * Populating drawcalls for rendering\r\n     * @param texArray\r\n     * @param start\r\n     * @param finish\r\n     */\r\n    buildDrawCalls(texArray: BatchTextureArray, start: number, finish: number): void;\r\n    /**\r\n     * Bind textures for current rendering\r\n     * @param texArray\r\n     */\r\n    bindAndClearTexArray(texArray: BatchTextureArray): void;\r\n    updateGeometry(): void;\r\n    drawBatches(): void;\r\n    /** Renders the content _now_ and empties the current batch. */\r\n    flush(): void;\r\n    /** Starts a new sprite batch. */\r\n    start(): void;\r\n    /** Stops and flushes the current batch. */\r\n    stop(): void;\r\n    /** Destroys this `AbstractBatchRenderer`. It cannot be used again. */\r\n    destroy(): void;\r\n    /**\r\n     * Fetches an attribute buffer from `this._aBuffers` that can hold atleast `size` floats.\r\n     * @param size - minimum capacity required\r\n     * @returns - buffer than can hold atleast `size` floats\r\n     */\r\n    getAttributeBuffer(size: number): ViewableBuffer;\r\n    /**\r\n     * Fetches an index buffer from `this._iBuffers` that can\r\n     * have at least `size` capacity.\r\n     * @param size - minimum required capacity\r\n     * @returns - buffer that can fit `size` indices.\r\n     */\r\n    getIndexBuffer(size: number): Uint16Array;\r\n    /**\r\n     * Takes the four batching parameters of `element`, interleaves\r\n     * and pushes them into the batching attribute/index buffers given.\r\n     *\r\n     * It uses these properties: `vertexData` `uvs`, `textureId` and\r\n     * `indicies`. It also uses the \"tint\" of the base-texture, if\r\n     * present.\r\n     * @param {PIXI.DisplayObject} element - element being rendered\r\n     * @param attributeBuffer - attribute buffer.\r\n     * @param indexBuffer - index buffer\r\n     * @param aIndex - number of floats already in the attribute buffer\r\n     * @param iIndex - number of indices already in `indexBuffer`\r\n     */\r\n    packInterleavedGeometry(element: IBatchableElement, attributeBuffer: ViewableBuffer, indexBuffer: Uint16Array, aIndex: number, iIndex: number): void;\r\n    /**\r\n     * Pool of `BatchDrawCall` objects that `flush` used\r\n     * to create \"batches\" of the objects being rendered.\r\n     *\r\n     * These are never re-allocated again.\r\n     * Shared between all batch renderers because it can be only one \"flush\" working at the moment.\r\n     * @member {PIXI.BatchDrawCall[]}\r\n     */\r\n    static _drawCallPool: Array<BatchDrawCall>;\r\n    /**\r\n     * Pool of `BatchDrawCall` objects that `flush` used\r\n     * to create \"batches\" of the objects being rendered.\r\n     *\r\n     * These are never re-allocated again.\r\n     * Shared between all batch renderers because it can be only one \"flush\" working at the moment.\r\n     * @member {PIXI.BatchTextureArray[]}\r\n     */\r\n    static _textureArrayPool: Array<BatchTextureArray>;\r\n}\r\n\r\n/**\r\n * System plugin to the renderer to manage specific types of masking operations.\r\n * @memberof PIXI\r\n */\r\ndeclare class AbstractMaskSystem implements ISystem {\r\n    /**\r\n     * The mask stack\r\n     * @member {PIXI.MaskData[]}\r\n     */\r\n    protected maskStack: Array<MaskData>;\r\n    /**\r\n     * Constant for gl.enable\r\n     * @private\r\n     */\r\n    protected glConst: number;\r\n    protected renderer: Renderer;\r\n    /**\r\n     * @param renderer - The renderer this System works for.\r\n     */\r\n    constructor(renderer: Renderer);\r\n    /** Gets count of masks of certain type. */\r\n    getStackLength(): number;\r\n    /**\r\n     * Changes the mask stack that is used by this System.\r\n     * @param {PIXI.MaskData[]} maskStack - The mask stack\r\n     */\r\n    setMaskStack(maskStack: Array<MaskData>): void;\r\n    /**\r\n     * Setup renderer to use the current mask data.\r\n     * @private\r\n     */\r\n    protected _useCurrent(): void;\r\n    /** Destroys the mask stack. */\r\n    destroy(): void;\r\n}\r\n\r\n/**\r\n * Resource that can manage several resource (items) inside.\r\n * All resources need to have the same pixel size.\r\n * Parent class for CubeResource and ArrayResource\r\n * @memberof PIXI\r\n */\r\nexport declare abstract class AbstractMultiResource extends Resource {\r\n    /** Number of elements in array. */\r\n    readonly length: number;\r\n    /**\r\n     * Collection of partial baseTextures that correspond to resources.\r\n     * @readonly\r\n     */\r\n    items: Array<BaseTexture>;\r\n    /**\r\n     * Dirty IDs for each part.\r\n     * @readonly\r\n     */\r\n    itemDirtyIds: Array<number>;\r\n    /**\r\n     * Promise when loading.\r\n     * @default null\r\n     */\r\n    private _load;\r\n    /** Bound baseTexture, there can only be one. */\r\n    baseTexture: BaseTexture;\r\n    /**\r\n     * @param length\r\n     * @param options - Options to for Resource constructor\r\n     * @param {number} [options.width] - Width of the resource\r\n     * @param {number} [options.height] - Height of the resource\r\n     */\r\n    constructor(length: number, options?: ISize);\r\n    /**\r\n     * Used from ArrayResource and CubeResource constructors.\r\n     * @param resources - Can be resources, image elements, canvas, etc. ,\r\n     *  length should be same as constructor length\r\n     * @param options - Detect options for resources\r\n     */\r\n    protected initFromArray(resources: Array<any>, options?: IAutoDetectOptions): void;\r\n    /** Destroy this BaseImageResource. */\r\n    dispose(): void;\r\n    /**\r\n     * Set a baseTexture by ID\r\n     * @param baseTexture\r\n     * @param index - Zero-based index of resource to set\r\n     * @returns - Instance for chaining\r\n     */\r\n    abstract addBaseTextureAt(baseTexture: BaseTexture, index: number): this;\r\n    /**\r\n     * Set a resource by ID\r\n     * @param resource\r\n     * @param index - Zero-based index of resource to set\r\n     * @returns - Instance for chaining\r\n     */\r\n    addResourceAt(resource: Resource, index: number): this;\r\n    /**\r\n     * Set the parent base texture.\r\n     * @param baseTexture\r\n     */\r\n    bind(baseTexture: BaseTexture): void;\r\n    /**\r\n     * Unset the parent base texture.\r\n     * @param baseTexture\r\n     */\r\n    unbind(baseTexture: BaseTexture): void;\r\n    /**\r\n     * Load all the resources simultaneously\r\n     * @returns - When load is resolved\r\n     */\r\n    load(): Promise<this>;\r\n}\r\n\r\n/**\r\n * The AbstractRenderer is the base for a PixiJS Renderer. It is extended by the {@link PIXI.CanvasRenderer}\r\n * and {@link PIXI.Renderer} which can be used for rendering a PixiJS scene.\r\n * @abstract\r\n * @class\r\n * @extends PIXI.utils.EventEmitter\r\n * @memberof PIXI\r\n */\r\nexport declare abstract class AbstractRenderer extends EventEmitter {\r\n    resolution: number;\r\n    clearBeforeRender?: boolean;\r\n    readonly options: IRendererOptions;\r\n    readonly type: RENDERER_TYPE;\r\n    readonly screen: Rectangle;\r\n    readonly view: HTMLCanvasElement;\r\n    readonly plugins: IRendererPlugins;\r\n    readonly useContextAlpha: boolean | 'notMultiplied';\r\n    readonly autoDensity: boolean;\r\n    readonly preserveDrawingBuffer: boolean;\r\n    protected _backgroundColor: number;\r\n    protected _backgroundColorString: string;\r\n    _backgroundColorRgba: number[];\r\n    _lastObjectRendered: IRenderableObject;\r\n    /**\r\n     * @param type - The renderer type.\r\n     * @param [options] - The optional renderer parameters.\r\n     * @param {number} [options.width=800] - The width of the screen.\r\n     * @param {number} [options.height=600] - The height of the screen.\r\n     * @param {HTMLCanvasElement} [options.view] - The canvas to use as a view, optional.\r\n     * @param {boolean} [options.useContextAlpha=true] - Pass-through value for canvas' context `alpha` property.\r\n     *   If you want to set transparency, please use `backgroundAlpha`. This option is for cases where the\r\n     *   canvas needs to be opaque, possibly for performance reasons on some older devices.\r\n     * @param {boolean} [options.autoDensity=false] - Resizes renderer view in CSS pixels to allow for\r\n     *   resolutions other than 1.\r\n     * @param {boolean} [options.antialias=false] - Sets antialias\r\n     * @param {number} [options.resolution=PIXI.settings.RESOLUTION] - The resolution / device pixel ratio of the renderer.\r\n     * @param {boolean} [options.preserveDrawingBuffer=false] - Enables drawing buffer preservation,\r\n     *  enable this if you need to call toDataUrl on the WebGL context.\r\n     * @param {boolean} [options.clearBeforeRender=true] - This sets if the renderer will clear the canvas or\r\n     *      not before the new render pass.\r\n     * @param {number} [options.backgroundColor=0x000000] - The background color of the rendered area\r\n     *  (shown if not transparent).\r\n     * @param {number} [options.backgroundAlpha=1] - Value from 0 (fully transparent) to 1 (fully opaque).\r\n     */\r\n    constructor(type?: RENDERER_TYPE, options?: IRendererOptions);\r\n    /**\r\n     * Initialize the plugins.\r\n     * @protected\r\n     * @param {object} staticMap - The dictionary of statically saved plugins.\r\n     */\r\n    initPlugins(staticMap: IRendererPlugins): void;\r\n    /**\r\n     * Same as view.width, actual number of pixels in the canvas by horizontal.\r\n     * @member {number}\r\n     * @readonly\r\n     * @default 800\r\n     */\r\n    get width(): number;\r\n    /**\r\n     * Same as view.height, actual number of pixels in the canvas by vertical.\r\n     * @member {number}\r\n     * @readonly\r\n     * @default 600\r\n     */\r\n    get height(): number;\r\n    /**\r\n     * Resizes the screen and canvas as close as possible to the specified width and height.\r\n     * Canvas dimensions are multiplied by resolution and rounded to the nearest integers.\r\n     * The new canvas dimensions divided by the resolution become the new screen dimensions.\r\n     * @param desiredScreenWidth - The desired width of the screen.\r\n     * @param desiredScreenHeight - The desired height of the screen.\r\n     */\r\n    resize(desiredScreenWidth: number, desiredScreenHeight: number): void;\r\n    /**\r\n     * Useful function that returns a texture of the display object that can then be used to create sprites\r\n     * This can be quite useful if your displayObject is complicated and needs to be reused multiple times.\r\n     * @method PIXI.AbstractRenderer#generateTexture\r\n     * @param displayObject - The displayObject the object will be generated from.\r\n     * @param {object} options - Generate texture options.\r\n     * @param {PIXI.SCALE_MODES} options.scaleMode - The scale mode of the texture.\r\n     * @param {number} options.resolution - The resolution / device pixel ratio of the texture being generated.\r\n     * @param {PIXI.Rectangle} options.region - The region of the displayObject, that shall be rendered,\r\n     *        if no region is specified, defaults to the local bounds of the displayObject.\r\n     * @param {PIXI.MSAA_QUALITY} options.multisample - The number of samples of the frame buffer.\r\n     * @returns A texture of the graphics object.\r\n     */\r\n    generateTexture(displayObject: IRenderableObject, options?: IGenerateTextureOptions): RenderTexture;\r\n    /**\r\n     * Please use the options argument instead.\r\n     * @method PIXI.AbstractRenderer#generateTexture\r\n     * @deprecated Since 6.1.0\r\n     * @param displayObject - The displayObject the object will be generated from.\r\n     * @param scaleMode - The scale mode of the texture.\r\n     * @param resolution - The resolution / device pixel ratio of the texture being generated.\r\n     * @param region - The region of the displayObject, that shall be rendered,\r\n     *        if no region is specified, defaults to the local bounds of the displayObject.\r\n     * @returns A texture of the graphics object.\r\n     */\r\n    generateTexture(displayObject: IRenderableObject, scaleMode?: SCALE_MODES, resolution?: number, region?: Rectangle): RenderTexture;\r\n    /**\r\n     * Adds a new system to the renderer.\r\n     * @param ClassRef - Class reference\r\n     * @param name - Property name for system\r\n     * @returns Return instance of renderer\r\n     */\r\n    abstract addSystem(ClassRef: ISystemConstructor, name: string): this;\r\n    abstract render(displayObject: IRenderableObject, options?: IRendererRenderOptions): void;\r\n    /**\r\n     * Removes everything from the renderer and optionally removes the Canvas DOM element.\r\n     * @param [removeView=false] - Removes the Canvas element from the DOM.\r\n     */\r\n    destroy(removeView?: boolean): void;\r\n    /**\r\n     * The background color to fill if not transparent\r\n     * @member {number}\r\n     */\r\n    get backgroundColor(): number;\r\n    set backgroundColor(value: number);\r\n    /**\r\n     * The background color alpha. Setting this to 0 will make the canvas transparent.\r\n     * @member {number}\r\n     */\r\n    get backgroundAlpha(): number;\r\n    set backgroundAlpha(value: number);\r\n}\r\n\r\n/**\r\n * A resource that contains a number of sources.\r\n * @memberof PIXI\r\n */\r\nexport declare class ArrayResource extends AbstractMultiResource {\r\n    /**\r\n     * @param source - Number of items in array or the collection\r\n     *        of image URLs to use. Can also be resources, image elements, canvas, etc.\r\n     * @param options - Options to apply to {@link PIXI.autoDetectResource}\r\n     * @param {number} [options.width] - Width of the resource\r\n     * @param {number} [options.height] - Height of the resource\r\n     */\r\n    constructor(source: number | Array<any>, options?: ISize);\r\n    /**\r\n     * Set a baseTexture by ID,\r\n     * ArrayResource just takes resource from it, nothing more\r\n     * @param baseTexture\r\n     * @param index - Zero-based index of resource to set\r\n     * @returns - Instance for chaining\r\n     */\r\n    addBaseTextureAt(baseTexture: BaseTexture, index: number): this;\r\n    /**\r\n     * Add binding\r\n     * @param baseTexture\r\n     */\r\n    bind(baseTexture: BaseTexture): void;\r\n    /**\r\n     * Upload the resources to the GPU.\r\n     * @param renderer\r\n     * @param texture\r\n     * @param glTexture\r\n     * @returns - whether texture was uploaded\r\n     */\r\n    upload(renderer: Renderer, texture: BaseTexture, glTexture: GLTexture): boolean;\r\n}\r\n\r\n/**\r\n * Holds the information for a single attribute structure required to render geometry.\r\n *\r\n * This does not contain the actual data, but instead has a buffer id that maps to a {@link PIXI.Buffer}\r\n * This can include anything from positions, uvs, normals, colors etc.\r\n * @memberof PIXI\r\n */\r\nexport declare class Attribute {\r\n    buffer: number;\r\n    size: number;\r\n    normalized: boolean;\r\n    type: TYPES;\r\n    stride: number;\r\n    start: number;\r\n    instance: boolean;\r\n    /**\r\n     * @param buffer - the id of the buffer that this attribute will look for\r\n     * @param size - the size of the attribute. If you have 2 floats per vertex (eg position x and y) this would be 2.\r\n     * @param normalized - should the data be normalized.\r\n     * @param {PIXI.TYPES} [type=PIXI.TYPES.FLOAT] - what type of number is the attribute. Check {@link PIXI.TYPES} to see the ones available\r\n     * @param [stride=0] - How far apart, in bytes, the start of each value is. (used for interleaving data)\r\n     * @param [start=0] - How far into the array to start reading values (used for interleaving data)\r\n     * @param [instance=false] - Whether the geometry is instanced.\r\n     */\r\n    constructor(buffer: number, size?: number, normalized?: boolean, type?: TYPES, stride?: number, start?: number, instance?: boolean);\r\n    /** Destroys the Attribute. */\r\n    destroy(): void;\r\n    /**\r\n     * Helper function that creates an Attribute based on the information provided\r\n     * @param buffer - the id of the buffer that this attribute will look for\r\n     * @param [size=0] - the size of the attribute. If you have 2 floats per vertex (eg position x and y) this would be 2\r\n     * @param [normalized=false] - should the data be normalized.\r\n     * @param [type=PIXI.TYPES.FLOAT] - what type of number is the attribute. Check {@link PIXI.TYPES} to see the ones available\r\n     * @param [stride=0] - How far apart, in bytes, the start of each value is. (used for interleaving data)\r\n     * @returns - A new {@link PIXI.Attribute} based on the information provided\r\n     */\r\n    static from(buffer: number, size?: number, normalized?: boolean, type?: TYPES, stride?: number): Attribute;\r\n}\r\n\r\n/**\r\n * This helper function will automatically detect which renderer you should be using.\r\n * WebGL is the preferred renderer as it is a lot faster. If WebGL is not supported by\r\n * the browser then this function will return a canvas renderer\r\n * @memberof PIXI\r\n * @function autoDetectRenderer\r\n * @param {object} [options] - The optional renderer parameters\r\n * @param {number} [options.width=800] - the width of the renderers view\r\n * @param {number} [options.height=600] - the height of the renderers view\r\n * @param {HTMLCanvasElement} [options.view] - the canvas to use as a view, optional\r\n * @param {boolean} [options.useContextAlpha=true] - Pass-through value for canvas' context `alpha` property.\r\n *   If you want to set transparency, please use `backgroundAlpha`. This option is for cases where the\r\n *   canvas needs to be opaque, possibly for performance reasons on some older devices.\r\n * @param {boolean} [options.autoDensity=false] - Resizes renderer view in CSS pixels to allow for\r\n *   resolutions other than 1\r\n * @param {boolean} [options.antialias=false] - sets antialias\r\n * @param {boolean} [options.preserveDrawingBuffer=false] - enables drawing buffer preservation, enable this if you\r\n *  need to call toDataUrl on the webgl context\r\n * @param {number} [options.backgroundColor=0x000000] - The background color of the rendered area\r\n *  (shown if not transparent).\r\n * @param {number} [options.backgroundAlpha=1] - Value from 0 (fully transparent) to 1 (fully opaque).\r\n * @param {boolean} [options.clearBeforeRender=true] - This sets if the renderer will clear the canvas or\r\n *   not before the new render pass.\r\n * @param {number} [options.resolution=PIXI.settings.RESOLUTION] - The resolution / device pixel ratio of the renderer.\r\n * @param {boolean} [options.forceCanvas=false] - prevents selection of WebGL renderer, even if such is present, this\r\n *   option only is available when using **pixi.js-legacy** or **@pixi/canvas-renderer** modules, otherwise\r\n *   it is ignored.\r\n * @param {string} [options.powerPreference] - Parameter passed to webgl context, set to \"high-performance\"\r\n *  for devices with dual graphics card **webgl only**\r\n * @returns {PIXI.Renderer|PIXI.CanvasRenderer} Returns WebGL renderer if available, otherwise CanvasRenderer\r\n */\r\nexport declare function autoDetectRenderer(options?: IRendererOptionsAuto): AbstractRenderer;\r\n\r\n/**\r\n * Create a resource element from a single source element. This\r\n * auto-detects which type of resource to create. All resources that\r\n * are auto-detectable must have a static `test` method and a constructor\r\n * with the arguments `(source, options?)`. Currently, the supported\r\n * resources for auto-detection include:\r\n *  - {@link PIXI.ImageResource}\r\n *  - {@link PIXI.CanvasResource}\r\n *  - {@link PIXI.VideoResource}\r\n *  - {@link PIXI.SVGResource}\r\n *  - {@link PIXI.BufferResource}\r\n * @static\r\n * @memberof PIXI\r\n * @function autoDetectResource\r\n * @param {string|*} source - Resource source, this can be the URL to the resource,\r\n *        a typed-array (for BufferResource), HTMLVideoElement, SVG data-uri\r\n *        or any other resource that can be auto-detected. If not resource is\r\n *        detected, it's assumed to be an ImageResource.\r\n * @param {object} [options] - Pass-through options to use for Resource\r\n * @param {number} [options.width] - Width of BufferResource or SVG rasterization\r\n * @param {number} [options.height] - Height of BufferResource or SVG rasterization\r\n * @param {boolean} [options.autoLoad=true] - Image, SVG and Video flag to start loading\r\n * @param {number} [options.scale=1] - SVG source scale. Overridden by width, height\r\n * @param {boolean} [options.createBitmap=PIXI.settings.CREATE_IMAGE_BITMAP] - Image option to create Bitmap object\r\n * @param {boolean} [options.crossorigin=true] - Image and Video option to set crossOrigin\r\n * @param {boolean} [options.autoPlay=true] - Video option to start playing video immediately\r\n * @param {number} [options.updateFPS=0] - Video option to update how many times a second the\r\n *        texture should be updated from the video. Leave at 0 to update at every render\r\n * @returns {PIXI.Resource} The created resource.\r\n */\r\nexport declare function autoDetectResource<R extends Resource, RO>(source: unknown, options?: RO): R;\r\n\r\n/**\r\n * Base for all the image/canvas resources.\r\n * @memberof PIXI\r\n */\r\nexport declare class BaseImageResource extends Resource {\r\n    /**\r\n     * The source element.\r\n     * @member {HTMLImageElement|HTMLCanvasElement|HTMLVideoElement|SVGElement}\r\n     * @readonly\r\n     */\r\n    source: ImageSource;\r\n    /**\r\n     * If set to `true`, will force `texImage2D` over `texSubImage2D` for uploading.\r\n     * Certain types of media (e.g. video) using `texImage2D` is more performant.\r\n     * @default false\r\n     * @private\r\n     */\r\n    noSubImage: boolean;\r\n    /**\r\n     * @param {HTMLImageElement|HTMLCanvasElement|HTMLVideoElement|SVGElement} source\r\n     */\r\n    constructor(source: ImageSource);\r\n    /**\r\n     * Set cross origin based detecting the url and the crossorigin\r\n     * @param element - Element to apply crossOrigin\r\n     * @param url - URL to check\r\n     * @param crossorigin - Cross origin value to use\r\n     */\r\n    static crossOrigin(element: HTMLImageElement | HTMLVideoElement, url: string, crossorigin?: boolean | string): void;\r\n    /**\r\n     * Upload the texture to the GPU.\r\n     * @param renderer - Upload to the renderer\r\n     * @param baseTexture - Reference to parent texture\r\n     * @param glTexture\r\n     * @param {HTMLImageElement|HTMLCanvasElement|HTMLVideoElement|SVGElement} [source] - (optional)\r\n     * @returns - true is success\r\n     */\r\n    upload(renderer: Renderer, baseTexture: BaseTexture, glTexture: GLTexture, source?: ImageSource): boolean;\r\n    /**\r\n     * Checks if source width/height was changed, resize can cause extra baseTexture update.\r\n     * Triggers one update in any case.\r\n     */\r\n    update(): void;\r\n    /** Destroy this {@link BaseImageResource} */\r\n    dispose(): void;\r\n}\r\n\r\nexport declare interface BaseRenderTexture extends GlobalMixins.BaseRenderTexture, BaseTexture {\r\n}\r\n\r\n/**\r\n * A BaseRenderTexture is a special texture that allows any PixiJS display object to be rendered to it.\r\n *\r\n * __Hint__: All DisplayObjects (i.e. Sprites) that render to a BaseRenderTexture should be preloaded\r\n * otherwise black rectangles will be drawn instead.\r\n *\r\n * A BaseRenderTexture takes a snapshot of any Display Object given to its render method. The position\r\n * and rotation of the given Display Objects is ignored. For example:\r\n *\r\n * ```js\r\n * let renderer = PIXI.autoDetectRenderer();\r\n * let baseRenderTexture = new PIXI.BaseRenderTexture({ width: 800, height: 600 });\r\n * let renderTexture = new PIXI.RenderTexture(baseRenderTexture);\r\n * let sprite = PIXI.Sprite.from(\"spinObj_01.png\");\r\n *\r\n * sprite.position.x = 800/2;\r\n * sprite.position.y = 600/2;\r\n * sprite.anchor.x = 0.5;\r\n * sprite.anchor.y = 0.5;\r\n *\r\n * renderer.render(sprite, {renderTexture});\r\n * ```\r\n *\r\n * The Sprite in this case will be rendered using its local transform. To render this sprite at 0,0\r\n * you can clear the transform\r\n *\r\n * ```js\r\n *\r\n * sprite.setTransform()\r\n *\r\n * let baseRenderTexture = new PIXI.BaseRenderTexture({ width: 100, height: 100 });\r\n * let renderTexture = new PIXI.RenderTexture(baseRenderTexture);\r\n *\r\n * renderer.render(sprite, {renderTexture});  // Renders to center of RenderTexture\r\n * ```\r\n * @memberof PIXI\r\n */\r\nexport declare class BaseRenderTexture extends BaseTexture {\r\n    clearColor: number[];\r\n    framebuffer: Framebuffer;\r\n    /** The data structure for the stencil masks. */\r\n    maskStack: Array<MaskData>;\r\n    /** The data structure for the filters. */\r\n    filterStack: Array<any>;\r\n    /**\r\n     * @param options\r\n     * @param {number} [options.width=100] - The width of the base render texture.\r\n     * @param {number} [options.height=100] - The height of the base render texture.\r\n     * @param {PIXI.SCALE_MODES} [options.scaleMode=PIXI.settings.SCALE_MODE] - See {@link PIXI.SCALE_MODES}\r\n     *   for possible values.\r\n     * @param {number} [options.resolution=PIXI.settings.RESOLUTION] - The resolution / device pixel ratio\r\n     *   of the texture being generated.\r\n     * @param {PIXI.MSAA_QUALITY} [options.multisample=PIXI.MSAA_QUALITY.NONE] - The number of samples of the frame buffer.\r\n     */\r\n    constructor(options?: IBaseTextureOptions);\r\n    /**\r\n     * Resizes the BaseRenderTexture.\r\n     * @param desiredWidth - The desired width to resize to.\r\n     * @param desiredHeight - The desired height to resize to.\r\n     */\r\n    resize(desiredWidth: number, desiredHeight: number): void;\r\n    /**\r\n     * Frees the texture and framebuffer from WebGL memory without destroying this texture object.\r\n     * This means you can still use the texture later which will upload it to GPU\r\n     * memory again.\r\n     * @fires PIXI.BaseTexture#dispose\r\n     */\r\n    dispose(): void;\r\n    /** Destroys this texture. */\r\n    destroy(): void;\r\n}\r\n\r\nexport declare interface BaseTexture extends GlobalMixins.BaseTexture, EventEmitter {\r\n}\r\n\r\n/**\r\n * A Texture stores the information that represents an image.\r\n * All textures have a base texture, which contains information about the source.\r\n * Therefore you can have many textures all using a single BaseTexture\r\n * @memberof PIXI\r\n * @typeParam R - The BaseTexture's Resource type.\r\n * @typeParam RO - The options for constructing resource.\r\n */\r\nexport declare class BaseTexture<R extends Resource = Resource, RO = IAutoDetectOptions> extends EventEmitter {\r\n    /**\r\n     * The width of the base texture set when the image has loaded\r\n     * @readonly\r\n     */\r\n    width: number;\r\n    /**\r\n     * The height of the base texture set when the image has loaded\r\n     * @readonly\r\n     */\r\n    height: number;\r\n    /**\r\n     * The resolution / device pixel ratio of the texture\r\n     * @readonly\r\n     * @default PIXI.settings.RESOLUTION\r\n     */\r\n    resolution: number;\r\n    /**\r\n     * How to treat premultiplied alpha, see {@link PIXI.ALPHA_MODES}.\r\n     * @member {PIXI.ALPHA_MODES}\r\n     * @default PIXI.ALPHA_MODES.UNPACK\r\n     */\r\n    alphaMode?: ALPHA_MODES;\r\n    /**\r\n     * Anisotropic filtering level of texture\r\n     * @member {number}\r\n     * @default PIXI.settings.ANISOTROPIC_LEVEL\r\n     */\r\n    anisotropicLevel?: number;\r\n    /**\r\n     * The pixel format of the texture\r\n     * @default PIXI.FORMATS.RGBA\r\n     */\r\n    format?: FORMATS;\r\n    /**\r\n     * The type of resource data\r\n     * @default PIXI.TYPES.UNSIGNED_BYTE\r\n     */\r\n    type?: TYPES;\r\n    /**\r\n     * The target type\r\n     * @default PIXI.TARGETS.TEXTURE_2D\r\n     */\r\n    target?: TARGETS;\r\n    /**\r\n     * Global unique identifier for this BaseTexture\r\n     * @protected\r\n     */\r\n    readonly uid: number;\r\n    /**\r\n     * Used by automatic texture Garbage Collection, stores last GC tick when it was bound\r\n     * @protected\r\n     */\r\n    touched: number;\r\n    /**\r\n     * Whether or not the texture is a power of two, try to use power of two textures as much\r\n     * as you can\r\n     * @readonly\r\n     * @default false\r\n     */\r\n    isPowerOfTwo: boolean;\r\n    /**\r\n     * The map of render context textures where this is bound\r\n     * @private\r\n     */\r\n    _glTextures: {\r\n        [key: number]: GLTexture;\r\n    };\r\n    /**\r\n     * Used by TextureSystem to only update texture to the GPU when needed.\r\n     * Please call `update()` to increment it.\r\n     * @readonly\r\n     */\r\n    dirtyId: number;\r\n    /**\r\n     * Used by TextureSystem to only update texture style when needed.\r\n     * @protected\r\n     */\r\n    dirtyStyleId: number;\r\n    /**\r\n     * Currently default cache ID.\r\n     * @member {string}\r\n     */\r\n    cacheId: string;\r\n    /**\r\n     * Generally speaking means when resource is loaded.\r\n     * @readonly\r\n     * @member {boolean}\r\n     */\r\n    valid: boolean;\r\n    /**\r\n     * The collection of alternative cache ids, since some BaseTextures\r\n     * can have more than one ID, short name and longer full URL\r\n     * @member {Array<string>}\r\n     * @readonly\r\n     */\r\n    textureCacheIds: Array<string>;\r\n    /**\r\n     * Flag if BaseTexture has been destroyed.\r\n     * @member {boolean}\r\n     * @readonly\r\n     */\r\n    destroyed: boolean;\r\n    /**\r\n     * The resource used by this BaseTexture, there can only\r\n     * be one resource per BaseTexture, but textures can share\r\n     * resources.\r\n     * @member {PIXI.Resource}\r\n     * @readonly\r\n     */\r\n    resource: R;\r\n    /**\r\n     * Number of the texture batch, used by multi-texture renderers\r\n     * @member {number}\r\n     */\r\n    _batchEnabled: number;\r\n    /**\r\n     * Location inside texture batch, used by multi-texture renderers\r\n     * @member {number}\r\n     */\r\n    _batchLocation: number;\r\n    /**\r\n     * Whether its a part of another texture, handled by ArrayResource or CubeResource\r\n     * @member {PIXI.BaseTexture}\r\n     */\r\n    parentTextureArray: BaseTexture;\r\n    private _mipmap?;\r\n    private _scaleMode?;\r\n    private _wrapMode?;\r\n    /**\r\n     * @param {PIXI.Resource|string|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement} [resource=null] -\r\n     *        The current resource to use, for things that aren't Resource objects, will be converted\r\n     *        into a Resource.\r\n     * @param options - Collection of options\r\n     * @param {PIXI.MIPMAP_MODES} [options.mipmap=PIXI.settings.MIPMAP_TEXTURES] - If mipmapping is enabled for texture\r\n     * @param {number} [options.anisotropicLevel=PIXI.settings.ANISOTROPIC_LEVEL] - Anisotropic filtering level of texture\r\n     * @param {PIXI.WRAP_MODES} [options.wrapMode=PIXI.settings.WRAP_MODE] - Wrap mode for textures\r\n     * @param {PIXI.SCALE_MODES} [options.scaleMode=PIXI.settings.SCALE_MODE] - Default scale mode, linear, nearest\r\n     * @param {PIXI.FORMATS} [options.format=PIXI.FORMATS.RGBA] - GL format type\r\n     * @param {PIXI.TYPES} [options.type=PIXI.TYPES.UNSIGNED_BYTE] - GL data type\r\n     * @param {PIXI.TARGETS} [options.target=PIXI.TARGETS.TEXTURE_2D] - GL texture target\r\n     * @param {PIXI.ALPHA_MODES} [options.alphaMode=PIXI.ALPHA_MODES.UNPACK] - Pre multiply the image alpha\r\n     * @param {number} [options.width=0] - Width of the texture\r\n     * @param {number} [options.height=0] - Height of the texture\r\n     * @param {number} [options.resolution=PIXI.settings.RESOLUTION] - Resolution of the base texture\r\n     * @param {object} [options.resourceOptions] - Optional resource options,\r\n     *        see {@link PIXI.autoDetectResource autoDetectResource}\r\n     */\r\n    constructor(resource?: R | ImageSource | string | any, options?: IBaseTextureOptions<RO>);\r\n    /**\r\n     * Pixel width of the source of this texture\r\n     * @readonly\r\n     */\r\n    get realWidth(): number;\r\n    /**\r\n     * Pixel height of the source of this texture\r\n     * @readonly\r\n     */\r\n    get realHeight(): number;\r\n    /**\r\n     * Mipmap mode of the texture, affects downscaled images\r\n     * @default PIXI.settings.MIPMAP_TEXTURES\r\n     */\r\n    get mipmap(): MIPMAP_MODES;\r\n    set mipmap(value: MIPMAP_MODES);\r\n    /**\r\n     * The scale mode to apply when scaling this texture\r\n     * @default PIXI.settings.SCALE_MODE\r\n     */\r\n    get scaleMode(): SCALE_MODES;\r\n    set scaleMode(value: SCALE_MODES);\r\n    /**\r\n     * How the texture wraps\r\n     * @default PIXI.settings.WRAP_MODE\r\n     */\r\n    get wrapMode(): WRAP_MODES;\r\n    set wrapMode(value: WRAP_MODES);\r\n    /**\r\n     * Changes style options of BaseTexture\r\n     * @param scaleMode - Pixi scalemode\r\n     * @param mipmap - enable mipmaps\r\n     * @returns - this\r\n     */\r\n    setStyle(scaleMode?: SCALE_MODES, mipmap?: MIPMAP_MODES): this;\r\n    /**\r\n     * Changes w/h/resolution. Texture becomes valid if width and height are greater than zero.\r\n     * @param desiredWidth - Desired visual width\r\n     * @param desiredHeight - Desired visual height\r\n     * @param resolution - Optionally set resolution\r\n     * @returns - this\r\n     */\r\n    setSize(desiredWidth: number, desiredHeight: number, resolution?: number): this;\r\n    /**\r\n     * Sets real size of baseTexture, preserves current resolution.\r\n     * @param realWidth - Full rendered width\r\n     * @param realHeight - Full rendered height\r\n     * @param resolution - Optionally set resolution\r\n     * @returns - this\r\n     */\r\n    setRealSize(realWidth: number, realHeight: number, resolution?: number): this;\r\n    /**\r\n     * Refresh check for isPowerOfTwo texture based on size\r\n     * @private\r\n     */\r\n    protected _refreshPOT(): void;\r\n    /**\r\n     * Changes resolution\r\n     * @param resolution - res\r\n     * @returns - this\r\n     */\r\n    setResolution(resolution: number): this;\r\n    /**\r\n     * Sets the resource if it wasn't set. Throws error if resource already present\r\n     * @param resource - that is managing this BaseTexture\r\n     * @returns - this\r\n     */\r\n    setResource(resource: R): this;\r\n    /** Invalidates the object. Texture becomes valid if width and height are greater than zero. */\r\n    update(): void;\r\n    /**\r\n     * Handle errors with resources.\r\n     * @private\r\n     * @param event - Error event emitted.\r\n     */\r\n    onError(event: ErrorEvent): void;\r\n    /**\r\n     * Destroys this base texture.\r\n     * The method stops if resource doesn't want this texture to be destroyed.\r\n     * Removes texture from all caches.\r\n     */\r\n    destroy(): void;\r\n    /**\r\n     * Frees the texture from WebGL memory without destroying this texture object.\r\n     * This means you can still use the texture later which will upload it to GPU\r\n     * memory again.\r\n     * @fires PIXI.BaseTexture#dispose\r\n     */\r\n    dispose(): void;\r\n    /** Utility function for BaseTexture|Texture cast. */\r\n    castToBaseTexture(): BaseTexture;\r\n    /**\r\n     * Helper function that creates a base texture based on the source you provide.\r\n     * The source can be - image url, image element, canvas element. If the\r\n     * source is an image url or an image element and not in the base texture\r\n     * cache, it will be created and loaded.\r\n     * @static\r\n     * @param {string|string[]|HTMLImageElement|HTMLCanvasElement|SVGElement|HTMLVideoElement} source - The\r\n     *        source to create base texture from.\r\n     * @param options - See {@link PIXI.BaseTexture}'s constructor for options.\r\n     * @param {string} [options.pixiIdPrefix=pixiid] - If a source has no id, this is the prefix of the generated id\r\n     * @param {boolean} [strict] - Enforce strict-mode, see {@link PIXI.settings.STRICT_TEXTURE_CACHE}.\r\n     * @returns {PIXI.BaseTexture} The new base texture.\r\n     */\r\n    static from<R extends Resource = Resource, RO = IAutoDetectOptions>(source: ImageSource | string | string[], options?: IBaseTextureOptions<RO>, strict?: boolean): BaseTexture<R>;\r\n    /**\r\n     * Create a new BaseTexture with a BufferResource from a Float32Array.\r\n     * RGBA values are floats from 0 to 1.\r\n     * @param {Float32Array|Uint8Array} buffer - The optional array to use, if no data\r\n     *        is provided, a new Float32Array is created.\r\n     * @param width - Width of the resource\r\n     * @param height - Height of the resource\r\n     * @param options - See {@link PIXI.BaseTexture}'s constructor for options.\r\n     * @returns - The resulting new BaseTexture\r\n     */\r\n    static fromBuffer(buffer: Float32Array | Uint8Array, width: number, height: number, options?: IBaseTextureOptions): BaseTexture<BufferResource>;\r\n    /**\r\n     * Adds a BaseTexture to the global BaseTextureCache. This cache is shared across the whole PIXI object.\r\n     * @param {PIXI.BaseTexture} baseTexture - The BaseTexture to add to the cache.\r\n     * @param {string} id - The id that the BaseTexture will be stored against.\r\n     */\r\n    static addToCache(baseTexture: BaseTexture, id: string): void;\r\n    /**\r\n     * Remove a BaseTexture from the global BaseTextureCache.\r\n     * @param {string|PIXI.BaseTexture} baseTexture - id of a BaseTexture to be removed, or a BaseTexture instance itself.\r\n     * @returns {PIXI.BaseTexture|null} The BaseTexture that was removed.\r\n     */\r\n    static removeFromCache(baseTexture: string | BaseTexture): BaseTexture | null;\r\n    /** Global number of the texture batch, used by multi-texture renderers. */\r\n    static _globalBatch: number;\r\n}\r\n\r\n/**\r\n * Used by the batcher to draw batches.\r\n * Each one of these contains all information required to draw a bound geometry.\r\n * @memberof PIXI\r\n */\r\nexport declare class BatchDrawCall {\r\n    texArray: BatchTextureArray;\r\n    type: DRAW_MODES;\r\n    blend: BLEND_MODES;\r\n    start: number;\r\n    size: number;\r\n    /** Data for uniforms or custom webgl state. */\r\n    data: any;\r\n    constructor();\r\n}\r\n\r\n/**\r\n * Geometry used to batch standard PIXI content (e.g. Mesh, Sprite, Graphics objects).\r\n * @memberof PIXI\r\n */\r\nexport declare class BatchGeometry extends Geometry {\r\n    /**\r\n     * Buffer used for position, color, texture IDs\r\n     * @protected\r\n     */\r\n    _buffer: Buffer_2;\r\n    /**\r\n     * Index buffer data\r\n     * @protected\r\n     */\r\n    _indexBuffer: Buffer_2;\r\n    /**\r\n     * @param {boolean} [_static=false] - Optimization flag, where `false`\r\n     *        is updated every frame, `true` doesn't change frame-to-frame.\r\n     */\r\n    constructor(_static?: boolean);\r\n}\r\n\r\n/** @memberof PIXI */\r\nexport declare class BatchPluginFactory {\r\n    /**\r\n     * Create a new BatchRenderer plugin for Renderer. this convenience can provide an easy way\r\n     * to extend BatchRenderer with all the necessary pieces.\r\n     * @example\r\n     * const fragment = `\r\n     * varying vec2 vTextureCoord;\r\n     * varying vec4 vColor;\r\n     * varying float vTextureId;\r\n     * uniform sampler2D uSamplers[%count%];\r\n     *\r\n     * void main(void){\r\n     *     vec4 color;\r\n     *     %forloop%\r\n     *     gl_FragColor = vColor * vec4(color.a - color.rgb, color.a);\r\n     * }\r\n     * `;\r\n     * const InvertBatchRenderer = PIXI.BatchPluginFactory.create({ fragment });\r\n     * PIXI.Renderer.registerPlugin('invert', InvertBatchRenderer);\r\n     * const sprite = new PIXI.Sprite();\r\n     * sprite.pluginName = 'invert';\r\n     * @param {object} [options]\r\n     * @param {string} [options.vertex=PIXI.BatchPluginFactory.defaultVertexSrc] - Vertex shader source\r\n     * @param {string} [options.fragment=PIXI.BatchPluginFactory.defaultFragmentTemplate] - Fragment shader template\r\n     * @param {number} [options.vertexSize=6] - Vertex size\r\n     * @param {object} [options.geometryClass=PIXI.BatchGeometry]\r\n     * @returns {*} New batch renderer plugin\r\n     */\r\n    static create(options?: IBatchFactoryOptions): typeof AbstractBatchRenderer;\r\n    /**\r\n     * The default vertex shader source\r\n     * @readonly\r\n     */\r\n    static get defaultVertexSrc(): string;\r\n    /**\r\n     * The default fragment shader source\r\n     * @readonly\r\n     */\r\n    static get defaultFragmentTemplate(): string;\r\n}\r\n\r\nexport declare const BatchRenderer: typeof AbstractBatchRenderer;\r\n\r\n/**\r\n * Helper that generates batching multi-texture shader. Use it with your new BatchRenderer\r\n * @memberof PIXI\r\n */\r\nexport declare class BatchShaderGenerator {\r\n    /** Reference to the vertex shader source. */\r\n    vertexSrc: string;\r\n    /** Reference to the fragment shader template. Must contain \"%count%\" and \"%forloop%\". */\r\n    fragTemplate: string;\r\n    programCache: {\r\n        [key: number]: Program;\r\n    };\r\n    defaultGroupCache: {\r\n        [key: number]: UniformGroup;\r\n    };\r\n    /**\r\n     * @param vertexSrc - Vertex shader\r\n     * @param fragTemplate - Fragment shader template\r\n     */\r\n    constructor(vertexSrc: string, fragTemplate: string);\r\n    generateShader(maxTextures: number): Shader;\r\n    generateSampleSrc(maxTextures: number): string;\r\n}\r\n\r\n/**\r\n * System plugin to the renderer to manage batching.\r\n * @memberof PIXI\r\n */\r\nexport declare class BatchSystem implements ISystem {\r\n    /** An empty renderer. */\r\n    readonly emptyRenderer: ObjectRenderer;\r\n    /** The currently active ObjectRenderer. */\r\n    currentRenderer: ObjectRenderer;\r\n    private renderer;\r\n    /**\r\n     * @param renderer - The renderer this System works for.\r\n     */\r\n    constructor(renderer: Renderer);\r\n    /**\r\n     * Changes the current renderer to the one given in parameter\r\n     * @param objectRenderer - The object renderer to use.\r\n     */\r\n    setObjectRenderer(objectRenderer: ObjectRenderer): void;\r\n    /**\r\n     * This should be called if you wish to do some custom rendering\r\n     * It will basically render anything that may be batched up such as sprites\r\n     */\r\n    flush(): void;\r\n    /** Reset the system to an empty renderer */\r\n    reset(): void;\r\n    /**\r\n     * Handy function for batch renderers: copies bound textures in first maxTextures locations to array\r\n     * sets actual _batchLocation for them\r\n     * @param arr - arr copy destination\r\n     * @param maxTextures - number of copied elements\r\n     */\r\n    copyBoundTextures(arr: BaseTexture[], maxTextures: number): void;\r\n    /**\r\n     * Assigns batch locations to textures in array based on boundTextures state.\r\n     * All textures in texArray should have `_batchEnabled = _batchId`,\r\n     * and their count should be less than `maxTextures`.\r\n     * @param texArray - textures to bound\r\n     * @param boundTextures - current state of bound textures\r\n     * @param batchId - marker for _batchEnabled param of textures in texArray\r\n     * @param maxTextures - number of texture locations to manipulate\r\n     */\r\n    boundArray(texArray: BatchTextureArray, boundTextures: Array<BaseTexture>, batchId: number, maxTextures: number): void;\r\n    /**\r\n     * @ignore\r\n     */\r\n    destroy(): void;\r\n}\r\n\r\n/**\r\n * Used by the batcher to build texture batches.\r\n * Holds list of textures and their respective locations.\r\n * @memberof PIXI\r\n */\r\nexport declare class BatchTextureArray {\r\n    /** Inside textures array. */\r\n    elements: BaseTexture_2[];\r\n    /** Respective locations for textures. */\r\n    ids: number[];\r\n    /** Number of filled elements. */\r\n    count: number;\r\n    constructor();\r\n    clear(): void;\r\n}\r\n\r\n/**\r\n * A wrapper for data so that it can be used and uploaded by WebGL\r\n * @memberof PIXI\r\n */\r\ndeclare class Buffer_2 {\r\n    /**\r\n     * The data in the buffer, as a typed array\r\n     * @type {PIXI.IArrayBuffer}\r\n     */\r\n    data: ITypedArray;\r\n    /**\r\n     * The type of buffer this is, one of:\r\n     * + ELEMENT_ARRAY_BUFFER - used as an index buffer\r\n     * + ARRAY_BUFFER - used as an attribute buffer\r\n     * + UNIFORM_BUFFER - used as a uniform buffer (if available)\r\n     */\r\n    type: BUFFER_TYPE;\r\n    static: boolean;\r\n    id: number;\r\n    disposeRunner: Runner;\r\n    /**\r\n     * A map of renderer IDs to webgl buffer\r\n     * @private\r\n     * @type {Object<number, GLBuffer>}\r\n     */\r\n    _glBuffers: {\r\n        [key: number]: GLBuffer;\r\n    };\r\n    _updateID: number;\r\n    /**\r\n     * @param {PIXI.IArrayBuffer} data - the data to store in the buffer.\r\n     * @param _static - `true` for static buffer\r\n     * @param index - `true` for index buffer\r\n     */\r\n    constructor(data?: IArrayBuffer, _static?: boolean, index?: boolean);\r\n    /**\r\n     * Flags this buffer as requiring an upload to the GPU.\r\n     * @param {PIXI.IArrayBuffer|number[]} [data] - the data to update in the buffer.\r\n     */\r\n    update(data?: IArrayBuffer | Array<number>): void;\r\n    /** Disposes WebGL resources that are connected to this geometry. */\r\n    dispose(): void;\r\n    /** Destroys the buffer. */\r\n    destroy(): void;\r\n    /**\r\n     * Flags whether this is an index buffer.\r\n     *\r\n     * Index buffers are of type `ELEMENT_ARRAY_BUFFER`. Note that setting this property to false will make\r\n     * the buffer of type `ARRAY_BUFFER`.\r\n     *\r\n     * For backwards compatibility.\r\n     */\r\n    set index(value: boolean);\r\n    get index(): boolean;\r\n    /**\r\n     * Helper function that creates a buffer based on an array or TypedArray\r\n     * @param {ArrayBufferView | number[]} data - the TypedArray that the buffer will store. If this is a regular Array it will be converted to a Float32Array.\r\n     * @returns - A new Buffer based on the data provided.\r\n     */\r\n    static from(data: IArrayBuffer | number[]): Buffer_2;\r\n}\r\nexport { Buffer_2 as Buffer }\r\n\r\n/**\r\n * @interface SharedArrayBuffer\r\n */\r\n/**\r\n * Buffer resource with data of typed array.\r\n * @memberof PIXI\r\n */\r\nexport declare class BufferResource extends Resource {\r\n    /** Source array Cannot be {@code ClampedUint8Array} because it cant be uploaded to WebGL */\r\n    data: Float32Array | Uint8Array | Uint16Array | Int32Array | Uint32Array;\r\n    /**\r\n     * @param source - Source buffer\r\n     * @param options - Options\r\n     * @param {number} options.width - Width of the texture\r\n     * @param {number} options.height - Height of the texture\r\n     */\r\n    constructor(source: Float32Array | Uint8Array | Uint16Array | Int32Array | Uint32Array, options: ISize);\r\n    /**\r\n     * Upload the texture to the GPU.\r\n     * @param renderer - Upload to the renderer\r\n     * @param baseTexture - Reference to parent texture\r\n     * @param glTexture - glTexture\r\n     * @returns - true is success\r\n     */\r\n    upload(renderer: Renderer, baseTexture: BaseTexture, glTexture: GLTexture): boolean;\r\n    /** Destroy and don't use after this. */\r\n    dispose(): void;\r\n    /**\r\n     * Used to auto-detect the type of resource.\r\n     * @param {*} source - The source object\r\n     * @returns {boolean} `true` if <canvas>\r\n     */\r\n    static test(source: unknown): source is Float32Array | Uint8Array | Uint32Array;\r\n}\r\n\r\n/**\r\n * System plugin to the renderer to manage buffers.\r\n *\r\n * WebGL uses Buffers as a way to store objects to the GPU.\r\n * This system makes working with them a lot easier.\r\n *\r\n * Buffers are used in three main places in WebGL\r\n * - geometry information\r\n * - Uniform information (via uniform buffer objects - a WebGL 2 only feature)\r\n * - Transform feedback information. (WebGL 2 only feature)\r\n *\r\n * This system will handle the binding of buffers to the GPU as well as uploading\r\n * them. With this system, you never need to work directly with GPU buffers, but instead work with\r\n * the PIXI.Buffer class.\r\n * @class\r\n * @memberof PIXI\r\n */\r\ndeclare class BufferSystem implements ISystem {\r\n    CONTEXT_UID: number;\r\n    gl: IRenderingContext;\r\n    /** Cache for all buffers by id, used in case renderer gets destroyed or for profiling */\r\n    readonly managedBuffers: {\r\n        [key: number]: Buffer_2;\r\n    };\r\n    /** Cache keeping track of the base bound buffer bases */\r\n    readonly boundBufferBases: {\r\n        [key: number]: Buffer_2;\r\n    };\r\n    private renderer;\r\n    /**\r\n     * @param {PIXI.Renderer} renderer - The renderer this System works for.\r\n     */\r\n    constructor(renderer: Renderer);\r\n    /**\r\n     * @ignore\r\n     */\r\n    destroy(): void;\r\n    /** Sets up the renderer context and necessary buffers. */\r\n    protected contextChange(): void;\r\n    /**\r\n     * This binds specified buffer. On first run, it will create the webGL buffers for the context too\r\n     * @param buffer - the buffer to bind to the renderer\r\n     */\r\n    bind(buffer: Buffer_2): void;\r\n    /**\r\n     * Binds an uniform buffer to at the given index.\r\n     *\r\n     * A cache is used so a buffer will not be bound again if already bound.\r\n     * @param buffer - the buffer to bind\r\n     * @param index - the base index to bind it to.\r\n     */\r\n    bindBufferBase(buffer: Buffer_2, index: number): void;\r\n    /**\r\n     * Binds a buffer whilst also binding its range.\r\n     * This will make the buffer start from the offset supplied rather than 0 when it is read.\r\n     * @param buffer - the buffer to bind\r\n     * @param index - the base index to bind at, defaults to 0\r\n     * @param offset - the offset to bind at (this is blocks of 256). 0 = 0, 1 = 256, 2 = 512 etc\r\n     */\r\n    bindBufferRange(buffer: Buffer_2, index?: number, offset?: number): void;\r\n    /**\r\n     * Will ensure the data in the buffer is uploaded to the GPU.\r\n     * @param {PIXI.Buffer} buffer - the buffer to update\r\n     */\r\n    update(buffer: Buffer_2): void;\r\n    /**\r\n     * Disposes buffer\r\n     * @param {PIXI.Buffer} buffer - buffer with data\r\n     * @param {boolean} [contextLost=false] - If context was lost, we suppress deleteVertexArray\r\n     */\r\n    dispose(buffer: Buffer_2, contextLost?: boolean): void;\r\n    /**\r\n     * dispose all WebGL resources of all managed buffers\r\n     * @param {boolean} [contextLost=false] - If context was lost, we suppress `gl.delete` calls\r\n     */\r\n    disposeAll(contextLost?: boolean): void;\r\n    /**\r\n     * creates and attaches a GLBuffer object tied to the current context.\r\n     * @param buffer\r\n     * @protected\r\n     */\r\n    protected createGLBuffer(buffer: Buffer_2): GLBuffer;\r\n}\r\n\r\n/**\r\n * @interface OffscreenCanvas\r\n */\r\n/**\r\n * Resource type for HTMLCanvasElement.\r\n * @memberof PIXI\r\n */\r\nexport declare class CanvasResource extends BaseImageResource {\r\n    /**\r\n     * @param source - Canvas element to use\r\n     */\r\n    constructor(source: HTMLCanvasElement);\r\n    /**\r\n     * Used to auto-detect the type of resource.\r\n     * @param {*} source - The source object\r\n     * @returns {boolean} `true` if source is HTMLCanvasElement or OffscreenCanvas\r\n     */\r\n    static test(source: unknown): source is OffscreenCanvas | HTMLCanvasElement;\r\n}\r\n\r\nexport declare function checkMaxIfStatementsInShader(maxIfs: number, gl: IRenderingContext): number;\r\n\r\n/**\r\n * System plugin to the renderer to manage the context.\r\n * @memberof PIXI\r\n */\r\nexport declare class ContextSystem implements ISystem {\r\n    /**\r\n     * Either 1 or 2 to reflect the WebGL version being used.\r\n     * @readonly\r\n     */\r\n    webGLVersion: number;\r\n    /**\r\n     * Features supported by current context.\r\n     * @type {object}\r\n     * @readonly\r\n     * @property {boolean} uint32Indices - Support for 32-bit indices buffer.\r\n     */\r\n    readonly supports: ISupportDict;\r\n    protected CONTEXT_UID: number;\r\n    protected gl: IRenderingContext;\r\n    /**\r\n     * Extensions available.\r\n     * @type {object}\r\n     * @readonly\r\n     * @property {WEBGL_draw_buffers} drawBuffers - WebGL v1 extension\r\n     * @property {WEBGL_depth_texture} depthTexture - WebGL v1 extension\r\n     * @property {OES_texture_float} floatTexture - WebGL v1 extension\r\n     * @property {WEBGL_lose_context} loseContext - WebGL v1 extension\r\n     * @property {OES_vertex_array_object} vertexArrayObject - WebGL v1 extension\r\n     * @property {EXT_texture_filter_anisotropic} anisotropicFiltering - WebGL v1 and v2 extension\r\n     */\r\n    extensions: WebGLExtensions;\r\n    private renderer;\r\n    /** @param renderer - The renderer this System works for. */\r\n    constructor(renderer: Renderer);\r\n    /**\r\n     * `true` if the context is lost\r\n     * @readonly\r\n     */\r\n    get isLost(): boolean;\r\n    /**\r\n     * Handles the context change event.\r\n     * @param {WebGLRenderingContext} gl - New WebGL context.\r\n     */\r\n    protected contextChange(gl: IRenderingContext): void;\r\n    /**\r\n     * Initializes the context.\r\n     * @protected\r\n     * @param {WebGLRenderingContext} gl - WebGL context\r\n     */\r\n    initFromContext(gl: IRenderingContext): void;\r\n    /**\r\n     * Initialize from context options\r\n     * @protected\r\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/getContext\r\n     * @param {object} options - context attributes\r\n     */\r\n    initFromOptions(options: WebGLContextAttributes): void;\r\n    /**\r\n     * Helper class to create a WebGL Context\r\n     * @param canvas - the canvas element that we will get the context from\r\n     * @param options - An options object that gets passed in to the canvas element containing the\r\n     *    context attributes\r\n     * @see https://developer.mozilla.org/en/docs/Web/API/HTMLCanvasElement/getContext\r\n     * @returns {WebGLRenderingContext} the WebGL context\r\n     */\r\n    createContext(canvas: HTMLCanvasElement, options: WebGLContextAttributes): IRenderingContext;\r\n    /** Auto-populate the {@link PIXI.ContextSystem.extensions extensions}. */\r\n    protected getExtensions(): void;\r\n    /**\r\n     * Handles a lost webgl context\r\n     * @param {WebGLContextEvent} event - The context lost event.\r\n     */\r\n    protected handleContextLost(event: WebGLContextEvent): void;\r\n    /** Handles a restored webgl context. */\r\n    protected handleContextRestored(): void;\r\n    destroy(): void;\r\n    /** Handle the post-render runner event. */\r\n    protected postrender(): void;\r\n    /**\r\n     * Validate context.\r\n     * @param {WebGLRenderingContext} gl - Render context.\r\n     */\r\n    protected validateContext(gl: IRenderingContext): void;\r\n}\r\n\r\n/**\r\n * logic originally from here: https://github.com/sketchpunk/FunWithWebGL2/blob/master/lesson_022/Shaders.js\r\n * rewrote it, but this was a great starting point to get a solid understanding of whats going on :)\r\n * @ignore\r\n * @param uniformData\r\n */\r\nexport declare function createUBOElements(uniformData: IUniformData[]): {\r\n    uboElements: UBOElement[];\r\n    size: number;\r\n};\r\n\r\n/**\r\n * Resource for a CubeTexture which contains six resources.\r\n * @memberof PIXI\r\n */\r\nexport declare class CubeResource extends AbstractMultiResource {\r\n    items: ArrayFixed<BaseTexture, 6>;\r\n    /**\r\n     * In case BaseTextures are supplied, whether to use same resource or bind baseTexture itself.\r\n     * @protected\r\n     */\r\n    linkBaseTexture: boolean;\r\n    /**\r\n     * @param {Array<string|PIXI.Resource>} [source] - Collection of URLs or resources\r\n     *        to use as the sides of the cube.\r\n     * @param options - ImageResource options\r\n     * @param {number} [options.width] - Width of resource\r\n     * @param {number} [options.height] - Height of resource\r\n     * @param {number} [options.autoLoad=true] - Whether to auto-load resources\r\n     * @param {number} [options.linkBaseTexture=true] - In case BaseTextures are supplied,\r\n     *   whether to copy them or use\r\n     */\r\n    constructor(source?: ArrayFixed<string | Resource, 6>, options?: ICubeResourceOptions);\r\n    /**\r\n     * Add binding.\r\n     * @param baseTexture - parent base texture\r\n     */\r\n    bind(baseTexture: BaseTexture): void;\r\n    addBaseTextureAt(baseTexture: BaseTexture, index: number, linkBaseTexture?: boolean): this;\r\n    /**\r\n     * Upload the resource\r\n     * @param renderer\r\n     * @param _baseTexture\r\n     * @param glTexture\r\n     * @returns {boolean} true is success\r\n     */\r\n    upload(renderer: Renderer, _baseTexture: BaseTexture, glTexture: GLTexture): boolean;\r\n    /** Number of texture sides to store for CubeResources. */\r\n    static SIDES: number;\r\n    /**\r\n     * Used to auto-detect the type of resource.\r\n     * @param {*} source - The source object\r\n     * @returns {boolean} `true` if source is an array of 6 elements\r\n     */\r\n    static test(source: unknown): source is ArrayFixed<string | Resource, 6>;\r\n}\r\n\r\nexport declare const defaultFilterVertex: string;\r\n\r\n/**\r\n * Default filter vertex shader\r\n * @memberof PIXI\r\n * @member {string} defaultFilterVertex\r\n */\r\nexport declare const defaultVertex: string;\r\n\r\n/**\r\n * A filter is a special shader that applies post-processing effects to an input texture and writes into an output\r\n * render-target.\r\n *\r\n * {@link http://pixijs.io/examples/#/filters/blur-filter.js Example} of the\r\n * {@link PIXI.filters.BlurFilter BlurFilter}.\r\n *\r\n * ### Usage\r\n * Filters can be applied to any DisplayObject or Container.\r\n * PixiJS' `FilterSystem` renders the container into temporary Framebuffer,\r\n * then filter renders it to the screen.\r\n * Multiple filters can be added to the `filters` array property and stacked on each other.\r\n *\r\n * ```\r\n * const filter = new PIXI.Filter(myShaderVert, myShaderFrag, { myUniform: 0.5 });\r\n * const container = new PIXI.Container();\r\n * container.filters = [filter];\r\n * ```\r\n *\r\n * ### Previous Version Differences\r\n *\r\n * In PixiJS **v3**, a filter was always applied to _whole screen_.\r\n *\r\n * In PixiJS **v4**, a filter can be applied _only part of the screen_.\r\n * Developers had to create a set of uniforms to deal with coordinates.\r\n *\r\n * In PixiJS **v5** combines _both approaches_.\r\n * Developers can use normal coordinates of v3 and then allow filter to use partial Framebuffers,\r\n * bringing those extra uniforms into account.\r\n *\r\n * Also be aware that we have changed default vertex shader, please consult\r\n * {@link https://github.com/pixijs/pixi.js/wiki/v5-Creating-filters Wiki}.\r\n *\r\n * ### Frames\r\n *\r\n * The following table summarizes the coordinate spaces used in the filtering pipeline:\r\n *\r\n * <table>\r\n * <thead>\r\n *   <tr>\r\n *     <th>Coordinate Space</th>\r\n *     <th>Description</th>\r\n *   </tr>\r\n * </thead>\r\n * <tbody>\r\n *   <tr>\r\n *     <td>Texture Coordinates</td>\r\n *     <td>\r\n *         The texture (or UV) coordinates in the input base-texture's space. These are normalized into the (0,1) range along\r\n *         both axes.\r\n *     </td>\r\n *   </tr>\r\n *   <tr>\r\n *     <td>World Space</td>\r\n *     <td>\r\n *         A point in the same space as the world bounds of any display-object (i.e. in the scene graph's space).\r\n *     </td>\r\n *   </tr>\r\n *   <tr>\r\n *     <td>Physical Pixels</td>\r\n *     <td>\r\n *         This is base-texture's space with the origin on the top-left. You can calculate these by multiplying the texture\r\n *         coordinates by the dimensions of the texture.\r\n *     </td>\r\n *   </tr>\r\n * </tbody>\r\n * </table>\r\n *\r\n * ### Built-in Uniforms\r\n *\r\n * PixiJS viewport uses screen (CSS) coordinates, `(0, 0, renderer.screen.width, renderer.screen.height)`,\r\n * and `projectionMatrix` uniform maps it to the gl viewport.\r\n *\r\n * **uSampler**\r\n *\r\n * The most important uniform is the input texture that container was rendered into.\r\n * _Important note: as with all Framebuffers in PixiJS, both input and output are\r\n * premultiplied by alpha._\r\n *\r\n * By default, input normalized coordinates are passed to fragment shader with `vTextureCoord`.\r\n * Use it to sample the input.\r\n *\r\n * ```\r\n * const fragment = `\r\n * varying vec2 vTextureCoord;\r\n * uniform sampler2D uSampler;\r\n * void main(void)\r\n * {\r\n *    gl_FragColor = texture2D(uSampler, vTextureCoord);\r\n * }\r\n * `;\r\n *\r\n * const myFilter = new PIXI.Filter(null, fragment);\r\n * ```\r\n *\r\n * This filter is just one uniform less than {@link PIXI.filters.AlphaFilter AlphaFilter}.\r\n *\r\n * **outputFrame**\r\n *\r\n * The `outputFrame` holds the rectangle where filter is applied in screen (CSS) coordinates.\r\n * It's the same as `renderer.screen` for a fullscreen filter.\r\n * Only a part of  `outputFrame.zw` size of temporary Framebuffer is used,\r\n * `(0, 0, outputFrame.width, outputFrame.height)`,\r\n *\r\n * Filters uses this quad to normalized (0-1) space, its passed into `aVertexPosition` attribute.\r\n * To calculate vertex position in screen space using normalized (0-1) space:\r\n *\r\n * ```\r\n * vec4 filterVertexPosition( void )\r\n * {\r\n *     vec2 position = aVertexPosition * max(outputFrame.zw, vec2(0.)) + outputFrame.xy;\r\n *     return vec4((projectionMatrix * vec3(position, 1.0)).xy, 0.0, 1.0);\r\n * }\r\n * ```\r\n *\r\n * **inputSize**\r\n *\r\n * Temporary framebuffer is different, it can be either the size of screen, either power-of-two.\r\n * The `inputSize.xy` are size of temporary framebuffer that holds input.\r\n * The `inputSize.zw` is inverted, it's a shortcut to evade division inside the shader.\r\n *\r\n * Set `inputSize.xy = outputFrame.zw` for a fullscreen filter.\r\n *\r\n * To calculate input normalized coordinate, you have to map it to filter normalized space.\r\n * Multiply by `outputFrame.zw` to get input coordinate.\r\n * Divide by `inputSize.xy` to get input normalized coordinate.\r\n *\r\n * ```\r\n * vec2 filterTextureCoord( void )\r\n * {\r\n *     return aVertexPosition * (outputFrame.zw * inputSize.zw); // same as /inputSize.xy\r\n * }\r\n * ```\r\n * **resolution**\r\n *\r\n * The `resolution` is the ratio of screen (CSS) pixels to real pixels.\r\n *\r\n * **inputPixel**\r\n *\r\n * `inputPixel.xy` is the size of framebuffer in real pixels, same as `inputSize.xy * resolution`\r\n * `inputPixel.zw` is inverted `inputPixel.xy`.\r\n *\r\n * It's handy for filters that use neighbour pixels, like {@link PIXI.filters.FXAAFilter FXAAFilter}.\r\n *\r\n * **inputClamp**\r\n *\r\n * If you try to get info from outside of used part of Framebuffer - you'll get undefined behaviour.\r\n * For displacements, coordinates has to be clamped.\r\n *\r\n * The `inputClamp.xy` is left-top pixel center, you may ignore it, because we use left-top part of Framebuffer\r\n * `inputClamp.zw` is bottom-right pixel center.\r\n *\r\n * ```\r\n * vec4 color = texture2D(uSampler, clamp(modifiedTextureCoord, inputClamp.xy, inputClamp.zw))\r\n * ```\r\n * OR\r\n * ```\r\n * vec4 color = texture2D(uSampler, min(modifigedTextureCoord, inputClamp.zw))\r\n * ```\r\n *\r\n * ### Additional Information\r\n *\r\n * Complete documentation on Filter usage is located in the\r\n * {@link https://github.com/pixijs/pixi.js/wiki/v5-Creating-filters Wiki}.\r\n *\r\n * Since PixiJS only had a handful of built-in filters, additional filters can be downloaded\r\n * {@link https://github.com/pixijs/pixi-filters here} from the PixiJS Filters repository.\r\n * @memberof PIXI\r\n */\r\nexport declare class Filter extends Shader {\r\n    /**\r\n     * The padding of the filter. Some filters require extra space to breath such as a blur.\r\n     * Increasing this will add extra width and height to the bounds of the object that the\r\n     * filter is applied to.\r\n     */\r\n    padding: number;\r\n    /** The samples of the filter. */\r\n    multisample: MSAA_QUALITY;\r\n    /** If enabled is true the filter is applied, if false it will not. */\r\n    enabled: boolean;\r\n    /**\r\n     * If enabled, PixiJS will fit the filter area into boundaries for better performance.\r\n     * Switch it off if it does not work for specific shader.\r\n     * @default true\r\n     */\r\n    autoFit: boolean;\r\n    /**\r\n     * Legacy filters use position and uvs from attributes (set by filter system)\r\n     * @readonly\r\n     */\r\n    legacy: boolean;\r\n    /** The WebGL state the filter requires to render. */\r\n    state: State;\r\n    protected _resolution: number;\r\n    /**\r\n     * @param vertexSrc - The source of the vertex shader.\r\n     * @param fragmentSrc - The source of the fragment shader.\r\n     * @param uniforms - Custom uniforms to use to augment the built-in ones.\r\n     */\r\n    constructor(vertexSrc?: string, fragmentSrc?: string, uniforms?: Dict<any>);\r\n    /**\r\n     * Applies the filter\r\n     * @param {PIXI.FilterSystem} filterManager - The renderer to retrieve the filter from\r\n     * @param {PIXI.RenderTexture} input - The input render target.\r\n     * @param {PIXI.RenderTexture} output - The target to output to.\r\n     * @param {PIXI.CLEAR_MODES} [clearMode] - Should the output be cleared before rendering to it.\r\n     * @param {object} [_currentState] - It's current state of filter.\r\n     *        There are some useful properties in the currentState :\r\n     *        target, filters, sourceFrame, destinationFrame, renderTarget, resolution\r\n     */\r\n    apply(filterManager: FilterSystem, input: RenderTexture, output: RenderTexture, clearMode?: CLEAR_MODES, _currentState?: FilterState): void;\r\n    /**\r\n     * Sets the blend mode of the filter.\r\n     * @default PIXI.BLEND_MODES.NORMAL\r\n     */\r\n    get blendMode(): BLEND_MODES;\r\n    set blendMode(value: BLEND_MODES);\r\n    /**\r\n     * The resolution of the filter. Setting this to be lower will lower the quality but\r\n     * increase the performance of the filter.\r\n     */\r\n    get resolution(): number;\r\n    set resolution(value: number);\r\n    /**\r\n     * The default vertex shader source\r\n     * @constant\r\n     */\r\n    static get defaultVertexSrc(): string;\r\n    /**\r\n     * The default fragment shader source\r\n     * @constant\r\n     */\r\n    static get defaultFragmentSrc(): string;\r\n    /** Used for caching shader IDs. */\r\n    static SOURCE_KEY_MAP: Dict<string>;\r\n}\r\n\r\n/**\r\n * System plugin to the renderer to manage filter states.\r\n * @ignore\r\n */\r\nexport declare class FilterState {\r\n    renderTexture: RenderTexture;\r\n    /**\r\n     * Target of the filters\r\n     * We store for case when custom filter wants to know the element it was applied on\r\n     * @member {PIXI.DisplayObject}\r\n     */\r\n    target: IFilterTarget;\r\n    /**\r\n     * Compatibility with PixiJS v4 filters\r\n     * @default false\r\n     */\r\n    legacy: boolean;\r\n    /**\r\n     * Resolution of filters\r\n     * @default 1\r\n     */\r\n    resolution: number;\r\n    /**\r\n     * Number of samples\r\n     * @default MSAA_QUALITY.NONE\r\n     */\r\n    multisample: MSAA_QUALITY;\r\n    /** Source frame. */\r\n    sourceFrame: Rectangle;\r\n    /** Destination frame. */\r\n    destinationFrame: Rectangle;\r\n    /** Original render-target source frame. */\r\n    bindingSourceFrame: Rectangle;\r\n    /** Original render-target destination frame. */\r\n    bindingDestinationFrame: Rectangle;\r\n    /** Collection of filters. */\r\n    filters: Array<Filter>;\r\n    /** Projection system transform saved by link. */\r\n    transform: Matrix;\r\n    constructor();\r\n    /** Clears the state */\r\n    clear(): void;\r\n}\r\n\r\n/**\r\n * System plugin to the renderer to manage filters.\r\n *\r\n * ## Pipeline\r\n *\r\n * The FilterSystem executes the filtering pipeline by rendering the display-object into a texture, applying its\r\n * [filters]{@link PIXI.Filter} in series, and the last filter outputs into the final render-target.\r\n *\r\n * The filter-frame is the rectangle in world space being filtered, and those contents are mapped into\r\n * `(0, 0, filterFrame.width, filterFrame.height)` into the filter render-texture. The filter-frame is also called\r\n * the source-frame, as it is used to bind the filter render-textures. The last filter outputs to the `filterFrame`\r\n * in the final render-target.\r\n *\r\n * ## Usage\r\n *\r\n * {@link PIXI.Container#renderAdvanced} is an example of how to use the filter system. It is a 3 step process:\r\n *\r\n * **push**: Use {@link PIXI.FilterSystem#push} to push the set of filters to be applied on a filter-target.\r\n * **render**: Render the contents to be filtered using the renderer. The filter-system will only capture the contents\r\n *      inside the bounds of the filter-target. NOTE: Using {@link PIXI.Renderer#render} is\r\n *      illegal during an existing render cycle, and it may reset the filter system.\r\n * **pop**: Use {@link PIXI.FilterSystem#pop} to pop & execute the filters you initially pushed. It will apply them\r\n *      serially and output to the bounds of the filter-target.\r\n * @memberof PIXI\r\n */\r\nexport declare class FilterSystem implements ISystem {\r\n    /**\r\n     * List of filters for the FilterSystem\r\n     * @member {object[]}\r\n     */\r\n    readonly defaultFilterStack: Array<FilterState>;\r\n    /** A pool for storing filter states, save us creating new ones each tick. */\r\n    statePool: Array<FilterState>;\r\n    /** Stores a bunch of POT textures used for filtering. */\r\n    texturePool: RenderTexturePool;\r\n    /** Whether to clear output renderTexture in AUTO/BLIT mode. See {@link PIXI.CLEAR_MODES}. */\r\n    forceClear: boolean;\r\n    /**\r\n     * Old padding behavior is to use the max amount instead of sum padding.\r\n     * Use this flag if you need the old behavior.\r\n     * @default false\r\n     */\r\n    useMaxPadding: boolean;\r\n    /** A very simple geometry used when drawing a filter effect to the screen. */\r\n    protected quad: Quad;\r\n    /** Quad UVs */\r\n    protected quadUv: QuadUv;\r\n    /**\r\n     * Active state\r\n     * @member {object}\r\n     */\r\n    protected activeState: FilterState;\r\n    /**\r\n     * This uniform group is attached to filter uniforms when used.\r\n     * @property {PIXI.Rectangle} outputFrame -\r\n     * @property {Float32Array} inputSize -\r\n     * @property {Float32Array} inputPixel -\r\n     * @property {Float32Array} inputClamp -\r\n     * @property {number} resolution -\r\n     * @property {Float32Array} filterArea -\r\n     * @property {Float32Array} filterClamp -\r\n     */\r\n    protected globalUniforms: UniformGroup;\r\n    /** Temporary rect for math. */\r\n    private tempRect;\r\n    renderer: Renderer;\r\n    /**\r\n     * @param renderer - The renderer this System works for.\r\n     */\r\n    constructor(renderer: Renderer);\r\n    /**\r\n     * Pushes a set of filters to be applied later to the system. This will redirect further rendering into an\r\n     * input render-texture for the rest of the filtering pipeline.\r\n     * @param {PIXI.DisplayObject} target - The target of the filter to render.\r\n     * @param filters - The filters to apply.\r\n     */\r\n    push(target: IFilterTarget, filters: Array<Filter>): void;\r\n    /** Pops off the filter and applies it. */\r\n    pop(): void;\r\n    /**\r\n     * Binds a renderTexture with corresponding `filterFrame`, clears it if mode corresponds.\r\n     * @param filterTexture - renderTexture to bind, should belong to filter pool or filter stack\r\n     * @param clearMode - clearMode, by default its CLEAR/YES. See {@link PIXI.CLEAR_MODES}\r\n     */\r\n    bindAndClear(filterTexture: RenderTexture, clearMode?: CLEAR_MODES): void;\r\n    /**\r\n     * Draws a filter using the default rendering process.\r\n     *\r\n     * This should be called only by {@link Filter#apply}.\r\n     * @param filter - The filter to draw.\r\n     * @param input - The input render target.\r\n     * @param output - The target to output to.\r\n     * @param clearMode - Should the output be cleared before rendering to it\r\n     */\r\n    applyFilter(filter: Filter, input: RenderTexture, output: RenderTexture, clearMode?: CLEAR_MODES): void;\r\n    /**\r\n     * Multiply _input normalized coordinates_ to this matrix to get _sprite texture normalized coordinates_.\r\n     *\r\n     * Use `outputMatrix * vTextureCoord` in the shader.\r\n     * @param outputMatrix - The matrix to output to.\r\n     * @param {PIXI.Sprite} sprite - The sprite to map to.\r\n     * @returns The mapped matrix.\r\n     */\r\n    calculateSpriteMatrix(outputMatrix: Matrix, sprite: ISpriteMaskTarget): Matrix;\r\n    /** Destroys this Filter System. */\r\n    destroy(): void;\r\n    /**\r\n     * Gets a Power-of-Two render texture or fullScreen texture\r\n     * @param minWidth - The minimum width of the render texture in real pixels.\r\n     * @param minHeight - The minimum height of the render texture in real pixels.\r\n     * @param resolution - The resolution of the render texture.\r\n     * @param multisample - Number of samples of the render texture.\r\n     * @returns - The new render texture.\r\n     */\r\n    protected getOptimalFilterTexture(minWidth: number, minHeight: number, resolution?: number, multisample?: MSAA_QUALITY): RenderTexture;\r\n    /**\r\n     * Gets extra render texture to use inside current filter\r\n     * To be compliant with older filters, you can use params in any order\r\n     * @param input - renderTexture from which size and resolution will be copied\r\n     * @param resolution - override resolution of the renderTexture\r\n     * @param multisample - number of samples of the renderTexture\r\n     */\r\n    getFilterTexture(input?: RenderTexture, resolution?: number, multisample?: MSAA_QUALITY): RenderTexture;\r\n    /**\r\n     * Frees a render texture back into the pool.\r\n     * @param renderTexture - The renderTarget to free\r\n     */\r\n    returnFilterTexture(renderTexture: RenderTexture): void;\r\n    /** Empties the texture pool. */\r\n    emptyPool(): void;\r\n    /** Calls `texturePool.resize()`, affects fullScreen renderTextures. */\r\n    resize(): void;\r\n    /**\r\n     * @param matrix - first param\r\n     * @param rect - second param\r\n     */\r\n    private transformAABB;\r\n    private roundFrame;\r\n}\r\n\r\n/**\r\n * A framebuffer can be used to render contents off of the screen. {@link PIXI.BaseRenderTexture} uses\r\n * one internally to render into itself. You can attach a depth or stencil buffer to a framebuffer.\r\n *\r\n * On WebGL 2 machines, shaders can output to multiple textures simultaneously with GLSL 300 ES.\r\n * @memberof PIXI\r\n */\r\nexport declare class Framebuffer {\r\n    /** Width of framebuffer in pixels. */\r\n    width: number;\r\n    /** Height of framebuffer in pixels. */\r\n    height: number;\r\n    /**\r\n     * Desired number of samples for antialiasing. 0 means AA should not be used.\r\n     *\r\n     * Experimental WebGL2 feature, allows to use antialiasing in individual renderTextures.\r\n     * Antialiasing is the same as for main buffer with renderer `antialias:true` options.\r\n     * Seriously affects GPU memory consumption and GPU performance.\r\n     *\r\n     *```js\r\n     * renderTexture.framebuffer.multisample = PIXI.MSAA_QUALITY.HIGH;\r\n     * //...\r\n     * renderer.render(myContainer, {renderTexture});\r\n     * renderer.framebuffer.blit(); // copies data from MSAA framebuffer to texture\r\n     *  ```\r\n     * @default PIXI.MSAA_QUALITY.NONE\r\n     */\r\n    multisample: MSAA_QUALITY;\r\n    stencil: boolean;\r\n    depth: boolean;\r\n    dirtyId: number;\r\n    dirtyFormat: number;\r\n    dirtySize: number;\r\n    depthTexture: BaseTexture;\r\n    colorTextures: Array<BaseTexture>;\r\n    glFramebuffers: {\r\n        [key: string]: GLFramebuffer;\r\n    };\r\n    disposeRunner: Runner;\r\n    /**\r\n     * @param width - Width of the frame buffer\r\n     * @param height - Height of the frame buffer\r\n     */\r\n    constructor(width: number, height: number);\r\n    /**\r\n     * Reference to the colorTexture.\r\n     * @readonly\r\n     */\r\n    get colorTexture(): BaseTexture;\r\n    /**\r\n     * Add texture to the colorTexture array.\r\n     * @param index - Index of the array to add the texture to\r\n     * @param texture - Texture to add to the array\r\n     */\r\n    addColorTexture(index?: number, texture?: BaseTexture): this;\r\n    /**\r\n     * Add a depth texture to the frame buffer.\r\n     * @param texture - Texture to add.\r\n     */\r\n    addDepthTexture(texture?: BaseTexture): this;\r\n    /** Enable depth on the frame buffer. */\r\n    enableDepth(): this;\r\n    /** Enable stencil on the frame buffer. */\r\n    enableStencil(): this;\r\n    /**\r\n     * Resize the frame buffer\r\n     * @param width - Width of the frame buffer to resize to\r\n     * @param height - Height of the frame buffer to resize to\r\n     */\r\n    resize(width: number, height: number): void;\r\n    /** Disposes WebGL resources that are connected to this geometry. */\r\n    dispose(): void;\r\n    /** Destroys and removes the depth texture added to this framebuffer. */\r\n    destroyDepthTexture(): void;\r\n}\r\n\r\n/**\r\n * System plugin to the renderer to manage framebuffers.\r\n * @memberof PIXI\r\n */\r\nexport declare class FramebufferSystem implements ISystem {\r\n    /** A list of managed framebuffers. */\r\n    readonly managedFramebuffers: Array<Framebuffer>;\r\n    current: Framebuffer;\r\n    viewport: Rectangle;\r\n    hasMRT: boolean;\r\n    writeDepthTexture: boolean;\r\n    protected CONTEXT_UID: number;\r\n    protected gl: IRenderingContext;\r\n    /** Framebuffer value that shows that we don't know what is bound. */\r\n    protected unknownFramebuffer: Framebuffer;\r\n    protected msaaSamples: Array<number>;\r\n    renderer: Renderer;\r\n    /**\r\n     * @param renderer - The renderer this System works for.\r\n     */\r\n    constructor(renderer: Renderer);\r\n    /** Sets up the renderer context and necessary buffers. */\r\n    protected contextChange(): void;\r\n    /**\r\n     * Bind a framebuffer.\r\n     * @param framebuffer\r\n     * @param frame - frame, default is framebuffer size\r\n     * @param mipLevel - optional mip level to set on the framebuffer - defaults to 0\r\n     */\r\n    bind(framebuffer?: Framebuffer, frame?: Rectangle, mipLevel?: number): void;\r\n    /**\r\n     * Set the WebGLRenderingContext's viewport.\r\n     * @param x - X position of viewport\r\n     * @param y - Y position of viewport\r\n     * @param width - Width of viewport\r\n     * @param height - Height of viewport\r\n     */\r\n    setViewport(x: number, y: number, width: number, height: number): void;\r\n    /**\r\n     * Get the size of the current width and height. Returns object with `width` and `height` values.\r\n     * @readonly\r\n     */\r\n    get size(): {\r\n        x: number;\r\n        y: number;\r\n        width: number;\r\n        height: number;\r\n    };\r\n    /**\r\n     * Clear the color of the context\r\n     * @param r - Red value from 0 to 1\r\n     * @param g - Green value from 0 to 1\r\n     * @param b - Blue value from 0 to 1\r\n     * @param a - Alpha value from 0 to 1\r\n     * @param {PIXI.BUFFER_BITS} [mask=BUFFER_BITS.COLOR | BUFFER_BITS.DEPTH] - Bitwise OR of masks\r\n     *  that indicate the buffers to be cleared, by default COLOR and DEPTH buffers.\r\n     */\r\n    clear(r: number, g: number, b: number, a: number, mask?: BUFFER_BITS): void;\r\n    /**\r\n     * Initialize framebuffer for this context\r\n     * @protected\r\n     * @param framebuffer\r\n     * @returns - created GLFramebuffer\r\n     */\r\n    initFramebuffer(framebuffer: Framebuffer): GLFramebuffer;\r\n    /**\r\n     * Resize the framebuffer\r\n     * @param framebuffer\r\n     * @protected\r\n     */\r\n    resizeFramebuffer(framebuffer: Framebuffer): void;\r\n    /**\r\n     * Update the framebuffer\r\n     * @param framebuffer\r\n     * @param mipLevel\r\n     * @protected\r\n     */\r\n    updateFramebuffer(framebuffer: Framebuffer, mipLevel: number): void;\r\n    /**\r\n     * Returns true if the frame buffer can be multisampled.\r\n     * @param framebuffer\r\n     */\r\n    protected canMultisampleFramebuffer(framebuffer: Framebuffer): boolean;\r\n    /**\r\n     * Detects number of samples that is not more than a param but as close to it as possible\r\n     * @param samples - number of samples\r\n     * @returns - recommended number of samples\r\n     */\r\n    protected detectSamples(samples: MSAA_QUALITY): MSAA_QUALITY;\r\n    /**\r\n     * Only works with WebGL2\r\n     *\r\n     * blits framebuffer to another of the same or bigger size\r\n     * after that target framebuffer is bound\r\n     *\r\n     * Fails with WebGL warning if blits multisample framebuffer to different size\r\n     * @param framebuffer - by default it blits \"into itself\", from renderBuffer to texture.\r\n     * @param sourcePixels - source rectangle in pixels\r\n     * @param destPixels - dest rectangle in pixels, assumed to be the same as sourcePixels\r\n     */\r\n    blit(framebuffer?: Framebuffer, sourcePixels?: Rectangle, destPixels?: Rectangle): void;\r\n    /**\r\n     * Disposes framebuffer.\r\n     * @param framebuffer - framebuffer that has to be disposed of\r\n     * @param contextLost - If context was lost, we suppress all delete function calls\r\n     */\r\n    disposeFramebuffer(framebuffer: Framebuffer, contextLost?: boolean): void;\r\n    /**\r\n     * Disposes all framebuffers, but not textures bound to them.\r\n     * @param [contextLost=false] - If context was lost, we suppress all delete function calls\r\n     */\r\n    disposeAll(contextLost?: boolean): void;\r\n    /**\r\n     * Forcing creation of stencil buffer for current framebuffer, if it wasn't done before.\r\n     * Used by MaskSystem, when its time to use stencil mask for Graphics element.\r\n     *\r\n     * Its an alternative for public lazy `framebuffer.enableStencil`, in case we need stencil without rebind.\r\n     * @private\r\n     */\r\n    forceStencil(): void;\r\n    /** Resets framebuffer stored state, binds screen framebuffer. Should be called before renderTexture reset(). */\r\n    reset(): void;\r\n    destroy(): void;\r\n}\r\n\r\n/**\r\n * generates a WebGL Program object from a high level Pixi Program.\r\n * @param gl - a rendering context on which to generate the program\r\n * @param program - the high level Pixi Program.\r\n */\r\nexport declare function generateProgram(gl: IRenderingContext, program: Program): GLProgram;\r\n\r\nexport declare function generateUniformBufferSync(group: UniformGroup, uniformData: Dict<any>): {\r\n    size: number;\r\n    syncFunc: UniformsSyncCallback;\r\n};\r\n\r\n/**\r\n * The Geometry represents a model. It consists of two components:\r\n * - GeometryStyle - The structure of the model such as the attributes layout\r\n * - GeometryData - the data of the model - this consists of buffers.\r\n * This can include anything from positions, uvs, normals, colors etc.\r\n *\r\n * Geometry can be defined without passing in a style or data if required (thats how I prefer!)\r\n *\r\n * ```js\r\n * let geometry = new PIXI.Geometry();\r\n *\r\n * geometry.addAttribute('positions', [0, 0, 100, 0, 100, 100, 0, 100], 2);\r\n * geometry.addAttribute('uvs', [0,0,1,0,1,1,0,1],2)\r\n * geometry.addIndex([0,1,2,1,3,2])\r\n * ```\r\n * @memberof PIXI\r\n */\r\nexport declare class Geometry {\r\n    buffers: Array<Buffer_2>;\r\n    indexBuffer: Buffer_2;\r\n    attributes: {\r\n        [key: string]: Attribute;\r\n    };\r\n    id: number;\r\n    /** Whether the geometry is instanced. */\r\n    instanced: boolean;\r\n    /**\r\n     * Number of instances in this geometry, pass it to `GeometrySystem.draw()`.\r\n     * @default 1\r\n     */\r\n    instanceCount: number;\r\n    /**\r\n     * A map of renderer IDs to webgl VAOs\r\n     * @type {object}\r\n     */\r\n    glVertexArrayObjects: {\r\n        [key: number]: {\r\n            [key: string]: WebGLVertexArrayObject;\r\n        };\r\n    };\r\n    disposeRunner: Runner;\r\n    /** Count of existing (not destroyed) meshes that reference this geometry. */\r\n    refCount: number;\r\n    /**\r\n     * @param buffers - An array of buffers. optional.\r\n     * @param attributes - Of the geometry, optional structure of the attributes layout\r\n     */\r\n    constructor(buffers?: Array<Buffer_2>, attributes?: {\r\n        [key: string]: Attribute;\r\n    });\r\n    /**\r\n     *\r\n     * Adds an attribute to the geometry\r\n     * Note: `stride` and `start` should be `undefined` if you dont know them, not 0!\r\n     * @param id - the name of the attribute (matching up to a shader)\r\n     * @param {PIXI.Buffer|number[]} buffer - the buffer that holds the data of the attribute . You can also provide an Array and a buffer will be created from it.\r\n     * @param size - the size of the attribute. If you have 2 floats per vertex (eg position x and y) this would be 2\r\n     * @param normalized - should the data be normalized.\r\n     * @param [type=PIXI.TYPES.FLOAT] - what type of number is the attribute. Check {PIXI.TYPES} to see the ones available\r\n     * @param [stride=0] - How far apart, in bytes, the start of each value is. (used for interleaving data)\r\n     * @param [start=0] - How far into the array to start reading values (used for interleaving data)\r\n     * @param instance - Instancing flag\r\n     * @returns - Returns self, useful for chaining.\r\n     */\r\n    addAttribute(id: string, buffer: Buffer_2 | Float32Array | Uint32Array | Array<number>, size?: number, normalized?: boolean, type?: TYPES, stride?: number, start?: number, instance?: boolean): this;\r\n    /**\r\n     * Returns the requested attribute.\r\n     * @param id - The name of the attribute required\r\n     * @returns - The attribute requested.\r\n     */\r\n    getAttribute(id: string): Attribute;\r\n    /**\r\n     * Returns the requested buffer.\r\n     * @param id - The name of the buffer required.\r\n     * @returns - The buffer requested.\r\n     */\r\n    getBuffer(id: string): Buffer_2;\r\n    /**\r\n     *\r\n     * Adds an index buffer to the geometry\r\n     * The index buffer contains integers, three for each triangle in the geometry, which reference the various attribute buffers (position, colour, UV coordinates, other UV coordinates, normal, …). There is only ONE index buffer.\r\n     * @param {PIXI.Buffer|number[]} [buffer] - The buffer that holds the data of the index buffer. You can also provide an Array and a buffer will be created from it.\r\n     * @returns - Returns self, useful for chaining.\r\n     */\r\n    addIndex(buffer?: Buffer_2 | IArrayBuffer | number[]): Geometry;\r\n    /**\r\n     * Returns the index buffer\r\n     * @returns - The index buffer.\r\n     */\r\n    getIndex(): Buffer_2;\r\n    /**\r\n     * This function modifies the structure so that all current attributes become interleaved into a single buffer\r\n     * This can be useful if your model remains static as it offers a little performance boost\r\n     * @returns - Returns self, useful for chaining.\r\n     */\r\n    interleave(): Geometry;\r\n    /** Get the size of the geometries, in vertices. */\r\n    getSize(): number;\r\n    /** Disposes WebGL resources that are connected to this geometry. */\r\n    dispose(): void;\r\n    /** Destroys the geometry. */\r\n    destroy(): void;\r\n    /**\r\n     * Returns a clone of the geometry.\r\n     * @returns - A new clone of this geometry.\r\n     */\r\n    clone(): Geometry;\r\n    /**\r\n     * Merges an array of geometries into a new single one.\r\n     *\r\n     * Geometry attribute styles must match for this operation to work.\r\n     * @param geometries - array of geometries to merge\r\n     * @returns - Shiny new geometry!\r\n     */\r\n    static merge(geometries: Array<Geometry>): Geometry;\r\n}\r\n\r\n/**\r\n * System plugin to the renderer to manage geometry.\r\n * @memberof PIXI\r\n */\r\nexport declare class GeometrySystem implements ISystem {\r\n    /**\r\n     * `true` if we has `*_vertex_array_object` extension.\r\n     * @readonly\r\n     */\r\n    hasVao: boolean;\r\n    /**\r\n     * `true` if has `ANGLE_instanced_arrays` extension.\r\n     * @readonly\r\n     */\r\n    hasInstance: boolean;\r\n    /**\r\n     * `true` if support `gl.UNSIGNED_INT` in `gl.drawElements` or `gl.drawElementsInstanced`.\r\n     * @readonly\r\n     */\r\n    canUseUInt32ElementIndex: boolean;\r\n    protected CONTEXT_UID: number;\r\n    protected gl: IRenderingContext;\r\n    protected _activeGeometry: Geometry;\r\n    protected _activeVao: WebGLVertexArrayObject;\r\n    protected _boundBuffer: GLBuffer;\r\n    /** Cache for all geometries by id, used in case renderer gets destroyed or for profiling. */\r\n    readonly managedGeometries: {\r\n        [key: number]: Geometry;\r\n    };\r\n    /** Renderer that owns this {@link GeometrySystem}. */\r\n    private renderer;\r\n    /** @param renderer - The renderer this System works for. */\r\n    constructor(renderer: Renderer);\r\n    /** Sets up the renderer context and necessary buffers. */\r\n    protected contextChange(): void;\r\n    /**\r\n     * Binds geometry so that is can be drawn. Creating a Vao if required\r\n     * @param geometry - Instance of geometry to bind.\r\n     * @param shader - Instance of shader to use vao for.\r\n     */\r\n    bind(geometry?: Geometry, shader?: Shader): void;\r\n    /** Reset and unbind any active VAO and geometry. */\r\n    reset(): void;\r\n    /** Update buffers of the currently bound geometry. */\r\n    updateBuffers(): void;\r\n    /**\r\n     * Check compatibility between a geometry and a program\r\n     * @param geometry - Geometry instance.\r\n     * @param program - Program instance.\r\n     */\r\n    protected checkCompatibility(geometry: Geometry, program: Program): void;\r\n    /**\r\n     * Takes a geometry and program and generates a unique signature for them.\r\n     * @param geometry - To get signature from.\r\n     * @param program - To test geometry against.\r\n     * @returns - Unique signature of the geometry and program\r\n     */\r\n    protected getSignature(geometry: Geometry, program: Program): string;\r\n    /**\r\n     * Creates or gets Vao with the same structure as the geometry and stores it on the geometry.\r\n     * If vao is created, it is bound automatically. We use a shader to infer what and how to set up the\r\n     * attribute locations.\r\n     * @param geometry - Instance of geometry to to generate Vao for.\r\n     * @param shader - Instance of the shader.\r\n     * @param incRefCount - Increment refCount of all geometry buffers.\r\n     */\r\n    protected initGeometryVao(geometry: Geometry, shader: Shader, incRefCount?: boolean): WebGLVertexArrayObject;\r\n    /**\r\n     * Disposes geometry.\r\n     * @param geometry - Geometry with buffers. Only VAO will be disposed\r\n     * @param [contextLost=false] - If context was lost, we suppress deleteVertexArray\r\n     */\r\n    disposeGeometry(geometry: Geometry, contextLost?: boolean): void;\r\n    /**\r\n     * Dispose all WebGL resources of all managed geometries.\r\n     * @param [contextLost=false] - If context was lost, we suppress `gl.delete` calls\r\n     */\r\n    disposeAll(contextLost?: boolean): void;\r\n    /**\r\n     * Activate vertex array object.\r\n     * @param geometry - Geometry instance.\r\n     * @param program - Shader program instance.\r\n     */\r\n    protected activateVao(geometry: Geometry, program: Program): void;\r\n    /**\r\n     * Draws the currently bound geometry.\r\n     * @param type - The type primitive to render.\r\n     * @param size - The number of elements to be rendered. If not specified, all vertices after the\r\n     *  starting vertex will be drawn.\r\n     * @param start - The starting vertex in the geometry to start drawing from. If not specified,\r\n     *  drawing will start from the first vertex.\r\n     * @param instanceCount - The number of instances of the set of elements to execute. If not specified,\r\n     *  all instances will be drawn.\r\n     */\r\n    draw(type: DRAW_MODES, size?: number, start?: number, instanceCount?: number): this;\r\n    /** Unbind/reset everything. */\r\n    protected unbind(): void;\r\n    destroy(): void;\r\n}\r\n\r\n/**\r\n * returns a little WebGL context to use for program inspection.\r\n * @static\r\n * @private\r\n * @returns {WebGLRenderingContext} a gl context to test with\r\n */\r\nexport declare function getTestContext(): WebGLRenderingContext | WebGL2RenderingContext;\r\n\r\nexport declare function getUBOData(uniforms: Dict<any>, uniformData: Dict<any>): any[];\r\n\r\ndeclare class GLBuffer {\r\n    buffer: WebGLBuffer;\r\n    updateID: number;\r\n    byteLength: number;\r\n    refCount: number;\r\n    constructor(buffer?: WebGLBuffer);\r\n}\r\n\r\n/**\r\n * Internal framebuffer for WebGL context.\r\n * @memberof PIXI\r\n */\r\nexport declare class GLFramebuffer {\r\n    /** The WebGL framebuffer. */\r\n    framebuffer: WebGLFramebuffer;\r\n    /** Stencil+depth , usually costs 32bits per pixel. */\r\n    stencil: WebGLRenderbuffer;\r\n    /** Detected AA samples number. */\r\n    multisample: MSAA_QUALITY;\r\n    /** In case MSAA, we use this Renderbuffer instead of colorTextures[0] when we write info. */\r\n    msaaBuffer: WebGLRenderbuffer;\r\n    /**\r\n     * In case we use MSAA, this is actual framebuffer that has colorTextures[0]\r\n     * The contents of that framebuffer are read when we use that renderTexture in sprites\r\n     */\r\n    blitFramebuffer: Framebuffer;\r\n    /** Latest known version of framebuffer. */\r\n    dirtyId: number;\r\n    /** Latest known version of framebuffer format. */\r\n    dirtyFormat: number;\r\n    /** Latest known version of framebuffer size. */\r\n    dirtySize: number;\r\n    /** Store the current mipmap of the textures the framebuffer will write too. */\r\n    mipLevel: number;\r\n    constructor(framebuffer: WebGLTexture);\r\n}\r\n\r\n/**\r\n * Helper class to create a WebGL Program\r\n * @memberof PIXI\r\n */\r\nexport declare class GLProgram {\r\n    /** The shader program. */\r\n    program: WebGLProgram;\r\n    /**\r\n     * Holds the uniform data which contains uniform locations\r\n     * and current uniform values used for caching and preventing unneeded GPU commands.\r\n     */\r\n    uniformData: Dict<any>;\r\n    /**\r\n     * UniformGroups holds the various upload functions for the shader. Each uniform group\r\n     * and program have a unique upload function generated.\r\n     */\r\n    uniformGroups: Dict<any>;\r\n    /** A hash that stores where UBOs are bound to on the program. */\r\n    uniformBufferBindings: Dict<any>;\r\n    /** A hash for lazily-generated uniform uploading functions. */\r\n    uniformSync: Dict<any>;\r\n    /**\r\n     * A place where dirty ticks are stored for groups\r\n     * If a tick here does not match with the Higher level Programs tick, it means\r\n     * we should re upload the data.\r\n     */\r\n    uniformDirtyGroups: Dict<any>;\r\n    /**\r\n     * Makes a new Pixi program.\r\n     * @param program - webgl program\r\n     * @param uniformData - uniforms\r\n     */\r\n    constructor(program: WebGLProgram, uniformData: {\r\n        [key: string]: IGLUniformData;\r\n    });\r\n    /** Destroys this program. */\r\n    destroy(): void;\r\n}\r\n\r\n/**\r\n * Internal texture for WebGL context.\r\n * @memberof PIXI\r\n */\r\nexport declare class GLTexture {\r\n    /** The WebGL texture. */\r\n    texture: WebGLTexture;\r\n    /** Width of texture that was used in texImage2D. */\r\n    width: number;\r\n    /** Height of texture that was used in texImage2D. */\r\n    height: number;\r\n    /** Whether mip levels has to be generated. */\r\n    mipmap: boolean;\r\n    /** WrapMode copied from baseTexture. */\r\n    wrapMode: number;\r\n    /** Type copied from baseTexture. */\r\n    type: number;\r\n    /** Type copied from baseTexture. */\r\n    internalFormat: number;\r\n    /** Type of sampler corresponding to this texture. See {@link PIXI.SAMPLER_TYPES} */\r\n    samplerType: number;\r\n    /** Texture contents dirty flag. */\r\n    dirtyId: number;\r\n    /** Texture style dirty flag. */\r\n    dirtyStyleId: number;\r\n    constructor(texture: WebGLTexture);\r\n}\r\n\r\n/**\r\n * Marks places in PixiJS where you can pass Float32Array, UInt32Array, any typed arrays, and ArrayBuffer\r\n *\r\n * Same as ArrayBuffer in typescript lib, defined here just for documentation\r\n */\r\nexport declare interface IArrayBuffer extends ArrayBuffer {\r\n}\r\n\r\nexport declare interface IAttributeData {\r\n    type: string;\r\n    size: number;\r\n    location: number;\r\n    name: string;\r\n}\r\n\r\nexport declare type IAutoDetectOptions = ISize | ICubeResourceOptions | IImageResourceOptions | ISVGResourceOptions | IVideoResourceOptions | IResourcePluginOptions;\r\n\r\nexport declare interface IBaseTextureOptions<RO = any> {\r\n    alphaMode?: ALPHA_MODES;\r\n    mipmap?: MIPMAP_MODES;\r\n    anisotropicLevel?: number;\r\n    scaleMode?: SCALE_MODES;\r\n    width?: number;\r\n    height?: number;\r\n    wrapMode?: WRAP_MODES;\r\n    format?: FORMATS;\r\n    type?: TYPES;\r\n    target?: TARGETS;\r\n    resolution?: number;\r\n    multisample?: MSAA_QUALITY;\r\n    resourceOptions?: RO;\r\n    pixiIdPrefix?: string;\r\n}\r\n\r\n/**\r\n * Interface for elements like Sprite, Mesh etc. for batching.\r\n * @memberof PIXI\r\n */\r\nexport declare interface IBatchableElement {\r\n    _texture: Texture;\r\n    vertexData: Float32Array;\r\n    indices: Uint16Array | Uint32Array | Array<number>;\r\n    uvs: Float32Array;\r\n    worldAlpha: number;\r\n    _tintRGB: number;\r\n    blendMode: BLEND_MODES;\r\n}\r\n\r\nexport declare interface IBatchFactoryOptions {\r\n    vertex?: string;\r\n    fragment?: string;\r\n    geometryClass?: typeof BatchGeometry;\r\n    vertexSize?: number;\r\n}\r\n\r\n/** Constructor options for CubeResource */\r\nexport declare interface ICubeResourceOptions extends ISize {\r\n    /** Whether to auto-load resources */\r\n    autoLoad?: boolean;\r\n    /** In case BaseTextures are supplied, whether to copy them or use. */\r\n    linkBaseTexture?: boolean;\r\n}\r\n\r\nexport declare interface IFilterTarget {\r\n    filterArea: Rectangle;\r\n    getBounds(skipUpdate?: boolean): Rectangle;\r\n}\r\n\r\nexport declare interface IGenerateTextureOptions {\r\n    scaleMode?: SCALE_MODES;\r\n    resolution?: number;\r\n    region?: Rectangle;\r\n    multisample?: MSAA_QUALITY;\r\n}\r\n\r\n/**\r\n * @private\r\n */\r\nexport declare class IGLUniformData {\r\n    location: WebGLUniformLocation;\r\n    value: number | boolean | Float32Array | Int32Array | Uint32Array | boolean[];\r\n}\r\n\r\nexport declare interface IImageResourceOptions {\r\n    /** Start loading process */\r\n    autoLoad?: boolean;\r\n    /** Whether its required to create a bitmap before upload. */\r\n    createBitmap?: boolean;\r\n    /** Load image using cross origin. */\r\n    crossorigin?: boolean | string;\r\n    /** Premultiply image alpha in bitmap. */\r\n    alphaMode?: ALPHA_MODES;\r\n}\r\n\r\n/**\r\n * Resource type for ImageBitmap.\r\n * @memberof PIXI\r\n */\r\nexport declare class ImageBitmapResource extends BaseImageResource {\r\n    /**\r\n     * @param source - Image element to use\r\n     */\r\n    constructor(source: ImageBitmap);\r\n    /**\r\n     * Used to auto-detect the type of resource.\r\n     * @param {*} source - The source object\r\n     * @returns {boolean} `true` if source is an ImageBitmap\r\n     */\r\n    static test(source: unknown): source is ImageBitmap;\r\n}\r\n\r\n/**\r\n * Resource type for HTMLImageElement.\r\n * @memberof PIXI\r\n */\r\nexport declare class ImageResource extends BaseImageResource {\r\n    /** URL of the image source */\r\n    url: string;\r\n    /**\r\n     * If the image should be disposed after upload\r\n     * @default false\r\n     */\r\n    preserveBitmap: boolean;\r\n    /**\r\n     * If capable, convert the image using createImageBitmap API.\r\n     * @default PIXI.settings.CREATE_IMAGE_BITMAP\r\n     */\r\n    createBitmap: boolean;\r\n    /**\r\n     * Controls texture alphaMode field\r\n     * Copies from options\r\n     * Default is `null`, copies option from baseTexture\r\n     * @readonly\r\n     */\r\n    alphaMode: ALPHA_MODES;\r\n    /**\r\n     * The ImageBitmap element created for a {@code HTMLImageElement}.\r\n     * @default null\r\n     */\r\n    bitmap: ImageBitmap;\r\n    /**\r\n     * Promise when loading.\r\n     * @default null\r\n     */\r\n    private _load;\r\n    /** When process is completed */\r\n    private _process;\r\n    /**\r\n     * @param source - image source or URL\r\n     * @param options\r\n     * @param {boolean} [options.autoLoad=true] - start loading process\r\n     * @param {boolean} [options.createBitmap=PIXI.settings.CREATE_IMAGE_BITMAP] - whether its required to create\r\n     *        a bitmap before upload\r\n     * @param {boolean} [options.crossorigin=true] - Load image using cross origin\r\n     * @param {PIXI.ALPHA_MODES} [options.alphaMode=PIXI.ALPHA_MODES.UNPACK] - Premultiply image alpha in bitmap\r\n     */\r\n    constructor(source: HTMLImageElement | string, options?: IImageResourceOptions);\r\n    /**\r\n     * Returns a promise when image will be loaded and processed.\r\n     * @param createBitmap - whether process image into bitmap\r\n     */\r\n    load(createBitmap?: boolean): Promise<ImageResource>;\r\n    /**\r\n     * Called when we need to convert image into BitmapImage.\r\n     * Can be called multiple times, real promise is cached inside.\r\n     * @returns - Cached promise to fill that bitmap\r\n     */\r\n    process(): Promise<ImageResource>;\r\n    /**\r\n     * Upload the image resource to GPU.\r\n     * @param renderer - Renderer to upload to\r\n     * @param baseTexture - BaseTexture for this resource\r\n     * @param glTexture - GLTexture to use\r\n     * @returns {boolean} true is success\r\n     */\r\n    upload(renderer: Renderer, baseTexture: BaseTexture, glTexture: GLTexture): boolean;\r\n    /** Destroys this resource. */\r\n    dispose(): void;\r\n    /**\r\n     * Used to auto-detect the type of resource.\r\n     * @param {*} source - The source object\r\n     * @returns {boolean} `true` if source is string or HTMLImageElement\r\n     */\r\n    static test(source: unknown): source is string | HTMLImageElement;\r\n}\r\n\r\nexport declare type ImageSource = HTMLImageElement | HTMLCanvasElement | HTMLVideoElement | ImageBitmap;\r\n\r\nexport declare interface IMaskTarget extends IFilterTarget {\r\n    renderable: boolean;\r\n    isSprite?: boolean;\r\n    worldTransform: Matrix;\r\n    isFastRect?(): boolean;\r\n    getBounds(skipUpdate?: boolean): Rectangle;\r\n    render(renderer: Renderer): void;\r\n}\r\n\r\n/**\r\n * Collection of installed resource types, class must extend {@link PIXI.Resource}.\r\n * @example\r\n * class CustomResource extends PIXI.Resource {\r\n *   // MUST have source, options constructor signature\r\n *   // for auto-detected resources to be created.\r\n *   constructor(source, options) {\r\n *     super();\r\n *   }\r\n *   upload(renderer, baseTexture, glTexture) {\r\n *     // upload with GL\r\n *     return true;\r\n *   }\r\n *   // used to auto-detect resource\r\n *   static test(source, extension) {\r\n *     return extension === 'xyz'|| source instanceof SomeClass;\r\n *   }\r\n * }\r\n * // Install the new resource type\r\n * PIXI.INSTALLED.push(CustomResource);\r\n * @memberof PIXI\r\n * @type {Array<PIXI.IResourcePlugin>}\r\n * @static\r\n * @readonly\r\n */\r\nexport declare const INSTALLED: Array<IResourcePlugin<any, any>>;\r\n\r\n/**\r\n * Interface for Container to interface with Renderer.\r\n * @memberof PIXI\r\n */\r\nexport declare interface IRenderableContainer extends IRenderableObject {\r\n    /** Get Local bounds for container */\r\n    getLocalBounds(rect?: Rectangle, skipChildrenUpdate?: boolean): Rectangle;\r\n}\r\n\r\n/**\r\n * Interface for DisplayObject to interface with Renderer.\r\n * The minimum APIs needed to implement a renderable object.\r\n * @memberof PIXI\r\n */\r\nexport declare interface IRenderableObject {\r\n    /** Object must have a parent container */\r\n    parent: IRenderableContainer;\r\n    /** Before method for transform updates */\r\n    enableTempParent(): IRenderableContainer;\r\n    /** Update the transforms */\r\n    updateTransform(): void;\r\n    /** After method for transform updates */\r\n    disableTempParent(parent: IRenderableContainer): void;\r\n    /** Render object directly */\r\n    render(renderer: Renderer): void;\r\n}\r\n\r\nexport declare interface IRendererOptions extends GlobalMixins.IRendererOptions {\r\n    width?: number;\r\n    height?: number;\r\n    view?: HTMLCanvasElement;\r\n    useContextAlpha?: boolean | 'notMultiplied';\r\n    /**\r\n     * Use `backgroundAlpha` instead.\r\n     * @deprecated\r\n     */\r\n    transparent?: boolean;\r\n    autoDensity?: boolean;\r\n    antialias?: boolean;\r\n    resolution?: number;\r\n    preserveDrawingBuffer?: boolean;\r\n    clearBeforeRender?: boolean;\r\n    backgroundColor?: number;\r\n    backgroundAlpha?: number;\r\n    powerPreference?: WebGLPowerPreference;\r\n    context?: IRenderingContext;\r\n}\r\n\r\nexport declare interface IRendererOptionsAuto extends IRendererOptions {\r\n    forceCanvas?: boolean;\r\n}\r\n\r\nexport declare interface IRendererPlugin {\r\n    destroy(): void;\r\n}\r\n\r\nexport declare interface IRendererPluginConstructor {\r\n    new (renderer: Renderer, options?: any): IRendererPlugin;\r\n}\r\n\r\nexport declare interface IRendererPlugins {\r\n    [key: string]: any;\r\n}\r\n\r\nexport declare interface IRendererRenderOptions {\r\n    renderTexture?: RenderTexture;\r\n    clear?: boolean;\r\n    transform?: Matrix;\r\n    skipUpdateTransform?: boolean;\r\n}\r\n\r\n/** Mixed WebGL1/WebGL2 Rendering Context. Either its WebGL2, either its WebGL1 with PixiJS polyfills on it */\r\nexport declare interface IRenderingContext extends WebGL2RenderingContext {\r\n}\r\n\r\n/**\r\n * Shape of supported resource plugins\r\n * @memberof PIXI\r\n */\r\nexport declare interface IResourcePlugin<R, RO> {\r\n    test(source: unknown, extension: string): boolean;\r\n    new (source: any, options?: RO): R;\r\n}\r\n\r\nexport declare type IResourcePluginOptions = {\r\n    [key: string]: any;\r\n};\r\n\r\nexport declare interface ISpriteMaskFilter extends Filter {\r\n    maskSprite: IMaskTarget;\r\n}\r\n\r\nexport declare interface ISpriteMaskTarget extends IMaskTarget {\r\n    _texture: Texture;\r\n    worldAlpha: number;\r\n    anchor: Point;\r\n}\r\n\r\nexport declare interface ISupportDict {\r\n    uint32Indices: boolean;\r\n}\r\n\r\nexport declare interface ISVGResourceOptions {\r\n    source?: string;\r\n    scale?: number;\r\n    width?: number;\r\n    height?: number;\r\n    autoLoad?: boolean;\r\n    crossorigin?: boolean | string;\r\n}\r\n\r\n/**\r\n * Interface for systems used by the {@link PIXI.Renderer}.\r\n * @memberof PIXI\r\n */\r\nexport declare interface ISystem {\r\n    /** Generic destroy methods to be overridden by the subclass */\r\n    destroy(): void;\r\n}\r\n\r\n/**\r\n * Types for system and pipe classes.\r\n * @ignore\r\n */\r\nexport declare interface ISystemConstructor<R = Renderer> {\r\n    new (renderer: R): ISystem;\r\n}\r\n\r\n/**\r\n * PixiJS classes use this type instead of ArrayBuffer and typed arrays\r\n * to support expressions like `geometry.buffers[0].data[0] = position.x`.\r\n *\r\n * Gives access to indexing and `length` field\r\n * * @popelyshev: If data is actually ArrayBuffer and throws Exception on indexing - its user problem :)\r\n */\r\nexport declare interface ITypedArray extends IArrayBuffer {\r\n    readonly length: number;\r\n    [index: number]: number;\r\n    readonly BYTES_PER_ELEMENT: number;\r\n}\r\n\r\nexport declare interface IUniformData {\r\n    index: number;\r\n    type: string;\r\n    size: number;\r\n    isArray: boolean;\r\n    value: any;\r\n    name: string;\r\n}\r\n\r\nexport declare interface IUniformParser {\r\n    test(data: unknown, uniform: any): boolean;\r\n    code(name: string, uniform: any): string;\r\n    codeUbo?(name: string, uniform: any): string;\r\n}\r\n\r\nexport declare interface IUnloadableTexture {\r\n    _texture: Texture | RenderTexture;\r\n    children: IUnloadableTexture[];\r\n}\r\n\r\nexport declare interface IVideoResourceOptions {\r\n    autoLoad?: boolean;\r\n    autoPlay?: boolean;\r\n    updateFPS?: number;\r\n    crossorigin?: boolean | string;\r\n}\r\n\r\nexport declare interface IVideoResourceOptionsElement {\r\n    src: string;\r\n    mime: string;\r\n}\r\n\r\n/**\r\n * Component for masked elements.\r\n *\r\n * Holds mask mode and temporary data about current mask.\r\n * @memberof PIXI\r\n */\r\nexport declare class MaskData {\r\n    /** Mask type */\r\n    type: MASK_TYPES;\r\n    /**\r\n     * Whether we know the mask type beforehand\r\n     * @default true\r\n     */\r\n    autoDetect: boolean;\r\n    /**\r\n     * Which element we use to mask\r\n     * @member {PIXI.DisplayObject}\r\n     */\r\n    maskObject: IMaskTarget;\r\n    /** Whether it belongs to MaskSystem pool */\r\n    pooled: boolean;\r\n    /** Indicator of the type (always true for {@link MaskData} objects) */\r\n    isMaskData: boolean;\r\n    /**\r\n     * Resolution of the sprite mask filter.\r\n     * If set to `null` or `0`, the resolution of the current render target is used.\r\n     * @default null\r\n     */\r\n    resolution: number;\r\n    /**\r\n     * Number of samples of the sprite mask filter.\r\n     * If set to `null`, the sample count of the current render target is used.\r\n     * @default PIXI.settings.FILTER_MULTISAMPLE\r\n     */\r\n    multisample: MSAA_QUALITY;\r\n    /** If enabled is true the mask is applied, if false it will not. */\r\n    enabled: boolean;\r\n    /**\r\n     * The sprite mask filter wrapped in an array.\r\n     * @private\r\n     */\r\n    _filters: ISpriteMaskFilter_2[];\r\n    /**\r\n     * Stencil counter above the mask in stack\r\n     * @private\r\n     */\r\n    _stencilCounter: number;\r\n    /**\r\n     * Scissor counter above the mask in stack\r\n     * @private\r\n     */\r\n    _scissorCounter: number;\r\n    /** Scissor operation above the mask in stack. Null if _scissorCounter is zero, rectangle instance if positive. */\r\n    _scissorRect: Rectangle;\r\n    /** pre-computed scissor rect does become _scissorRect when mask is actually pushed */\r\n    _scissorRectLocal: Rectangle;\r\n    /**\r\n     * Targeted element. Temporary variable set by MaskSystem\r\n     * @member {PIXI.DisplayObject}\r\n     * @private\r\n     */\r\n    _target: IMaskTarget;\r\n    /**\r\n     * Create MaskData\r\n     * @param {PIXI.DisplayObject} [maskObject=null] - object that describes the mask\r\n     */\r\n    constructor(maskObject?: IMaskTarget);\r\n    /**\r\n     * The sprite mask filter.\r\n     * If set to `null`, the default sprite mask filter is used.\r\n     * @default null\r\n     */\r\n    get filter(): ISpriteMaskFilter_2;\r\n    set filter(value: ISpriteMaskFilter_2);\r\n    /** Resets the mask data after popMask(). */\r\n    reset(): void;\r\n    /**\r\n     * Copies counters from maskData above, called from pushMask().\r\n     * @param maskAbove\r\n     */\r\n    copyCountersOrReset(maskAbove?: MaskData): void;\r\n}\r\n\r\n/**\r\n * System plugin to the renderer to manage masks.\r\n *\r\n * There are three built-in types of masking:\r\n * **Scissor Masking**: Scissor masking discards pixels that are outside of a rectangle called the scissor box. It is\r\n *  the most performant as the scissor test is inexpensive. However, it can only be used when the mask is rectangular.\r\n * **Stencil Masking**: Stencil masking discards pixels that don't overlap with the pixels rendered into the stencil\r\n *  buffer. It is the next fastest option as it does not require rendering into a separate framebuffer. However, it does\r\n *  cause the mask to be rendered **twice** for each masking operation; hence, minimize the rendering cost of your masks.\r\n * **Sprite Mask Filtering**: Sprite mask filtering discards pixels based on the red channel of the sprite-mask's\r\n *  texture. (Generally, the masking texture is grayscale). Using advanced techniques, you might be able to embed this\r\n *  type of masking in a custom shader - and hence, bypassing the masking system fully for performance wins.\r\n *\r\n * The best type of masking is auto-detected when you `push` one. To use scissor masking, you must pass in a `Graphics`\r\n * object with just a rectangle drawn.\r\n *\r\n * ## Mask Stacks\r\n *\r\n * In the scene graph, masks can be applied recursively, i.e. a mask can be applied during a masking operation. The mask\r\n * stack stores the currently applied masks in order. Each {@link PIXI.BaseRenderTexture} holds its own mask stack, i.e.\r\n * when you switch render-textures, the old masks only applied when you switch back to rendering to the old render-target.\r\n * @memberof PIXI\r\n */\r\nexport declare class MaskSystem implements ISystem {\r\n    /**\r\n     * Flag to enable scissor masking.\r\n     * @default true\r\n     */\r\n    enableScissor: boolean;\r\n    /** Pool of used sprite mask filters. */\r\n    protected readonly alphaMaskPool: Array<SpriteMaskFilter[]>;\r\n    /**\r\n     * Current index of alpha mask pool.\r\n     * @default 0\r\n     * @readonly\r\n     */\r\n    protected alphaMaskIndex: number;\r\n    /** Pool of mask data. */\r\n    private readonly maskDataPool;\r\n    private maskStack;\r\n    private renderer;\r\n    /**\r\n     * @param renderer - The renderer this System works for.\r\n     */\r\n    constructor(renderer: Renderer);\r\n    /**\r\n     * Changes the mask stack that is used by this System.\r\n     * @param maskStack - The mask stack\r\n     */\r\n    setMaskStack(maskStack: Array<MaskData>): void;\r\n    /**\r\n     * Enables the mask and appends it to the current mask stack.\r\n     *\r\n     * NOTE: The batch renderer should be flushed beforehand to prevent pending renders from being masked.\r\n     * @param {PIXI.DisplayObject} target - Display Object to push the mask to\r\n     * @param {PIXI.MaskData|PIXI.Sprite|PIXI.Graphics|PIXI.DisplayObject} maskDataOrTarget - The masking data.\r\n     */\r\n    push(target: IMaskTarget, maskDataOrTarget: MaskData | IMaskTarget): void;\r\n    /**\r\n     * Removes the last mask from the mask stack and doesn't return it.\r\n     *\r\n     * NOTE: The batch renderer should be flushed beforehand to render the masked contents before the mask is removed.\r\n     * @param {PIXI.IMaskTarget} target - Display Object to pop the mask from\r\n     */\r\n    pop(target: IMaskTarget): void;\r\n    /**\r\n     * Sets type of MaskData based on its maskObject.\r\n     * @param maskData\r\n     */\r\n    detect(maskData: MaskData): void;\r\n    /**\r\n     * Applies the Mask and adds it to the current filter stack.\r\n     * @param maskData - Sprite to be used as the mask.\r\n     */\r\n    pushSpriteMask(maskData: MaskData): void;\r\n    /**\r\n     * Removes the last filter from the filter stack and doesn't return it.\r\n     * @param maskData - Sprite to be used as the mask.\r\n     */\r\n    popSpriteMask(maskData: MaskData): void;\r\n    destroy(): void;\r\n}\r\n\r\n/**\r\n * Base for a common object renderer that can be used as a\r\n * system renderer plugin.\r\n * @memberof PIXI\r\n */\r\nexport declare class ObjectRenderer implements ISystem {\r\n    /** The renderer this manager works for. */\r\n    protected renderer: Renderer;\r\n    /**\r\n     * @param renderer - The renderer this manager works for.\r\n     */\r\n    constructor(renderer: Renderer);\r\n    /** Stub method that should be used to empty the current batch by rendering objects now. */\r\n    flush(): void;\r\n    /** Generic destruction method that frees all resources. This should be called by subclasses. */\r\n    destroy(): void;\r\n    /**\r\n     * Stub method that initializes any state required before\r\n     * rendering starts. It is different from the `prerender`\r\n     * signal, which occurs every frame, in that it is called\r\n     * whenever an object requests _this_ renderer specifically.\r\n     */\r\n    start(): void;\r\n    /** Stops the renderer. It should free up any state and become dormant. */\r\n    stop(): void;\r\n    /**\r\n     * Keeps the object to render. It doesn't have to be\r\n     * rendered immediately.\r\n     * @param {PIXI.DisplayObject} _object - The object to render.\r\n     */\r\n    render(_object: any): void;\r\n}\r\n\r\n/**\r\n * Helper class to create a shader program.\r\n * @memberof PIXI\r\n */\r\nexport declare class Program {\r\n    id: number;\r\n    /** Source code for the vertex shader. */\r\n    vertexSrc: string;\r\n    /** Source code for the fragment shader. */\r\n    fragmentSrc: string;\r\n    nameCache: any;\r\n    glPrograms: {\r\n        [key: number]: GLProgram;\r\n    };\r\n    syncUniforms: any;\r\n    /** Assigned when a program is first bound to the shader system. */\r\n    attributeData: {\r\n        [key: string]: IAttributeData;\r\n    };\r\n    /** Assigned when a program is first bound to the shader system. */\r\n    uniformData: {\r\n        [key: string]: IUniformData;\r\n    };\r\n    /**\r\n     * @param vertexSrc - The source of the vertex shader.\r\n     * @param fragmentSrc - The source of the fragment shader.\r\n     * @param name - Name for shader\r\n     */\r\n    constructor(vertexSrc?: string, fragmentSrc?: string, name?: string);\r\n    /**\r\n     * The default vertex shader source.\r\n     * @constant\r\n     */\r\n    static get defaultVertexSrc(): string;\r\n    /**\r\n     * The default fragment shader source.\r\n     * @constant\r\n     */\r\n    static get defaultFragmentSrc(): string;\r\n    /**\r\n     * A short hand function to create a program based of a vertex and fragment shader.\r\n     *\r\n     * This method will also check to see if there is a cached program.\r\n     * @param vertexSrc - The source of the vertex shader.\r\n     * @param fragmentSrc - The source of the fragment shader.\r\n     * @param name - Name for shader\r\n     * @returns A shiny new PixiJS shader program!\r\n     */\r\n    static from(vertexSrc?: string, fragmentSrc?: string, name?: string): Program;\r\n}\r\n\r\n/**\r\n * System plugin to the renderer to manage the projection matrix.\r\n *\r\n * The `projectionMatrix` is a global uniform provided to all shaders. It is used to transform points in world space to\r\n * normalized device coordinates.\r\n * @memberof PIXI\r\n */\r\nexport declare class ProjectionSystem implements ISystem {\r\n    /**\r\n     * The destination frame used to calculate the current projection matrix.\r\n     *\r\n     * The destination frame is the rectangle in the render-target into which contents are rendered. If rendering\r\n     * to the screen, the origin is on the top-left. If rendering to a framebuffer, the origin is on the\r\n     * bottom-left. This \"flipping\" phenomenon is because of WebGL convention for (shader) texture coordinates, where\r\n     * the bottom-left corner is (0,0). It allows display-objects to map their (0,0) position in local-space (top-left)\r\n     * to (0,0) in texture space (bottom-left). In other words, a sprite's top-left corner actually renders the\r\n     * texture's bottom-left corner. You will also notice this when using a tool like SpectorJS to view your textures\r\n     * at runtime.\r\n     *\r\n     * The destination frame's dimensions (width,height) should be equal to the source frame. This is because,\r\n     * otherwise, the contents will be scaled to fill the destination frame. Similarly, the destination frame's (x,y)\r\n     * coordinates are (0,0) unless you know what you're doing.\r\n     * @readonly\r\n     */\r\n    destinationFrame: Rectangle;\r\n    /**\r\n     * The source frame used to calculate the current projection matrix.\r\n     *\r\n     * The source frame is the rectangle in world space containing the contents to be rendered.\r\n     * @readonly\r\n     */\r\n    sourceFrame: Rectangle;\r\n    /**\r\n     * Default destination frame\r\n     *\r\n     * This is not used internally. It is not advised to use this feature specifically unless you know what\r\n     * you're doing. The `update` method will default to this frame if you do not pass the destination frame.\r\n     * @readonly\r\n     */\r\n    defaultFrame: Rectangle;\r\n    /**\r\n     * Projection matrix\r\n     *\r\n     * This matrix can be used to transform points from world space to normalized device coordinates, and is calculated\r\n     * from the sourceFrame → destinationFrame mapping provided.\r\n     *\r\n     * The renderer's `globalUniforms` keeps a reference to this, and so it is available for all shaders to use as a\r\n     * uniform.\r\n     * @readonly\r\n     */\r\n    projectionMatrix: Matrix;\r\n    /**\r\n     * A transform to be appended to the projection matrix.\r\n     *\r\n     * This can be used to transform points in world-space one last time before they are outputted by the shader. You can\r\n     * use to rotate the whole scene, for example. Remember to clear it once you've rendered everything.\r\n     * @member {PIXI.Matrix}\r\n     */\r\n    transform: Matrix;\r\n    private renderer;\r\n    /** @param renderer - The renderer this System works for. */\r\n    constructor(renderer: Renderer);\r\n    /**\r\n     * Updates the projection-matrix based on the sourceFrame → destinationFrame mapping provided.\r\n     *\r\n     * NOTE: It is expected you call `renderer.framebuffer.setViewport(destinationFrame)` after this. This is because\r\n     * the framebuffer viewport converts shader vertex output in normalized device coordinates to window coordinates.\r\n     *\r\n     * NOTE-2: {@link RenderTextureSystem#bind} updates the projection-matrix when you bind a render-texture. It is expected\r\n     * that you dirty the current bindings when calling this manually.\r\n     * @param destinationFrame - The rectangle in the render-target to render the contents into. If rendering to the canvas,\r\n     *  the origin is on the top-left; if rendering to a render-texture, the origin is on the bottom-left.\r\n     * @param sourceFrame - The rectangle in world space that contains the contents being rendered.\r\n     * @param resolution - The resolution of the render-target, which is the ratio of\r\n     *  world-space (or CSS) pixels to physical pixels.\r\n     * @param root - Whether the render-target is the screen. This is required because rendering to textures\r\n     *  is y-flipped (i.e. upside down relative to the screen).\r\n     */\r\n    update(destinationFrame: Rectangle, sourceFrame: Rectangle, resolution: number, root: boolean): void;\r\n    /**\r\n     * Calculates the `projectionMatrix` to map points inside `sourceFrame` to inside `destinationFrame`.\r\n     * @param _destinationFrame - The destination frame in the render-target.\r\n     * @param sourceFrame - The source frame in world space.\r\n     * @param _resolution - The render-target's resolution, i.e. ratio of CSS to physical pixels.\r\n     * @param root - Whether rendering into the screen. Otherwise, if rendering to a framebuffer, the projection\r\n     *  is y-flipped.\r\n     */\r\n    calculateProjection(_destinationFrame: Rectangle, sourceFrame: Rectangle, _resolution: number, root: boolean): void;\r\n    /**\r\n     * Sets the transform of the active render target to the given matrix.\r\n     * @param _matrix - The transformation matrix\r\n     */\r\n    setTransform(_matrix: Matrix): void;\r\n    destroy(): void;\r\n}\r\n\r\n/**\r\n * Helper class to create a quad\r\n * @memberof PIXI\r\n */\r\nexport declare class Quad extends Geometry {\r\n    constructor();\r\n}\r\n\r\n/**\r\n * Helper class to create a quad with uvs like in v4\r\n * @memberof PIXI\r\n */\r\nexport declare class QuadUv extends Geometry {\r\n    vertexBuffer: Buffer_2;\r\n    uvBuffer: Buffer_2;\r\n    /** An array of vertices. */\r\n    vertices: Float32Array;\r\n    /** The Uvs of the quad. */\r\n    uvs: Float32Array;\r\n    constructor();\r\n    /**\r\n     * Maps two Rectangle to the quad.\r\n     * @param targetTextureFrame - The first rectangle\r\n     * @param destinationFrame - The second rectangle\r\n     * @returns - Returns itself.\r\n     */\r\n    map(targetTextureFrame: Rectangle, destinationFrame: Rectangle): this;\r\n    /**\r\n     * Legacy upload method, just marks buffers dirty.\r\n     * @returns - Returns itself.\r\n     */\r\n    invalidate(): this;\r\n}\r\n\r\n/**\r\n * The Renderer draws the scene and all its content onto a WebGL enabled canvas.\r\n *\r\n * This renderer should be used for browsers that support WebGL.\r\n *\r\n * This renderer works by automatically managing WebGLBatchesm, so no need for Sprite Batches or Sprite Clouds.\r\n * Don't forget to add the view to your DOM or you will not see anything!\r\n *\r\n * Renderer is composed of systems that manage specific tasks. The following systems are added by default\r\n * whenever you create a renderer:\r\n *\r\n * | System                               | Description                                                                   |\r\n * | ------------------------------------ | ----------------------------------------------------------------------------- |\r\n * | {@link PIXI.BatchSystem}             | This manages object renderers that defer rendering until a flush.             |\r\n * | {@link PIXI.ContextSystem}           | This manages the WebGL context and extensions.                                |\r\n * | {@link PIXI.EventSystem}             | This manages UI events.                                                       |\r\n * | {@link PIXI.FilterSystem}            | This manages the filtering pipeline for post-processing effects.              |\r\n * | {@link PIXI.FramebufferSystem}       | This manages framebuffers, which are used for offscreen rendering.            |\r\n * | {@link PIXI.GeometrySystem}          | This manages geometries & buffers, which are used to draw object meshes.      |\r\n * | {@link PIXI.MaskSystem}              | This manages masking operations.                                              |\r\n * | {@link PIXI.ProjectionSystem}        | This manages the `projectionMatrix`, used by shaders to get NDC coordinates.  |\r\n * | {@link PIXI.RenderTextureSystem}     | This manages render-textures, which are an abstraction over framebuffers.     |\r\n * | {@link PIXI.ScissorSystem}           | This handles scissor masking, and is used internally by {@link MaskSystem}    |\r\n * | {@link PIXI.ShaderSystem}            | This manages shaders, programs that run on the GPU to calculate 'em pixels.   |\r\n * | {@link PIXI.StateSystem}             | This manages the WebGL state variables like blend mode, depth testing, etc.   |\r\n * | {@link PIXI.StencilSystem}           | This handles stencil masking, and is used internally by {@link MaskSystem}    |\r\n * | {@link PIXI.TextureSystem}           | This manages textures and their resources on the GPU.                         |\r\n * | {@link PIXI.TextureGCSystem}         | This will automatically remove textures from the GPU if they are not used.    |\r\n *\r\n * The breadth of the API surface provided by the renderer is contained within these systems.\r\n * @memberof PIXI\r\n */\r\nexport declare class Renderer extends AbstractRenderer {\r\n    /**\r\n     * WebGL context, set by {@link PIXI.ContextSystem this.context}.\r\n     * @readonly\r\n     * @member {WebGLRenderingContext}\r\n     */\r\n    gl: IRenderingContext;\r\n    /** Global uniforms */\r\n    globalUniforms: UniformGroup;\r\n    /** Unique UID assigned to the renderer's WebGL context. */\r\n    CONTEXT_UID: number;\r\n    /**\r\n     * Flag if we are rendering to the screen vs renderTexture\r\n     * @readonly\r\n     * @default true\r\n     */\r\n    renderingToScreen: boolean;\r\n    /**\r\n     * The number of msaa samples of the canvas.\r\n     * @readonly\r\n     */\r\n    multisample: MSAA_QUALITY;\r\n    /**\r\n     * Mask system instance\r\n     * @readonly\r\n     */\r\n    mask: MaskSystem;\r\n    /**\r\n     * Context system instance\r\n     * @readonly\r\n     */\r\n    context: ContextSystem;\r\n    /**\r\n     * State system instance\r\n     * @readonly\r\n     */\r\n    state: StateSystem;\r\n    /**\r\n     * Shader system instance\r\n     * @readonly\r\n     */\r\n    shader: ShaderSystem;\r\n    /**\r\n     * Texture system instance\r\n     * @readonly\r\n     */\r\n    texture: TextureSystem;\r\n    /**\r\n     * Buffer system instance\r\n     * @readonly\r\n     */\r\n    buffer: BufferSystem;\r\n    /**\r\n     * Geometry system instance\r\n     * @readonly\r\n     */\r\n    geometry: GeometrySystem;\r\n    /**\r\n     * Framebuffer system instance\r\n     * @readonly\r\n     */\r\n    framebuffer: FramebufferSystem;\r\n    /**\r\n     * Scissor system instance\r\n     * @readonly\r\n     */\r\n    scissor: ScissorSystem;\r\n    /**\r\n     * Stencil system instance\r\n     * @readonly\r\n     */\r\n    stencil: StencilSystem;\r\n    /**\r\n     * Projection system instance\r\n     * @readonly\r\n     */\r\n    projection: ProjectionSystem;\r\n    /**\r\n     * Texture garbage collector system instance\r\n     * @readonly\r\n     */\r\n    textureGC: TextureGCSystem;\r\n    /**\r\n     * Filter system instance\r\n     * @readonly\r\n     */\r\n    filter: FilterSystem;\r\n    /**\r\n     * RenderTexture system instance\r\n     * @readonly\r\n     */\r\n    renderTexture: RenderTextureSystem;\r\n    /**\r\n     * Batch system instance\r\n     * @readonly\r\n     */\r\n    batch: BatchSystem;\r\n    /**\r\n     * Internal signal instances of **runner**, these\r\n     * are assigned to each system created.\r\n     * @see PIXI.Runner\r\n     * @name runners\r\n     * @private\r\n     * @type {object}\r\n     * @readonly\r\n     * @property {PIXI.Runner} destroy - Destroy runner\r\n     * @property {PIXI.Runner} contextChange - Context change runner\r\n     * @property {PIXI.Runner} reset - Reset runner\r\n     * @property {PIXI.Runner} update - Update runner\r\n     * @property {PIXI.Runner} postrender - Post-render runner\r\n     * @property {PIXI.Runner} prerender - Pre-render runner\r\n     * @property {PIXI.Runner} resize - Resize runner\r\n     */\r\n    runners: {\r\n        [key: string]: Runner;\r\n    };\r\n    /**\r\n     * Create renderer if WebGL is available. Overrideable\r\n     * by the **@pixi/canvas-renderer** package to allow fallback.\r\n     * throws error if WebGL is not available.\r\n     * @param options\r\n     * @private\r\n     */\r\n    static create(options?: IRendererOptions): AbstractRenderer;\r\n    /**\r\n     * @param [options] - The optional renderer parameters.\r\n     * @param {number} [options.width=800] - The width of the screen.\r\n     * @param {number} [options.height=600] - The height of the screen.\r\n     * @param {HTMLCanvasElement} [options.view] - The canvas to use as a view, optional.\r\n     * @param {boolean} [options.useContextAlpha=true] - Pass-through value for canvas' context `alpha` property.\r\n     *   If you want to set transparency, please use `backgroundAlpha`. This option is for cases where the\r\n     *   canvas needs to be opaque, possibly for performance reasons on some older devices.\r\n     * @param {boolean} [options.autoDensity=false] - Resizes renderer view in CSS pixels to allow for\r\n     *   resolutions other than 1.\r\n     * @param {boolean} [options.antialias=false] - Sets antialias. If not available natively then FXAA\r\n     *  antialiasing is used.\r\n     * @param {number} [options.resolution=PIXI.settings.RESOLUTION] - The resolution / device pixel ratio of the renderer.\r\n     * @param {boolean} [options.clearBeforeRender=true] - This sets if the renderer will clear\r\n     *  the canvas or not before the new render pass. If you wish to set this to false, you *must* set\r\n     *  preserveDrawingBuffer to `true`.\r\n     * @param {boolean} [options.preserveDrawingBuffer=false] - Enables drawing buffer preservation,\r\n     *  enable this if you need to call toDataUrl on the WebGL context.\r\n     * @param {number} [options.backgroundColor=0x000000] - The background color of the rendered area\r\n     *  (shown if not transparent).\r\n     * @param {number} [options.backgroundAlpha=1] - Value from 0 (fully transparent) to 1 (fully opaque).\r\n     * @param {string} [options.powerPreference] - Parameter passed to WebGL context, set to \"high-performance\"\r\n     *  for devices with dual graphics card.\r\n     * @param {object} [options.context] - If WebGL context already exists, all parameters must be taken from it.\r\n     */\r\n    constructor(options?: IRendererOptions);\r\n    protected contextChange(): void;\r\n    /**\r\n     * Add a new system to the renderer.\r\n     * @param ClassRef - Class reference\r\n     * @param name - Property name for system, if not specified\r\n     *        will use a static `name` property on the class itself. This\r\n     *        name will be assigned as s property on the Renderer so make\r\n     *        sure it doesn't collide with properties on Renderer.\r\n     * @returns Return instance of renderer\r\n     */\r\n    addSystem(ClassRef: ISystemConstructor, name: string): this;\r\n    /**\r\n     * Renders the object to its WebGL view.\r\n     * @param displayObject - The object to be rendered.\r\n     * @param {object} [options] - Object to use for render options.\r\n     * @param {PIXI.RenderTexture} [options.renderTexture] - The render texture to render to.\r\n     * @param {boolean} [options.clear=true] - Should the canvas be cleared before the new render.\r\n     * @param {PIXI.Matrix} [options.transform] - A transform to apply to the render texture before rendering.\r\n     * @param {boolean} [options.skipUpdateTransform=false] - Should we skip the update transform pass?\r\n     */\r\n    render(displayObject: IRenderableObject, options?: IRendererRenderOptions): void;\r\n    /**\r\n     * Please use the `option` render arguments instead.\r\n     * @deprecated Since 6.0.0\r\n     * @param displayObject\r\n     * @param renderTexture\r\n     * @param clear\r\n     * @param transform\r\n     * @param skipUpdateTransform\r\n     */\r\n    render(displayObject: IRenderableObject, renderTexture?: RenderTexture, clear?: boolean, transform?: Matrix, skipUpdateTransform?: boolean): void;\r\n    /**\r\n     * @override\r\n     * @ignore\r\n     */\r\n    generateTexture(displayObject: IRenderableObject, options?: IGenerateTextureOptions | SCALE_MODES, resolution?: number, region?: Rectangle): RenderTexture;\r\n    /**\r\n     * Resizes the WebGL view to the specified width and height.\r\n     * @param desiredScreenWidth - The desired width of the screen.\r\n     * @param desiredScreenHeight - The desired height of the screen.\r\n     */\r\n    resize(desiredScreenWidth: number, desiredScreenHeight: number): void;\r\n    /**\r\n     * Resets the WebGL state so you can render things however you fancy!\r\n     * @returns Returns itself.\r\n     */\r\n    reset(): this;\r\n    /** Clear the frame buffer. */\r\n    clear(): void;\r\n    /**\r\n     * Removes everything from the renderer (event listeners, spritebatch, etc...)\r\n     * @param [removeView=false] - Removes the Canvas element from the DOM.\r\n     *  See: https://github.com/pixijs/pixi.js/issues/2233\r\n     */\r\n    destroy(removeView?: boolean): void;\r\n    /**\r\n     * Please use `plugins.extract` instead.\r\n     * @member {PIXI.Extract} extract\r\n     * @deprecated since 6.0.0\r\n     * @readonly\r\n     */\r\n    get extract(): any;\r\n    /**\r\n     * Collection of installed plugins. These are included by default in PIXI, but can be excluded\r\n     * by creating a custom build. Consult the README for more information about creating custom\r\n     * builds and excluding plugins.\r\n     * @readonly\r\n     * @property {PIXI.AccessibilityManager} accessibility Support tabbing interactive elements.\r\n     * @property {PIXI.Extract} extract Extract image data from renderer.\r\n     * @property {PIXI.InteractionManager} interaction Handles mouse, touch and pointer events.\r\n     * @property {PIXI.ParticleRenderer} particle Renderer for ParticleContainer objects.\r\n     * @property {PIXI.Prepare} prepare Pre-render display objects.\r\n     * @property {PIXI.BatchRenderer} batch Batching of Sprite, Graphics and Mesh objects.\r\n     * @property {PIXI.TilingSpriteRenderer} tilingSprite Renderer for TilingSprite objects.\r\n     */\r\n    static __plugins: IRendererPlugins;\r\n    /**\r\n     * Adds a plugin to the renderer.\r\n     * @param pluginName - The name of the plugin.\r\n     * @param ctor - The constructor function or class for the plugin.\r\n     */\r\n    static registerPlugin(pluginName: string, ctor: IRendererPluginConstructor): void;\r\n}\r\n\r\n/**\r\n * A RenderTexture is a special texture that allows any PixiJS display object to be rendered to it.\r\n *\r\n * __Hint__: All DisplayObjects (i.e. Sprites) that render to a RenderTexture should be preloaded\r\n * otherwise black rectangles will be drawn instead.\r\n *\r\n * __Hint-2__: The actual memory allocation will happen on first render.\r\n * You shouldn't create renderTextures each frame just to delete them after, try to reuse them.\r\n *\r\n * A RenderTexture takes a snapshot of any Display Object given to its render method. For example:\r\n *\r\n * ```js\r\n * let renderer = PIXI.autoDetectRenderer();\r\n * let renderTexture = PIXI.RenderTexture.create({ width: 800, height: 600 });\r\n * let sprite = PIXI.Sprite.from(\"spinObj_01.png\");\r\n *\r\n * sprite.position.x = 800/2;\r\n * sprite.position.y = 600/2;\r\n * sprite.anchor.x = 0.5;\r\n * sprite.anchor.y = 0.5;\r\n *\r\n * renderer.render(sprite, {renderTexture});\r\n * ```\r\n * Note that you should not create a new renderer, but reuse the same one as the rest of the application.\r\n *\r\n * The Sprite in this case will be rendered using its local transform. To render this sprite at 0,0\r\n * you can clear the transform\r\n *\r\n * ```js\r\n *\r\n * sprite.setTransform()\r\n *\r\n * let renderTexture = new PIXI.RenderTexture.create({ width: 100, height: 100 });\r\n *\r\n * renderer.render(sprite, {renderTexture});  // Renders to center of RenderTexture\r\n * ```\r\n * @memberof PIXI\r\n */\r\nexport declare class RenderTexture extends Texture {\r\n    baseTexture: BaseRenderTexture;\r\n    /**\r\n     * Stores `sourceFrame` when this texture is inside current filter stack.\r\n     *\r\n     * You can read it inside filters.\r\n     * @readonly\r\n     */\r\n    filterFrame: Rectangle | null;\r\n    /**\r\n     * The key for pooled texture of FilterSystem.\r\n     * @see PIXI.RenderTexturePool\r\n     */\r\n    filterPoolKey: string | number | null;\r\n    /**\r\n     * @param baseRenderTexture - The base texture object that this texture uses.\r\n     * @param frame - The rectangle frame of the texture to show.\r\n     */\r\n    constructor(baseRenderTexture: BaseRenderTexture, frame?: Rectangle);\r\n    /**\r\n     * Shortcut to `this.baseTexture.framebuffer`, saves baseTexture cast.\r\n     * @readonly\r\n     */\r\n    get framebuffer(): Framebuffer;\r\n    /**\r\n     * Shortcut to `this.framebuffer.multisample`.\r\n     * @default PIXI.MSAA_QUALITY.NONE\r\n     */\r\n    get multisample(): MSAA_QUALITY;\r\n    set multisample(value: MSAA_QUALITY);\r\n    /**\r\n     * Resizes the RenderTexture.\r\n     * @param desiredWidth - The desired width to resize to.\r\n     * @param desiredHeight - The desired height to resize to.\r\n     * @param resizeBaseTexture - Should the baseTexture.width and height values be resized as well?\r\n     */\r\n    resize(desiredWidth: number, desiredHeight: number, resizeBaseTexture?: boolean): void;\r\n    /**\r\n     * Changes the resolution of baseTexture, but does not change framebuffer size.\r\n     * @param resolution - The new resolution to apply to RenderTexture\r\n     */\r\n    setResolution(resolution: number): void;\r\n    /**\r\n     * Use the object-based construction instead.\r\n     * @deprecated since 6.0.0\r\n     * @param {number} [width]\r\n     * @param {number} [height]\r\n     * @param {PIXI.SCALE_MODES} [scaleMode=PIXI.settings.SCALE_MODE]\r\n     * @param {number} [resolution=PIXI.settings.FILTER_RESOLUTION]\r\n     */\r\n    static create(width: number, height: number, scaleMode?: SCALE_MODES, resolution?: number): RenderTexture;\r\n    /**\r\n     * A short hand way of creating a render texture.\r\n     * @param options - Options\r\n     * @param {number} [options.width=100] - The width of the render texture\r\n     * @param {number} [options.height=100] - The height of the render texture\r\n     * @param {PIXI.SCALE_MODES} [options.scaleMode=PIXI.settings.SCALE_MODE] - See {@link PIXI.SCALE_MODES}\r\n     *    for possible values\r\n     * @param {number} [options.resolution=PIXI.settings.RESOLUTION] - The resolution / device pixel ratio of the texture\r\n     *    being generated\r\n     * @param {PIXI.MSAA_QUALITY} [options.multisample=PIXI.MSAA_QUALITY.NONE] - The number of samples of the frame buffer\r\n     * @returns The new render texture\r\n     */\r\n    static create(options?: IBaseTextureOptions): RenderTexture;\r\n}\r\n\r\n/**\r\n * Texture pool, used by FilterSystem and plugins.\r\n *\r\n * Stores collection of temporary pow2 or screen-sized renderTextures\r\n *\r\n * If you use custom RenderTexturePool for your filters, you can use methods\r\n * `getFilterTexture` and `returnFilterTexture` same as in\r\n * @memberof PIXI\r\n */\r\nexport declare class RenderTexturePool {\r\n    textureOptions: IBaseTextureOptions;\r\n    /**\r\n     * Allow renderTextures of the same size as screen, not just pow2\r\n     *\r\n     * Automatically sets to true after `setScreenSize`\r\n     * @default false\r\n     */\r\n    enableFullScreen: boolean;\r\n    texturePool: {\r\n        [x in string | number]: RenderTexture[];\r\n    };\r\n    private _pixelsWidth;\r\n    private _pixelsHeight;\r\n    /**\r\n     * @param textureOptions - options that will be passed to BaseRenderTexture constructor\r\n     * @param {PIXI.SCALE_MODES} [textureOptions.scaleMode] - See {@link PIXI.SCALE_MODES} for possible values.\r\n     */\r\n    constructor(textureOptions?: IBaseTextureOptions);\r\n    /**\r\n     * Creates texture with params that were specified in pool constructor.\r\n     * @param realWidth - Width of texture in pixels.\r\n     * @param realHeight - Height of texture in pixels.\r\n     * @param multisample - Number of samples of the framebuffer.\r\n     */\r\n    createTexture(realWidth: number, realHeight: number, multisample?: MSAA_QUALITY): RenderTexture;\r\n    /**\r\n     * Gets a Power-of-Two render texture or fullScreen texture\r\n     * @param minWidth - The minimum width of the render texture.\r\n     * @param minHeight - The minimum height of the render texture.\r\n     * @param resolution - The resolution of the render texture.\r\n     * @param multisample - Number of samples of the render texture.\r\n     * @returns The new render texture.\r\n     */\r\n    getOptimalTexture(minWidth: number, minHeight: number, resolution?: number, multisample?: MSAA_QUALITY): RenderTexture;\r\n    /**\r\n     * Gets extra texture of the same size as input renderTexture\r\n     *\r\n     * `getFilterTexture(input, 0.5)` or `getFilterTexture(0.5, input)`\r\n     * @param input - renderTexture from which size and resolution will be copied\r\n     * @param resolution - override resolution of the renderTexture\r\n     *  It overrides, it does not multiply\r\n     * @param multisample - number of samples of the renderTexture\r\n     */\r\n    getFilterTexture(input: RenderTexture, resolution?: number, multisample?: MSAA_QUALITY): RenderTexture;\r\n    /**\r\n     * Place a render texture back into the pool.\r\n     * @param renderTexture - The renderTexture to free\r\n     */\r\n    returnTexture(renderTexture: RenderTexture): void;\r\n    /**\r\n     * Alias for returnTexture, to be compliant with FilterSystem interface.\r\n     * @param renderTexture - The renderTexture to free\r\n     */\r\n    returnFilterTexture(renderTexture: RenderTexture): void;\r\n    /**\r\n     * Clears the pool.\r\n     * @param destroyTextures - Destroy all stored textures.\r\n     */\r\n    clear(destroyTextures?: boolean): void;\r\n    /**\r\n     * If screen size was changed, drops all screen-sized textures,\r\n     * sets new screen size, sets `enableFullScreen` to true\r\n     *\r\n     * Size is measured in pixels, `renderer.view` can be passed here, not `renderer.screen`\r\n     * @param size - Initial size of screen.\r\n     */\r\n    setScreenSize(size: ISize): void;\r\n    /**\r\n     * Key that is used to store fullscreen renderTextures in a pool\r\n     * @constant\r\n     */\r\n    static SCREEN_KEY: number;\r\n}\r\n\r\n/**\r\n * System plugin to the renderer to manage render textures.\r\n *\r\n * Should be added after FramebufferSystem\r\n *\r\n * ### Frames\r\n *\r\n * The `RenderTextureSystem` holds a sourceFrame → destinationFrame projection. The following table explains the different\r\n * coordinate spaces used:\r\n *\r\n * | Frame                  | Description                                                      | Coordinate System                                       |\r\n * | ---------------------- | ---------------------------------------------------------------- | ------------------------------------------------------- |\r\n * | sourceFrame            | The rectangle inside of which display-objects are being rendered | **World Space**: The origin on the top-left             |\r\n * | destinationFrame       | The rectangle in the render-target (canvas or texture) into which contents should be rendered | If rendering to the canvas, this is in screen space and the origin is on the top-left. If rendering to a render-texture, this is in its base-texture's space with the origin on the bottom-left.  |\r\n * | viewportFrame          | The framebuffer viewport corresponding to the destination-frame  | **Window Coordinates**: The origin is always on the bottom-left. |\r\n * @memberof PIXI\r\n */\r\nexport declare class RenderTextureSystem implements ISystem {\r\n    /** The clear background color as RGBA. */\r\n    clearColor: number[];\r\n    /**\r\n     * List of masks for the {@link PIXI.StencilSystem}.\r\n     * @readonly\r\n     */\r\n    defaultMaskStack: Array<MaskData>;\r\n    /**\r\n     * Render texture currently bound. {@code null} if rendering to the canvas.\r\n     * @readonly\r\n     */\r\n    current: RenderTexture | null;\r\n    /**\r\n     * The source frame for the render-target's projection mapping.\r\n     *\r\n     * See {@link PIXI.ProjectionSystem#sourceFrame} for more details\r\n     */\r\n    readonly sourceFrame: Rectangle;\r\n    /**\r\n     * The destination frame for the render-target's projection mapping.\r\n     *\r\n     * See {@link PIXI.Projection#destinationFrame} for more details.\r\n     */\r\n    readonly destinationFrame: Rectangle;\r\n    /**\r\n     * The viewport frame for the render-target's viewport binding. This is equal to the destination-frame\r\n     * for render-textures, while it is y-flipped when rendering to the screen (i.e. its origin is always on\r\n     * the bottom-left).\r\n     */\r\n    readonly viewportFrame: Rectangle;\r\n    private renderer;\r\n    /**\r\n     * @param renderer - The renderer this System works for.\r\n     */\r\n    constructor(renderer: Renderer);\r\n    /**\r\n     * Bind the current render texture.\r\n     * @param renderTexture - RenderTexture to bind, by default its `null` - the screen.\r\n     * @param sourceFrame - Part of world that is mapped to the renderTexture.\r\n     * @param destinationFrame - Part of renderTexture, by default it has the same size as sourceFrame.\r\n     */\r\n    bind(renderTexture?: RenderTexture, sourceFrame?: Rectangle, destinationFrame?: Rectangle): void;\r\n    /**\r\n     * Erases the render texture and fills the drawing area with a colour.\r\n     * @param clearColor - The color as rgba, default to use the renderer backgroundColor\r\n     * @param [mask=BUFFER_BITS.COLOR | BUFFER_BITS.DEPTH] - Bitwise OR of masks\r\n     *  that indicate the buffers to be cleared, by default COLOR and DEPTH buffers.\r\n     */\r\n    clear(clearColor?: number[], mask?: BUFFER_BITS): void;\r\n    resize(): void;\r\n    /** Resets render-texture state. */\r\n    reset(): void;\r\n    destroy(): void;\r\n}\r\n\r\n/**\r\n * Base resource class for textures that manages validation and uploading, depending on its type.\r\n *\r\n * Uploading of a base texture to the GPU is required.\r\n * @memberof PIXI\r\n */\r\nexport declare abstract class Resource {\r\n    /**\r\n     * If resource has been destroyed.\r\n     * @readonly\r\n     * @default false\r\n     */\r\n    destroyed: boolean;\r\n    /**\r\n     * `true` if resource is created by BaseTexture\r\n     * useful for doing cleanup with BaseTexture destroy\r\n     * and not cleaning up resources that were created\r\n     * externally.\r\n     */\r\n    internal: boolean;\r\n    /** Internal width of the resource. */\r\n    protected _width: number;\r\n    /** Internal height of the resource. */\r\n    protected _height: number;\r\n    /**\r\n     * Mini-runner for handling resize events\r\n     * accepts 2 parameters: width, height\r\n     * @member {Runner}\r\n     * @private\r\n     */\r\n    protected onResize: Runner;\r\n    /**\r\n     * Mini-runner for handling update events\r\n     * @member {Runner}\r\n     * @private\r\n     */\r\n    protected onUpdate: Runner;\r\n    /**\r\n     * Handle internal errors, such as loading errors\r\n     * accepts 1 param: error\r\n     * @member {Runner}\r\n     * @private\r\n     */\r\n    protected onError: Runner;\r\n    /**\r\n     * @param width - Width of the resource\r\n     * @param height - Height of the resource\r\n     */\r\n    constructor(width?: number, height?: number);\r\n    /**\r\n     * Bind to a parent BaseTexture\r\n     * @param baseTexture - Parent texture\r\n     */\r\n    bind(baseTexture: BaseTexture): void;\r\n    /**\r\n     * Unbind to a parent BaseTexture\r\n     * @param baseTexture - Parent texture\r\n     */\r\n    unbind(baseTexture: BaseTexture): void;\r\n    /**\r\n     * Trigger a resize event\r\n     * @param width - X dimension\r\n     * @param height - Y dimension\r\n     */\r\n    resize(width: number, height: number): void;\r\n    /**\r\n     * Has been validated\r\n     * @readonly\r\n     */\r\n    get valid(): boolean;\r\n    /** Has been updated trigger event. */\r\n    update(): void;\r\n    /**\r\n     * This can be overridden to start preloading a resource\r\n     * or do any other prepare step.\r\n     * @protected\r\n     * @returns Handle the validate event\r\n     */\r\n    load(): Promise<Resource>;\r\n    /**\r\n     * The width of the resource.\r\n     * @readonly\r\n     */\r\n    get width(): number;\r\n    /**\r\n     * The height of the resource.\r\n     * @readonly\r\n     */\r\n    get height(): number;\r\n    /**\r\n     * Uploads the texture or returns false if it cant for some reason. Override this.\r\n     * @param renderer - yeah, renderer!\r\n     * @param baseTexture - the texture\r\n     * @param glTexture - texture instance for this webgl context\r\n     * @returns - true is success\r\n     */\r\n    abstract upload(renderer: Renderer, baseTexture: BaseTexture, glTexture: GLTexture): boolean;\r\n    /**\r\n     * Set the style, optional to override\r\n     * @param _renderer - yeah, renderer!\r\n     * @param _baseTexture - the texture\r\n     * @param _glTexture - texture instance for this webgl context\r\n     * @returns - `true` is success\r\n     */\r\n    style(_renderer: Renderer, _baseTexture: BaseTexture, _glTexture: GLTexture): boolean;\r\n    /** Clean up anything, this happens when destroying is ready. */\r\n    dispose(): void;\r\n    /**\r\n     * Call when destroying resource, unbind any BaseTexture object\r\n     * before calling this method, as reference counts are maintained\r\n     * internally.\r\n     */\r\n    destroy(): void;\r\n    /**\r\n     * Abstract, used to auto-detect resource type.\r\n     * @param {*} _source - The source object\r\n     * @param {string} _extension - The extension of source, if set\r\n     */\r\n    static test(_source: unknown, _extension?: string): boolean;\r\n}\r\n\r\n/**\r\n * @memberof PIXI\r\n * @namespace resources\r\n * @see PIXI\r\n * @deprecated since 6.0.0\r\n */\r\nexport declare const resources: {};\r\n\r\n/**\r\n * System plugin to the renderer to manage scissor masking.\r\n *\r\n * Scissor masking discards pixels outside of a rectangle called the scissor box. The scissor box is in the framebuffer\r\n * viewport's space; however, the mask's rectangle is projected from world-space to viewport space automatically\r\n * by this system.\r\n * @memberof PIXI\r\n */\r\nexport declare class ScissorSystem extends AbstractMaskSystem {\r\n    /**\r\n     * @param {PIXI.Renderer} renderer - The renderer this System works for.\r\n     */\r\n    constructor(renderer: Renderer);\r\n    getStackLength(): number;\r\n    /**\r\n     * evaluates _boundsTransformed, _scissorRect for MaskData\r\n     * @param maskData\r\n     */\r\n    calcScissorRect(maskData: MaskData): void;\r\n    private static isMatrixRotated;\r\n    /**\r\n     * Test, whether the object can be scissor mask with current renderer projection.\r\n     * Calls \"calcScissorRect()\" if its true.\r\n     * @param maskData - mask data\r\n     * @returns whether Whether the object can be scissor mask\r\n     */\r\n    testScissor(maskData: MaskData): boolean;\r\n    private roundFrameToPixels;\r\n    /**\r\n     * Applies the Mask and adds it to the current stencil stack.\r\n     * @author alvin\r\n     * @param maskData - The mask data.\r\n     */\r\n    push(maskData: MaskData): void;\r\n    /**\r\n     * This should be called after a mask is popped off the mask stack. It will rebind the scissor box to be latest with the\r\n     * last mask in the stack.\r\n     *\r\n     * This can also be called when you directly modify the scissor box and want to restore PixiJS state.\r\n     */\r\n    pop(): void;\r\n    /**\r\n     * Setup renderer to use the current scissor data.\r\n     * @private\r\n     */\r\n    _useCurrent(): void;\r\n}\r\n\r\n/**\r\n * A helper class for shaders.\r\n * @memberof PIXI\r\n */\r\nexport declare class Shader {\r\n    /** Program that the shader uses. */\r\n    program: Program;\r\n    uniformGroup: UniformGroup;\r\n    /**\r\n     * Used internally to bind uniform buffer objects.\r\n     * @ignore\r\n     */\r\n    uniformBindCount: number;\r\n    /**\r\n     * @param program - The program the shader will use.\r\n     * @param uniforms - Custom uniforms to use to augment the built-in ones.\r\n     */\r\n    constructor(program: Program, uniforms?: Dict<any>);\r\n    checkUniformExists(name: string, group: UniformGroup): boolean;\r\n    destroy(): void;\r\n    /**\r\n     * Shader uniform values, shortcut for `uniformGroup.uniforms`.\r\n     * @readonly\r\n     */\r\n    get uniforms(): Dict<any>;\r\n    /**\r\n     * A short hand function to create a shader based of a vertex and fragment shader.\r\n     * @param vertexSrc - The source of the vertex shader.\r\n     * @param fragmentSrc - The source of the fragment shader.\r\n     * @param uniforms - Custom uniforms to use to augment the built-in ones.\r\n     * @returns A shiny new PixiJS shader!\r\n     */\r\n    static from(vertexSrc?: string, fragmentSrc?: string, uniforms?: Dict<any>): Shader;\r\n}\r\n\r\n/**\r\n * System plugin to the renderer to manage shaders.\r\n * @memberof PIXI\r\n */\r\nexport declare class ShaderSystem implements ISystem {\r\n    /**\r\n     * The current WebGL rendering context.\r\n     * @member {WebGLRenderingContext}\r\n     */\r\n    protected gl: IRenderingContext;\r\n    shader: Shader;\r\n    program: Program;\r\n    id: number;\r\n    destroyed: boolean;\r\n    /** Cache to holds the generated functions. Stored against UniformObjects unique signature. */\r\n    private cache;\r\n    private _uboCache;\r\n    private renderer;\r\n    /** @param renderer - The renderer this System works for. */\r\n    constructor(renderer: Renderer);\r\n    /**\r\n     * Overrideable function by `@pixi/unsafe-eval` to silence\r\n     * throwing an error if platform doesn't support unsafe-evals.\r\n     * @private\r\n     */\r\n    systemCheck(): void;\r\n    protected contextChange(gl: IRenderingContext): void;\r\n    /**\r\n     * Changes the current shader to the one given in parameter.\r\n     * @param shader - the new shader\r\n     * @param dontSync - false if the shader should automatically sync its uniforms.\r\n     * @returns the glProgram that belongs to the shader.\r\n     */\r\n    bind(shader: Shader, dontSync?: boolean): GLProgram;\r\n    /**\r\n     * Uploads the uniforms values to the currently bound shader.\r\n     * @param uniforms - the uniforms values that be applied to the current shader\r\n     */\r\n    setUniforms(uniforms: Dict<any>): void;\r\n    /**\r\n     * Syncs uniforms on the group\r\n     * @param group - the uniform group to sync\r\n     * @param syncData - this is data that is passed to the sync function and any nested sync functions\r\n     */\r\n    syncUniformGroup(group: UniformGroup, syncData?: any): void;\r\n    /**\r\n     * Overrideable by the @pixi/unsafe-eval package to use static syncUniforms instead.\r\n     * @param group\r\n     * @param glProgram\r\n     * @param syncData\r\n     */\r\n    syncUniforms(group: UniformGroup, glProgram: GLProgram, syncData: any): void;\r\n    createSyncGroups(group: UniformGroup): UniformsSyncCallback_2;\r\n    /**\r\n     * Syncs uniform buffers\r\n     * @param group - the uniform buffer group to sync\r\n     * @param name - the name of the uniform buffer\r\n     */\r\n    syncUniformBufferGroup(group: UniformGroup, name?: string): void;\r\n    /**\r\n     * Will create a function that uploads a uniform buffer using the STD140 standard.\r\n     * The upload function will then be cached for future calls\r\n     * If a group is manually managed, then a simple upload function is generated\r\n     * @param group - the uniform buffer group to sync\r\n     * @param glProgram - the gl program to attach the uniform bindings to\r\n     * @param name - the name of the uniform buffer (must exist on the shader)\r\n     */\r\n    protected createSyncBufferGroup(group: UniformGroup, glProgram: GLProgram, name: string): UniformsSyncCallback_2;\r\n    /**\r\n     * Takes a uniform group and data and generates a unique signature for them.\r\n     * @param group - The uniform group to get signature of\r\n     * @param group.uniforms\r\n     * @param uniformData - Uniform information generated by the shader\r\n     * @param preFix\r\n     * @returns Unique signature of the uniform group\r\n     */\r\n    private getSignature;\r\n    /**\r\n     * Returns the underlying GLShade rof the currently bound shader.\r\n     *\r\n     * This can be handy for when you to have a little more control over the setting of your uniforms.\r\n     * @returns The glProgram for the currently bound Shader for this context\r\n     */\r\n    getGlProgram(): GLProgram;\r\n    /**\r\n     * Generates a glProgram version of the Shader provided.\r\n     * @param shader - The shader that the glProgram will be based on.\r\n     * @returns A shiny new glProgram!\r\n     */\r\n    generateProgram(shader: Shader): GLProgram;\r\n    /** Resets ShaderSystem state, does not affect WebGL state. */\r\n    reset(): void;\r\n    /** Destroys this System and removes all its textures. */\r\n    destroy(): void;\r\n}\r\n\r\n/**\r\n * This handles a Sprite acting as a mask, as opposed to a Graphic.\r\n *\r\n * WebGL only.\r\n * @memberof PIXI\r\n */\r\nexport declare class SpriteMaskFilter extends Filter {\r\n    /** @private */\r\n    _maskSprite: IMaskTarget;\r\n    /** Mask matrix */\r\n    maskMatrix: Matrix;\r\n    /**\r\n     * @param {PIXI.Sprite} sprite - The target sprite.\r\n     */\r\n    constructor(sprite: IMaskTarget);\r\n    /**\r\n     * @param vertexSrc - The source of the vertex shader.\r\n     * @param fragmentSrc - The source of the fragment shader.\r\n     * @param uniforms - Custom uniforms to use to augment the built-in ones.\r\n     */\r\n    constructor(vertexSrc?: string, fragmentSrc?: string, uniforms?: Dict<any>);\r\n    /**\r\n     * Sprite mask\r\n     * @type {PIXI.DisplayObject}\r\n     */\r\n    get maskSprite(): IMaskTarget;\r\n    set maskSprite(value: IMaskTarget);\r\n    /**\r\n     * Applies the filter\r\n     * @param filterManager - The renderer to retrieve the filter from\r\n     * @param input - The input render target.\r\n     * @param output - The target to output to.\r\n     * @param clearMode - Should the output be cleared before rendering to it.\r\n     */\r\n    apply(filterManager: FilterSystem, input: RenderTexture, output: RenderTexture, clearMode: CLEAR_MODES): void;\r\n}\r\n\r\n/**\r\n * This is a WebGL state, and is is passed to {@link PIXI.StateSystem}.\r\n *\r\n * Each mesh rendered may require WebGL to be in a different state.\r\n * For example you may want different blend mode or to enable polygon offsets\r\n * @memberof PIXI\r\n */\r\nexport declare class State {\r\n    data: number;\r\n    _blendMode: BLEND_MODES;\r\n    _polygonOffset: number;\r\n    constructor();\r\n    /**\r\n     * Activates blending of the computed fragment color values.\r\n     * @default true\r\n     */\r\n    get blend(): boolean;\r\n    set blend(value: boolean);\r\n    /**\r\n     * Activates adding an offset to depth values of polygon's fragments\r\n     * @default false\r\n     */\r\n    get offsets(): boolean;\r\n    set offsets(value: boolean);\r\n    /**\r\n     * Activates culling of polygons.\r\n     * @default false\r\n     */\r\n    get culling(): boolean;\r\n    set culling(value: boolean);\r\n    /**\r\n     * Activates depth comparisons and updates to the depth buffer.\r\n     * @default false\r\n     */\r\n    get depthTest(): boolean;\r\n    set depthTest(value: boolean);\r\n    /**\r\n     * Enables or disables writing to the depth buffer.\r\n     * @default true\r\n     */\r\n    get depthMask(): boolean;\r\n    set depthMask(value: boolean);\r\n    /**\r\n     * Specifies whether or not front or back-facing polygons can be culled.\r\n     * @default false\r\n     */\r\n    get clockwiseFrontFace(): boolean;\r\n    set clockwiseFrontFace(value: boolean);\r\n    /**\r\n     * The blend mode to be applied when this state is set. Apply a value of `PIXI.BLEND_MODES.NORMAL` to reset the blend mode.\r\n     * Setting this mode to anything other than NO_BLEND will automatically switch blending on.\r\n     * @default PIXI.BLEND_MODES.NORMAL\r\n     */\r\n    get blendMode(): BLEND_MODES;\r\n    set blendMode(value: BLEND_MODES);\r\n    /**\r\n     * The polygon offset. Setting this property to anything other than 0 will automatically enable polygon offset fill.\r\n     * @default 0\r\n     */\r\n    get polygonOffset(): number;\r\n    set polygonOffset(value: number);\r\n    toString(): string;\r\n    static for2d(): State;\r\n}\r\n\r\n/**\r\n * System plugin to the renderer to manage WebGL state machines.\r\n * @memberof PIXI\r\n */\r\nexport declare class StateSystem implements ISystem {\r\n    /**\r\n     * State ID\r\n     * @readonly\r\n     */\r\n    stateId: number;\r\n    /**\r\n     * Polygon offset\r\n     * @readonly\r\n     */\r\n    polygonOffset: number;\r\n    /**\r\n     * Blend mode\r\n     * @default PIXI.BLEND_MODES.NONE\r\n     * @readonly\r\n     */\r\n    blendMode: BLEND_MODES;\r\n    /** Whether current blend equation is different */\r\n    protected _blendEq: boolean;\r\n    /**\r\n     * GL context\r\n     * @member {WebGLRenderingContext}\r\n     * @readonly\r\n     */\r\n    protected gl: IRenderingContext;\r\n    protected blendModes: number[][];\r\n    /**\r\n     * Collection of calls\r\n     * @member {Function[]}\r\n     */\r\n    protected readonly map: Array<(value: boolean) => void>;\r\n    /**\r\n     * Collection of check calls\r\n     * @member {Function[]}\r\n     */\r\n    protected readonly checks: Array<(system: this, state: State) => void>;\r\n    /**\r\n     * Default WebGL State\r\n     * @readonly\r\n     */\r\n    protected defaultState: State;\r\n    constructor();\r\n    contextChange(gl: IRenderingContext): void;\r\n    /**\r\n     * Sets the current state\r\n     * @param {*} state - The state to set.\r\n     */\r\n    set(state: State): void;\r\n    /**\r\n     * Sets the state, when previous state is unknown.\r\n     * @param {*} state - The state to set\r\n     */\r\n    forceState(state: State): void;\r\n    /**\r\n     * Sets whether to enable or disable blending.\r\n     * @param value - Turn on or off WebGl blending.\r\n     */\r\n    setBlend(value: boolean): void;\r\n    /**\r\n     * Sets whether to enable or disable polygon offset fill.\r\n     * @param value - Turn on or off webgl polygon offset testing.\r\n     */\r\n    setOffset(value: boolean): void;\r\n    /**\r\n     * Sets whether to enable or disable depth test.\r\n     * @param value - Turn on or off webgl depth testing.\r\n     */\r\n    setDepthTest(value: boolean): void;\r\n    /**\r\n     * Sets whether to enable or disable depth mask.\r\n     * @param value - Turn on or off webgl depth mask.\r\n     */\r\n    setDepthMask(value: boolean): void;\r\n    /**\r\n     * Sets whether to enable or disable cull face.\r\n     * @param {boolean} value - Turn on or off webgl cull face.\r\n     */\r\n    setCullFace(value: boolean): void;\r\n    /**\r\n     * Sets the gl front face.\r\n     * @param {boolean} value - true is clockwise and false is counter-clockwise\r\n     */\r\n    setFrontFace(value: boolean): void;\r\n    /**\r\n     * Sets the blend mode.\r\n     * @param {number} value - The blend mode to set to.\r\n     */\r\n    setBlendMode(value: number): void;\r\n    /**\r\n     * Sets the polygon offset.\r\n     * @param {number} value - the polygon offset\r\n     * @param {number} scale - the polygon offset scale\r\n     */\r\n    setPolygonOffset(value: number, scale: number): void;\r\n    /** Resets all the logic and disables the VAOs. */\r\n    reset(): void;\r\n    /**\r\n     * Checks to see which updates should be checked based on which settings have been activated.\r\n     *\r\n     * For example, if blend is enabled then we should check the blend modes each time the state is changed\r\n     * or if polygon fill is activated then we need to check if the polygon offset changes.\r\n     * The idea is that we only check what we have too.\r\n     * @param func - the checking function to add or remove\r\n     * @param value - should the check function be added or removed.\r\n     */\r\n    updateCheck(func: (system: this, state: State) => void, value: boolean): void;\r\n    /**\r\n     * A private little wrapper function that we call to check the blend mode.\r\n     * @param system - the System to perform the state check on\r\n     * @param state - the state that the blendMode will pulled from\r\n     */\r\n    private static checkBlendMode;\r\n    /**\r\n     * A private little wrapper function that we call to check the polygon offset.\r\n     * @param system - the System to perform the state check on\r\n     * @param state - the state that the blendMode will pulled from\r\n     */\r\n    private static checkPolygonOffset;\r\n    /**\r\n     * @ignore\r\n     */\r\n    destroy(): void;\r\n}\r\n\r\n/**\r\n * System plugin to the renderer to manage stencils (used for masks).\r\n * @memberof PIXI\r\n */\r\nexport declare class StencilSystem extends AbstractMaskSystem {\r\n    /**\r\n     * @param renderer - The renderer this System works for.\r\n     */\r\n    constructor(renderer: Renderer);\r\n    getStackLength(): number;\r\n    /**\r\n     * Applies the Mask and adds it to the current stencil stack.\r\n     * @param maskData - The mask data\r\n     */\r\n    push(maskData: MaskData): void;\r\n    /**\r\n     * Pops stencil mask. MaskData is already removed from stack\r\n     * @param {PIXI.DisplayObject} maskObject - object of popped mask data\r\n     */\r\n    pop(maskObject: IMaskTarget): void;\r\n    /**\r\n     * Setup renderer to use the current stencil data.\r\n     * @private\r\n     */\r\n    _useCurrent(): void;\r\n}\r\n\r\n/**\r\n * Resource type for SVG elements and graphics.\r\n * @memberof PIXI\r\n */\r\nexport declare class SVGResource extends BaseImageResource {\r\n    /** Base64 encoded SVG element or URL for SVG file. */\r\n    readonly svg: string;\r\n    /** The source scale to apply when rasterizing on load. */\r\n    readonly scale: number;\r\n    /** A width override for rasterization on load. */\r\n    readonly _overrideWidth: number;\r\n    /** A height override for rasterization on load. */\r\n    readonly _overrideHeight: number;\r\n    /** Call when completely loaded. */\r\n    private _resolve;\r\n    /** Promise when loading */\r\n    private _load;\r\n    /** Cross origin value to use */\r\n    private _crossorigin?;\r\n    /**\r\n     * @param sourceBase64 - Base64 encoded SVG element or URL for SVG file.\r\n     * @param {object} [options] - Options to use\r\n     * @param {number} [options.scale=1] - Scale to apply to SVG. Overridden by...\r\n     * @param {number} [options.width] - Rasterize SVG this wide. Aspect ratio preserved if height not specified.\r\n     * @param {number} [options.height] - Rasterize SVG this high. Aspect ratio preserved if width not specified.\r\n     * @param {boolean} [options.autoLoad=true] - Start loading right away.\r\n     */\r\n    constructor(sourceBase64: string, options?: ISVGResourceOptions);\r\n    load(): Promise<SVGResource>;\r\n    /** Loads an SVG image from `imageUrl` or `data URL`. */\r\n    private _loadSvg;\r\n    /**\r\n     * Get size from an svg string using a regular expression.\r\n     * @param svgString - a serialized svg element\r\n     * @returns - image extension\r\n     */\r\n    static getSize(svgString?: string): ISize;\r\n    /** Destroys this texture. */\r\n    dispose(): void;\r\n    /**\r\n     * Used to auto-detect the type of resource.\r\n     * @param {*} source - The source object\r\n     * @param {string} extension - The extension of source, if set\r\n     * @returns {boolean} - If the source is a SVG source or data file\r\n     */\r\n    static test(source: unknown, extension?: string): boolean;\r\n    /**\r\n     * Regular expression for SVG XML document.\r\n     * @example &lt;?xml version=\"1.0\" encoding=\"utf-8\" ?&gt;&lt;!-- image/svg --&gt;&lt;svg\r\n     * @readonly\r\n     */\r\n    static SVG_XML: RegExp;\r\n    /**\r\n     * Regular expression for SVG size.\r\n     * @example &lt;svg width=\"100\" height=\"100\"&gt;&lt;/svg&gt;\r\n     * @readonly\r\n     */\r\n    static SVG_SIZE: RegExp;\r\n}\r\n\r\n/**\r\n * Use the ISystem interface instead.\r\n * @deprecated since 6.1.0\r\n * @memberof PIXI\r\n */\r\nexport declare class System implements ISystem {\r\n    /** Reference to the main renderer */\r\n    renderer: Renderer;\r\n    /**\r\n     * @param renderer - Reference to Renderer\r\n     */\r\n    constructor(renderer: Renderer);\r\n    /** Destroy and don't use after this. */\r\n    destroy(): void;\r\n}\r\n\r\n/**\r\n * @memberof PIXI\r\n * @namespace systems\r\n * @see PIXI\r\n * @deprecated since 6.0.0\r\n */\r\nexport declare const systems: {};\r\n\r\nexport declare interface Texture extends GlobalMixins.Texture, EventEmitter {\r\n}\r\n\r\n/**\r\n * A texture stores the information that represents an image or part of an image.\r\n *\r\n * It cannot be added to the display list directly; instead use it as the texture for a Sprite.\r\n * If no frame is provided for a texture, then the whole image is used.\r\n *\r\n * You can directly create a texture from an image and then reuse it multiple times like this :\r\n *\r\n * ```js\r\n * let texture = PIXI.Texture.from('assets/image.png');\r\n * let sprite1 = new PIXI.Sprite(texture);\r\n * let sprite2 = new PIXI.Sprite(texture);\r\n * ```\r\n *\r\n * If you didnt pass the texture frame to constructor, it enables `noFrame` mode:\r\n * it subscribes on baseTexture events, it automatically resizes at the same time as baseTexture.\r\n *\r\n * Textures made from SVGs, loaded or not, cannot be used before the file finishes processing.\r\n * You can check for this by checking the sprite's _textureID property.\r\n * ```js\r\n * var texture = PIXI.Texture.from('assets/image.svg');\r\n * var sprite1 = new PIXI.Sprite(texture);\r\n * //sprite1._textureID should not be undefined if the texture has finished processing the SVG file\r\n * ```\r\n * You can use a ticker or rAF to ensure your sprites load the finished textures after processing. See issue #3068.\r\n * @memberof PIXI\r\n * @typeParam R - The BaseTexture's Resource type.\r\n */\r\nexport declare class Texture<R extends Resource = Resource> extends EventEmitter {\r\n    /** The base texture that this texture uses. */\r\n    baseTexture: BaseTexture<R>;\r\n    /** This is the area of original texture, before it was put in atlas. */\r\n    orig: Rectangle;\r\n    /**\r\n     * This is the trimmed area of original texture, before it was put in atlas\r\n     * Please call `updateUvs()` after you change coordinates of `trim` manually.\r\n     */\r\n    trim: Rectangle;\r\n    /** This will let the renderer know if the texture is valid. If it's not then it cannot be rendered. */\r\n    valid: boolean;\r\n    /**\r\n     * Does this Texture have any frame data assigned to it?\r\n     *\r\n     * This mode is enabled automatically if no frame was passed inside constructor.\r\n     *\r\n     * In this mode texture is subscribed to baseTexture events, and fires `update` on any change.\r\n     *\r\n     * Beware, after loading or resize of baseTexture event can fired two times!\r\n     * If you want more control, subscribe on baseTexture itself.\r\n     *\r\n     * ```js\r\n     * texture.on('update', () => {});\r\n     * ```\r\n     *\r\n     * Any assignment of `frame` switches off `noFrame` mode.\r\n     */\r\n    noFrame: boolean;\r\n    /**\r\n     * Anchor point that is used as default if sprite is created with this texture.\r\n     * Changing the `defaultAnchor` at a later point of time will not update Sprite's anchor point.\r\n     * @default {0,0}\r\n     */\r\n    defaultAnchor: Point;\r\n    /** Default TextureMatrix instance for this texture. By default, that object is not created because its heavy. */\r\n    uvMatrix: TextureMatrix;\r\n    protected _rotate: number;\r\n    /**\r\n     * Update ID is observed by sprites and TextureMatrix instances.\r\n     * Call updateUvs() to increment it.\r\n     * @protected\r\n     */\r\n    _updateID: number;\r\n    /**\r\n     * This is the area of the BaseTexture image to actually copy to the Canvas / WebGL when rendering,\r\n     * irrespective of the actual frame size or placement (which can be influenced by trimmed texture atlases)\r\n     */\r\n    _frame: Rectangle;\r\n    /**\r\n     * The WebGL UV data cache. Can be used as quad UV.\r\n     * @protected\r\n     */\r\n    _uvs: TextureUvs;\r\n    /**\r\n     * The ids under which this Texture has been added to the texture cache. This is\r\n     * automatically set as long as Texture.addToCache is used, but may not be set if a\r\n     * Texture is added directly to the TextureCache array.\r\n     */\r\n    textureCacheIds: Array<string>;\r\n    /**\r\n     * @param baseTexture - The base texture source to create the texture from\r\n     * @param frame - The rectangle frame of the texture to show\r\n     * @param orig - The area of original texture\r\n     * @param trim - Trimmed rectangle of original texture\r\n     * @param rotate - indicates how the texture was rotated by texture packer. See {@link PIXI.groupD8}\r\n     * @param anchor - Default anchor point used for sprite placement / rotation\r\n     */\r\n    constructor(baseTexture: BaseTexture<R>, frame?: Rectangle, orig?: Rectangle, trim?: Rectangle, rotate?: number, anchor?: IPointData);\r\n    /**\r\n     * Updates this texture on the gpu.\r\n     *\r\n     * Calls the TextureResource update.\r\n     *\r\n     * If you adjusted `frame` manually, please call `updateUvs()` instead.\r\n     */\r\n    update(): void;\r\n    /**\r\n     * Called when the base texture is updated\r\n     * @protected\r\n     * @param baseTexture - The base texture.\r\n     */\r\n    onBaseTextureUpdated(baseTexture: BaseTexture): void;\r\n    /**\r\n     * Destroys this texture\r\n     * @param [destroyBase=false] - Whether to destroy the base texture as well\r\n     */\r\n    destroy(destroyBase?: boolean): void;\r\n    /**\r\n     * Creates a new texture object that acts the same as this one.\r\n     * @returns - The new texture\r\n     */\r\n    clone(): Texture;\r\n    /**\r\n     * Updates the internal WebGL UV cache. Use it after you change `frame` or `trim` of the texture.\r\n     * Call it after changing the frame\r\n     */\r\n    updateUvs(): void;\r\n    /**\r\n     * Helper function that creates a new Texture based on the source you provide.\r\n     * The source can be - frame id, image url, video url, canvas element, video element, base texture\r\n     * @param {string|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement|PIXI.BaseTexture} source -\r\n     *        Source or array of sources to create texture from\r\n     * @param options - See {@link PIXI.BaseTexture}'s constructor for options.\r\n     * @param {string} [options.pixiIdPrefix=pixiid] - If a source has no id, this is the prefix of the generated id\r\n     * @param {boolean} [strict] - Enforce strict-mode, see {@link PIXI.settings.STRICT_TEXTURE_CACHE}.\r\n     * @returns {PIXI.Texture} The newly created texture\r\n     */\r\n    static from<R extends Resource = Resource, RO = any>(source: TextureSource | TextureSource[], options?: IBaseTextureOptions<RO>, strict?: boolean): Texture<R>;\r\n    /**\r\n     * Useful for loading textures via URLs. Use instead of `Texture.from` because\r\n     * it does a better job of handling failed URLs more effectively. This also ignores\r\n     * `PIXI.settings.STRICT_TEXTURE_CACHE`. Works for Videos, SVGs, Images.\r\n     * @param url - The remote URL or array of URLs to load.\r\n     * @param options - Optional options to include\r\n     * @returns - A Promise that resolves to a Texture.\r\n     */\r\n    static fromURL<R extends Resource = Resource, RO = any>(url: string | string[], options?: IBaseTextureOptions<RO>): Promise<Texture<R>>;\r\n    /**\r\n     * Create a new Texture with a BufferResource from a Float32Array.\r\n     * RGBA values are floats from 0 to 1.\r\n     * @param {Float32Array|Uint8Array} buffer - The optional array to use, if no data\r\n     *        is provided, a new Float32Array is created.\r\n     * @param width - Width of the resource\r\n     * @param height - Height of the resource\r\n     * @param options - See {@link PIXI.BaseTexture}'s constructor for options.\r\n     * @returns - The resulting new BaseTexture\r\n     */\r\n    static fromBuffer(buffer: Float32Array | Uint8Array, width: number, height: number, options?: IBaseTextureOptions<ISize>): Texture<BufferResource>;\r\n    /**\r\n     * Create a texture from a source and add to the cache.\r\n     * @param {HTMLImageElement|HTMLCanvasElement|string} source - The input source.\r\n     * @param imageUrl - File name of texture, for cache and resolving resolution.\r\n     * @param name - Human readable name for the texture cache. If no name is\r\n     *        specified, only `imageUrl` will be used as the cache ID.\r\n     * @param options\r\n     * @returns - Output texture\r\n     */\r\n    static fromLoader<R extends Resource = Resource>(source: HTMLImageElement | HTMLCanvasElement | string, imageUrl: string, name?: string, options?: IBaseTextureOptions): Promise<Texture<R>>;\r\n    /**\r\n     * Adds a Texture to the global TextureCache. This cache is shared across the whole PIXI object.\r\n     * @param texture - The Texture to add to the cache.\r\n     * @param id - The id that the Texture will be stored against.\r\n     */\r\n    static addToCache(texture: Texture, id: string): void;\r\n    /**\r\n     * Remove a Texture from the global TextureCache.\r\n     * @param texture - id of a Texture to be removed, or a Texture instance itself\r\n     * @returns - The Texture that was removed\r\n     */\r\n    static removeFromCache(texture: string | Texture): Texture | null;\r\n    /**\r\n     * Returns resolution of baseTexture\r\n     * @readonly\r\n     */\r\n    get resolution(): number;\r\n    /**\r\n     * The frame specifies the region of the base texture that this texture uses.\r\n     * Please call `updateUvs()` after you change coordinates of `frame` manually.\r\n     */\r\n    get frame(): Rectangle;\r\n    set frame(frame: Rectangle);\r\n    /**\r\n     * Indicates whether the texture is rotated inside the atlas\r\n     * set to 2 to compensate for texture packer rotation\r\n     * set to 6 to compensate for spine packer rotation\r\n     * can be used to rotate or mirror sprites\r\n     * See {@link PIXI.groupD8} for explanation\r\n     */\r\n    get rotate(): number;\r\n    set rotate(rotate: number);\r\n    /** The width of the Texture in pixels. */\r\n    get width(): number;\r\n    /** The height of the Texture in pixels. */\r\n    get height(): number;\r\n    /** Utility function for BaseTexture|Texture cast. */\r\n    castToBaseTexture(): BaseTexture;\r\n    private static _EMPTY;\r\n    private static _WHITE;\r\n    /** An empty texture, used often to not have to create multiple empty textures. Can not be destroyed. */\r\n    static get EMPTY(): Texture<Resource>;\r\n    /** A white texture of 16x16 size, used for graphics and other things Can not be destroyed. */\r\n    static get WHITE(): Texture<CanvasResource>;\r\n}\r\n\r\n/**\r\n * System plugin to the renderer to manage texture garbage collection on the GPU,\r\n * ensuring that it does not get clogged up with textures that are no longer being used.\r\n * @memberof PIXI\r\n */\r\nexport declare class TextureGCSystem implements ISystem {\r\n    /**\r\n     * Count\r\n     * @readonly\r\n     */\r\n    count: number;\r\n    /**\r\n     * Check count\r\n     * @readonly\r\n     */\r\n    checkCount: number;\r\n    /**\r\n     * Maximum idle time, in seconds\r\n     * @see PIXI.settings.GC_MAX_IDLE\r\n     */\r\n    maxIdle: number;\r\n    /**\r\n     * Maximum number of item to check\r\n     * @see PIXI.settings.GC_MAX_CHECK_COUNT\r\n     */\r\n    checkCountMax: number;\r\n    /**\r\n     * Current garbage collection mode\r\n     * @see PIXI.settings.GC_MODE\r\n     */\r\n    mode: GC_MODES;\r\n    private renderer;\r\n    /** @param renderer - The renderer this System works for. */\r\n    constructor(renderer: Renderer);\r\n    /**\r\n     * Checks to see when the last time a texture was used\r\n     * if the texture has not been used for a specified amount of time it will be removed from the GPU\r\n     */\r\n    protected postrender(): void;\r\n    /**\r\n     * Checks to see when the last time a texture was used\r\n     * if the texture has not been used for a specified amount of time it will be removed from the GPU\r\n     */\r\n    run(): void;\r\n    /**\r\n     * Removes all the textures within the specified displayObject and its children from the GPU\r\n     * @param {PIXI.DisplayObject} displayObject - the displayObject to remove the textures from.\r\n     */\r\n    unload(displayObject: IUnloadableTexture): void;\r\n    destroy(): void;\r\n}\r\n\r\n/**\r\n * Class controls uv mapping from Texture normal space to BaseTexture normal space.\r\n *\r\n * Takes `trim` and `rotate` into account. May contain clamp settings for Meshes and TilingSprite.\r\n *\r\n * Can be used in Texture `uvMatrix` field, or separately, you can use different clamp settings on the same texture.\r\n * If you want to add support for texture region of certain feature or filter, that's what you're looking for.\r\n *\r\n * Takes track of Texture changes through `_lastTextureID` private field.\r\n * Use `update()` method call to track it from outside.\r\n * @see PIXI.Texture\r\n * @see PIXI.Mesh\r\n * @see PIXI.TilingSprite\r\n * @memberof PIXI\r\n */\r\nexport declare class TextureMatrix {\r\n    /**\r\n     * Matrix operation that converts texture region coords to texture coords\r\n     * @readonly\r\n     */\r\n    mapCoord: Matrix;\r\n    /**\r\n     * Changes frame clamping\r\n     * Works with TilingSprite and Mesh\r\n     * Change to 1.5 if you texture has repeated right and bottom lines, that leads to smoother borders\r\n     * @default 0\r\n     */\r\n    clampOffset: number;\r\n    /**\r\n     * Changes frame clamping\r\n     * Works with TilingSprite and Mesh\r\n     * Change to -0.5 to add a pixel to the edge, recommended for transparent trimmed textures in atlas\r\n     * @default 0.5\r\n     */\r\n    clampMargin: number;\r\n    /**\r\n     * Clamp region for normalized coords, left-top pixel center in xy , bottom-right in zw.\r\n     * Calculated based on clampOffset.\r\n     */\r\n    readonly uClampFrame: Float32Array;\r\n    /** Normalized clamp offset. Calculated based on clampOffset. */\r\n    readonly uClampOffset: Float32Array;\r\n    /**\r\n     * Tracks Texture frame changes.\r\n     * @protected\r\n     */\r\n    _textureID: number;\r\n    /**\r\n     * Tracks Texture frame changes.\r\n     * @protected\r\n     */\r\n    _updateID: number;\r\n    _texture: Texture;\r\n    /**\r\n     * If texture size is the same as baseTexture.\r\n     * @default false\r\n     * @readonly\r\n     */\r\n    isSimple: boolean;\r\n    /**\r\n     * @param texture - observed texture\r\n     * @param clampMargin - Changes frame clamping, 0.5 by default. Use -0.5 for extra border.\r\n     */\r\n    constructor(texture: Texture, clampMargin?: number);\r\n    /** Texture property. */\r\n    get texture(): Texture;\r\n    set texture(value: Texture);\r\n    /**\r\n     * Multiplies uvs array to transform\r\n     * @param uvs - mesh uvs\r\n     * @param [out=uvs] - output\r\n     * @returns - output\r\n     */\r\n    multiplyUvs(uvs: Float32Array, out?: Float32Array): Float32Array;\r\n    /**\r\n     * Updates matrices if texture was changed.\r\n     * @param [forceUpdate=false] - if true, matrices will be updated any case\r\n     * @returns - Whether or not it was updated\r\n     */\r\n    update(forceUpdate?: boolean): boolean;\r\n}\r\n\r\nexport declare type TextureSource = string | BaseTexture | ImageSource;\r\n\r\n/**\r\n * System plugin to the renderer to manage textures.\r\n * @memberof PIXI\r\n */\r\nexport declare class TextureSystem implements ISystem {\r\n    /**\r\n     * Bound textures.\r\n     * @readonly\r\n     */\r\n    boundTextures: BaseTexture[];\r\n    /**\r\n     * List of managed textures.\r\n     * @readonly\r\n     */\r\n    managedTextures: Array<BaseTexture>;\r\n    /** Whether glTexture with int/uint sampler type was uploaded. */\r\n    protected hasIntegerTextures: boolean;\r\n    protected CONTEXT_UID: number;\r\n    protected gl: IRenderingContext;\r\n    protected internalFormats: {\r\n        [type: number]: {\r\n            [format: number]: number;\r\n        };\r\n    };\r\n    protected webGLVersion: number;\r\n    /**\r\n     * BaseTexture value that shows that we don't know what is bound.\r\n     * @readonly\r\n     */\r\n    protected unknownTexture: BaseTexture;\r\n    /**\r\n     * Did someone temper with textures state? We'll overwrite them when we need to unbind something.\r\n     * @private\r\n     */\r\n    protected _unknownBoundTextures: boolean;\r\n    /**\r\n     * Current location.\r\n     * @readonly\r\n     */\r\n    currentLocation: number;\r\n    emptyTextures: {\r\n        [key: number]: GLTexture;\r\n    };\r\n    private renderer;\r\n    /**\r\n     * @param renderer - The renderer this system works for.\r\n     */\r\n    constructor(renderer: Renderer);\r\n    /** Sets up the renderer context and necessary buffers. */\r\n    contextChange(): void;\r\n    /**\r\n     * Bind a texture to a specific location\r\n     *\r\n     * If you want to unbind something, please use `unbind(texture)` instead of `bind(null, textureLocation)`\r\n     * @param texture - Texture to bind\r\n     * @param [location=0] - Location to bind at\r\n     */\r\n    bind(texture: Texture | BaseTexture, location?: number): void;\r\n    /** Resets texture location and bound textures Actual `bind(null, i)` calls will be performed at next `unbind()` call */\r\n    reset(): void;\r\n    /**\r\n     * Unbind a texture.\r\n     * @param texture - Texture to bind\r\n     */\r\n    unbind(texture?: BaseTexture): void;\r\n    /**\r\n     * Ensures that current boundTextures all have FLOAT sampler type,\r\n     * see {@link PIXI.SAMPLER_TYPES} for explanation.\r\n     * @param maxTextures - number of locations to check\r\n     */\r\n    ensureSamplerType(maxTextures: number): void;\r\n    /**\r\n     * Initialize a texture\r\n     * @private\r\n     * @param texture - Texture to initialize\r\n     */\r\n    initTexture(texture: BaseTexture): GLTexture;\r\n    initTextureType(texture: BaseTexture, glTexture: GLTexture): void;\r\n    /**\r\n     * Update a texture\r\n     * @private\r\n     * @param {PIXI.BaseTexture} texture - Texture to initialize\r\n     */\r\n    updateTexture(texture: BaseTexture): void;\r\n    /**\r\n     * Deletes the texture from WebGL\r\n     * @private\r\n     * @param texture - the texture to destroy\r\n     * @param [skipRemove=false] - Whether to skip removing the texture from the TextureManager.\r\n     */\r\n    destroyTexture(texture: BaseTexture | Texture, skipRemove?: boolean): void;\r\n    /**\r\n     * Update texture style such as mipmap flag\r\n     * @private\r\n     * @param {PIXI.BaseTexture} texture - Texture to update\r\n     */\r\n    updateTextureStyle(texture: BaseTexture): void;\r\n    /**\r\n     * Set style for texture\r\n     * @private\r\n     * @param texture - Texture to update\r\n     * @param glTexture\r\n     */\r\n    setStyle(texture: BaseTexture, glTexture: GLTexture): void;\r\n    destroy(): void;\r\n}\r\n\r\n/**\r\n * Stores a texture's frame in UV coordinates, in\r\n * which everything lies in the rectangle `[(0,0), (1,0),\r\n * (1,1), (0,1)]`.\r\n *\r\n * | Corner       | Coordinates |\r\n * |--------------|-------------|\r\n * | Top-Left     | `(x0,y0)`   |\r\n * | Top-Right    | `(x1,y1)`   |\r\n * | Bottom-Right | `(x2,y2)`   |\r\n * | Bottom-Left  | `(x3,y3)`   |\r\n * @protected\r\n * @memberof PIXI\r\n */\r\nexport declare class TextureUvs {\r\n    /** X-component of top-left corner `(x0,y0)`. */\r\n    x0: number;\r\n    /** Y-component of top-left corner `(x0,y0)`. */\r\n    y0: number;\r\n    /** X-component of top-right corner `(x1,y1)`. */\r\n    x1: number;\r\n    /** Y-component of top-right corner `(x1,y1)`. */\r\n    y1: number;\r\n    /** X-component of bottom-right corner `(x2,y2)`. */\r\n    x2: number;\r\n    /** Y-component of bottom-right corner `(x2,y2)`. */\r\n    y2: number;\r\n    /** X-component of bottom-left corner `(x3,y3)`. */\r\n    x3: number;\r\n    /** Y-component of bottom-right corner `(x3,y3)`. */\r\n    y3: number;\r\n    uvsFloat32: Float32Array;\r\n    constructor();\r\n    /**\r\n     * Sets the texture Uvs based on the given frame information.\r\n     * @protected\r\n     * @param frame - The frame of the texture\r\n     * @param baseFrame - The base frame of the texture\r\n     * @param rotate - Rotation of frame, see {@link PIXI.groupD8}\r\n     */\r\n    set(frame: Rectangle, baseFrame: ISize, rotate: number): void;\r\n    toString(): string;\r\n}\r\n\r\ndeclare interface UBOElement {\r\n    data: IUniformData;\r\n    offset: number;\r\n    dataLen: number;\r\n    dirty: number;\r\n}\r\n\r\n/**\r\n * Uniform group holds uniform map and some ID's for work\r\n *\r\n * `UniformGroup` has two modes:\r\n *\r\n * 1: Normal mode\r\n * Normal mode will upload the uniforms with individual function calls as required\r\n *\r\n * 2: Uniform buffer mode\r\n * This mode will treat the uniforms as a uniform buffer. You can pass in either a buffer that you manually handle, or\r\n * or a generic object that PixiJS will automatically map to a buffer for you.\r\n * For maximum benefits, make Ubo UniformGroups static, and only update them each frame.\r\n *\r\n * Rules of UBOs:\r\n * - UBOs only work with WebGL2, so make sure you have a fallback!\r\n * - Only floats are supported (including vec[2,3,4], mat[2,3,4])\r\n * - Samplers cannot be used in ubo's (a GPU limitation)\r\n * - You must ensure that the object you pass in exactly matches in the shader ubo structure.\r\n * Otherwise, weirdness will ensue!\r\n * - The name of the ubo object added to the group must match exactly the name of the ubo in the shader.\r\n *\r\n * ```\r\n * // ubo in shader:\r\n * uniform myCoolData { // declaring a ubo..\r\n * mat4 uCoolMatrix;\r\n * float uFloatyMcFloatFace\r\n *\r\n *\r\n * // a new uniform buffer object..\r\n * const myCoolData = new UniformBufferGroup({\r\n *   uCoolMatrix: new Matrix(),\r\n *   uFloatyMcFloatFace: 23,\r\n * }}\r\n *\r\n * // build a shader...\r\n * const shader = Shader.from(srcVert, srcFrag, {\r\n *   myCoolData // name matches the ubo name in the shader. will be processed accordingly.\r\n * })\r\n *\r\n *  ```\r\n * @memberof PIXI\r\n */\r\nexport declare class UniformGroup<LAYOUT = Dict<any>> {\r\n    /**\r\n     * Uniform values\r\n     * @member {object}\r\n     */\r\n    readonly uniforms: LAYOUT;\r\n    /**\r\n     * Its a group and not a single uniforms.\r\n     * @default true\r\n     */\r\n    readonly group: boolean;\r\n    /**\r\n     * unique id\r\n     * @protected\r\n     */\r\n    id: number;\r\n    syncUniforms: Dict<UniformsSyncCallback_2>;\r\n    /**\r\n     * Dirty version\r\n     * @protected\r\n     */\r\n    dirtyId: number;\r\n    /** Flag for if uniforms wont be changed after creation. */\r\n    static: boolean;\r\n    /** Flags whether this group is treated like a uniform buffer object. */\r\n    ubo: boolean;\r\n    buffer?: Buffer_2;\r\n    autoManage: boolean;\r\n    /**\r\n     * @param {object | Buffer} [uniforms] - Custom uniforms to use to augment the built-in ones. Or a pixi buffer.\r\n     * @param isStatic - Uniforms wont be changed after creation.\r\n     * @param isUbo - If true, will treat this uniform group as a uniform buffer object.\r\n     */\r\n    constructor(uniforms: LAYOUT | Buffer_2, isStatic?: boolean, isUbo?: boolean);\r\n    update(): void;\r\n    add(name: string, uniforms: Dict<any>, _static?: boolean): void;\r\n    static from(uniforms: Dict<any> | Buffer_2, _static?: boolean, _ubo?: boolean): UniformGroup;\r\n    /**\r\n     * A short hand function for creating a static UBO UniformGroup.\r\n     * @param uniforms - the ubo item\r\n     * @param _static - should this be updated each time it is used? defaults to true here!\r\n     */\r\n    static uboFrom(uniforms: Dict<any> | Buffer_2, _static?: boolean): UniformGroup;\r\n}\r\n\r\nexport declare const uniformParsers: IUniformParser[];\r\n\r\nexport declare type UniformsSyncCallback = (...args: any[]) => void;\r\n\r\ndeclare type UniformsSyncCallback_2 = (...args: any[]) => void;\r\n\r\n/**\r\n * Resource type for {@code HTMLVideoElement}.\r\n * @memberof PIXI\r\n */\r\nexport declare class VideoResource extends BaseImageResource {\r\n    /** Override the source to be the video element. */\r\n    source: HTMLVideoElement;\r\n    /**\r\n     * `true` to use PIXI.Ticker.shared to auto update the base texture.\r\n     * @default true\r\n     */\r\n    protected _autoUpdate: boolean;\r\n    /**\r\n     * `true` if the instance is currently connected to PIXI.Ticker.shared to auto update the base texture.\r\n     * @default false\r\n     */\r\n    protected _isConnectedToTicker: boolean;\r\n    protected _updateFPS: number;\r\n    protected _msToNextUpdate: number;\r\n    /**\r\n     * When set to true will automatically play videos used by this texture once\r\n     * they are loaded. If false, it will not modify the playing state.\r\n     * @default true\r\n     */\r\n    protected autoPlay: boolean;\r\n    /**\r\n     * Promise when loading.\r\n     * @default null\r\n     */\r\n    private _load;\r\n    /** Callback when completed with load. */\r\n    private _resolve;\r\n    /**\r\n     * @param {HTMLVideoElement|object|string|Array<string|object>} source - Video element to use.\r\n     * @param {object} [options] - Options to use\r\n     * @param {boolean} [options.autoLoad=true] - Start loading the video immediately\r\n     * @param {boolean} [options.autoPlay=true] - Start playing video immediately\r\n     * @param {number} [options.updateFPS=0] - How many times a second to update the texture from the video.\r\n     * Leave at 0 to update at every render.\r\n     * @param {boolean} [options.crossorigin=true] - Load image using cross origin\r\n     */\r\n    constructor(source?: HTMLVideoElement | Array<string | IVideoResourceOptionsElement> | string, options?: IVideoResourceOptions);\r\n    /**\r\n     * Trigger updating of the texture.\r\n     * @param _deltaTime - time delta since last tick\r\n     */\r\n    update(_deltaTime?: number): void;\r\n    /**\r\n     * Start preloading the video resource.\r\n     * @returns {Promise<void>} Handle the validate event\r\n     */\r\n    load(): Promise<VideoResource>;\r\n    /**\r\n     * Handle video error events.\r\n     * @param event\r\n     */\r\n    private _onError;\r\n    /**\r\n     * Returns true if the underlying source is playing.\r\n     * @returns - True if playing.\r\n     */\r\n    private _isSourcePlaying;\r\n    /**\r\n     * Returns true if the underlying source is ready for playing.\r\n     * @returns - True if ready.\r\n     */\r\n    private _isSourceReady;\r\n    /** Runs the update loop when the video is ready to play. */\r\n    private _onPlayStart;\r\n    /** Fired when a pause event is triggered, stops the update loop. */\r\n    private _onPlayStop;\r\n    /** Fired when the video is loaded and ready to play. */\r\n    private _onCanPlay;\r\n    /** Destroys this texture. */\r\n    dispose(): void;\r\n    /** Should the base texture automatically update itself, set to true by default. */\r\n    get autoUpdate(): boolean;\r\n    set autoUpdate(value: boolean);\r\n    /**\r\n     * How many times a second to update the texture from the video. Leave at 0 to update at every render.\r\n     * A lower fps can help performance, as updating the texture at 60fps on a 30ps video may not be efficient.\r\n     */\r\n    get updateFPS(): number;\r\n    set updateFPS(value: number);\r\n    /**\r\n     * Used to auto-detect the type of resource.\r\n     * @param {*} source - The source object\r\n     * @param {string} extension - The extension of source, if set\r\n     * @returns {boolean} `true` if video source\r\n     */\r\n    static test(source: unknown, extension?: string): source is HTMLVideoElement;\r\n    /**\r\n     * List of common video file extensions supported by VideoResource.\r\n     * @readonly\r\n     */\r\n    static TYPES: Array<string>;\r\n    /**\r\n     * Map of video MIME types that can't be directly derived from file extensions.\r\n     * @readonly\r\n     */\r\n    static MIME_TYPES: Dict<string>;\r\n}\r\n\r\n/**\r\n * Flexible wrapper around `ArrayBuffer` that also provides typed array views on demand.\r\n * @memberof PIXI\r\n */\r\nexport declare class ViewableBuffer {\r\n    size: number;\r\n    /** Underlying `ArrayBuffer` that holds all the data and is of capacity `this.size`. */\r\n    rawBinaryData: ArrayBuffer;\r\n    /** View on the raw binary data as a `Uint32Array`. */\r\n    uint32View: Uint32Array;\r\n    /** View on the raw binary data as a `Float32Array`. */\r\n    float32View: Float32Array;\r\n    private _int8View;\r\n    private _uint8View;\r\n    private _int16View;\r\n    private _uint16View;\r\n    private _int32View;\r\n    /**\r\n     * @param length - The size of the buffer in bytes.\r\n     */\r\n    constructor(length: number);\r\n    /**\r\n     * @param arrayBuffer - The source array buffer.\r\n     */\r\n    constructor(arrayBuffer: ArrayBuffer);\r\n    /** View on the raw binary data as a `Int8Array`. */\r\n    get int8View(): Int8Array;\r\n    /** View on the raw binary data as a `Uint8Array`. */\r\n    get uint8View(): Uint8Array;\r\n    /**  View on the raw binary data as a `Int16Array`. */\r\n    get int16View(): Int16Array;\r\n    /** View on the raw binary data as a `Uint16Array`. */\r\n    get uint16View(): Uint16Array;\r\n    /** View on the raw binary data as a `Int32Array`. */\r\n    get int32View(): Int32Array;\r\n    /**\r\n     * Returns the view of the given type.\r\n     * @param type - One of `int8`, `uint8`, `int16`,\r\n     *    `uint16`, `int32`, `uint32`, and `float32`.\r\n     * @returns - typed array of given type\r\n     */\r\n    view(type: string): ITypedArray;\r\n    /** Destroys all buffer references. Do not use after calling this. */\r\n    destroy(): void;\r\n    static sizeOf(type: string): number;\r\n}\r\n\r\ndeclare interface WEBGL_compressed_texture_atc {\r\n    COMPRESSED_RGB_ATC_WEBGL: number;\r\n    COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL: number;\r\n    COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL: number;\r\n}\r\n\r\ndeclare interface WEBGL_compressed_texture_etc1_2 {\r\n    COMPRESSED_RGB_ETC1_WEBGL: number;\r\n}\r\n\r\ndeclare interface WEBGL_compressed_texture_etc_2 {\r\n    COMPRESSED_R11_EAC: number;\r\n    COMPRESSED_SIGNED_R11_EAC: number;\r\n    COMPRESSED_RG11_EAC: number;\r\n    COMPRESSED_SIGNED_RG11_EAC: number;\r\n    COMPRESSED_RGB8_ETC2: number;\r\n    COMPRESSED_RGBA8_ETC2_EAC: number;\r\n    COMPRESSED_SRGB8_ETC2: number;\r\n    COMPRESSED_SRGB8_ALPHA8_ETC2_EAC: number;\r\n    COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2: number;\r\n    COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2: number;\r\n}\r\n\r\ndeclare interface WEBGL_compressed_texture_pvrtc_2 {\r\n    COMPRESSED_RGB_PVRTC_4BPPV1_IMG: number;\r\n    COMPRESSED_RGBA_PVRTC_4BPPV1_IMG: number;\r\n    COMPRESSED_RGB_PVRTC_2BPPV1_IMG: number;\r\n    COMPRESSED_RGBA_PVRTC_2BPPV1_IMG: number;\r\n}\r\n\r\ndeclare interface WebGLExtensions {\r\n    drawBuffers?: WEBGL_draw_buffers;\r\n    depthTexture?: OES_texture_float;\r\n    loseContext?: WEBGL_lose_context;\r\n    vertexArrayObject?: OES_vertex_array_object;\r\n    anisotropicFiltering?: EXT_texture_filter_anisotropic;\r\n    uint32ElementIndex?: OES_element_index_uint;\r\n    floatTexture?: OES_texture_float;\r\n    floatTextureLinear?: OES_texture_float_linear;\r\n    textureHalfFloat?: OES_texture_half_float;\r\n    textureHalfFloatLinear?: OES_texture_half_float_linear;\r\n    colorBufferFloat?: WEBGL_color_buffer_float;\r\n    s3tc?: WEBGL_compressed_texture_s3tc;\r\n    s3tc_sRGB?: WEBGL_compressed_texture_s3tc_srgb;\r\n    etc?: WEBGL_compressed_texture_etc_2;\r\n    etc1?: WEBGL_compressed_texture_etc1_2;\r\n    pvrtc?: WEBGL_compressed_texture_pvrtc_2;\r\n    atc?: WEBGL_compressed_texture_atc;\r\n    astc?: WEBGL_compressed_texture_astc;\r\n}\r\n\r\nexport { }\r\n"
    ]
  