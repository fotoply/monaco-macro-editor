
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\client\\pixi\\placeables\\wall.d.ts",
      "import type {\n  ConfiguredDocumentClass,\n  ConfiguredDocumentClassForName,\n  ConfiguredObjectClassForName\n} from '../../../../types/helperTypes';\nimport type { DocumentModificationOptions } from '../../../common/abstract/document.mjs';\nimport type { LineIntersection } from '../../../common/utils/geometry.mjs';\nimport type { HoverInOptions } from '../placeable';\n\ndeclare global {\n  /**\n   * A Wall is an implementation of PlaceableObject which represents a physical or visual barrier within the Scene.\n   * Walls are used to restrict Token movement or visibility as well as to define the areas of effect for ambient lights\n   * and sounds.\n   *\n   * @see {@link WallDocument}\n   * @see {@link WallsLayer}\n   * @see {@link WallConfig}\n   */\n  class Wall extends PlaceableObject<ConcreteWallDocument> {\n    /**\n     * @remarks Not used for `Wall`\n     */\n    controlIcon: null;\n\n    /**\n     * An reference the Door Control icon associated with this Wall, if any\n     * @internal\n     * @defaultValue `undefined`\n     */\n    doorControl: DoorControl | undefined | null;\n\n    /**\n     * A reference to an overhead Tile that is a roof, interior to which this wall is contained\n     * @defaultValue `undefined`\n     */\n    roof: InstanceType<ConfiguredObjectClassForName<'Tile'>> | undefined;\n\n    /**\n     * A set which tracks other Wall instances that this Wall intersects with (excluding shared endpoints)\n     */\n    intersectsWith: Map<InstanceType<ConfiguredObjectClassForName<'Wall'>>, LineIntersection>;\n\n    /**\n     * Cached representation of this wall's endpoints as {@link PolygonVertex}es.\n     * @defaultValue `null`\n     * @internal\n     */\n    protected _vertices: { a: PolygonVertex; b: PolygonVertex } | null;\n\n    /**\n     * Cached representation of the set of this wall's vertices.\n     * @defaultValue `null`\n     * @internal\n     */\n    protected _wallKeys: Set<string> | null;\n\n    static override embeddedName: 'Wall';\n\n    /**\n     * A convenience reference to the coordinates Array for the Wall endpoints, [x0,y0,x1,y1].\n     */\n    get coords(): Wall['data']['c'];\n\n    /**\n     * The initial endpoint of the Wall\n     */\n    get A(): Point;\n\n    /**\n     * The second endpoint of the Wall\n     */\n    get B(): Point;\n\n    /**\n     * The endpoints of the wall as {@link PolygonVertex}es.\n     */\n    get vertices(): { a: PolygonVertex; b: PolygonVertex };\n\n    /**\n     * The set of keys for this wall's endpoints.\n     */\n    get wallKeys(): Set<string>;\n\n    override get bounds(): NormalizedRectangle;\n\n    /**\n     * A boolean for whether this wall contains a door\n     */\n    get isDoor(): boolean;\n\n    /**\n     * A boolean for whether the wall contains an open door\n     */\n    get isOpen(): boolean;\n\n    /**\n     * Is this Wall interior to a non-occluded roof Tile?\n     */\n    get hasActiveRoof(): boolean;\n\n    /**\n     * Return the coordinates [x,y] at the midpoint of the wall segment\n     */\n    get midpoint(): PointArray;\n\n    override get center(): PIXI.Point;\n\n    /**\n     * Get the direction of effect for a directional Wall\n     * @returns The angle of wall effect\n     */\n    get direction(): number | null;\n\n    /**\n     * This helper converts the wall segment to a Ray\n     * @returns The wall in Ray representation\n     */\n    toRay(): Ray;\n\n    override draw(): Promise<this>;\n\n    /**\n     * Draw a control icon that is used to manipulate the door's open/closed state\n     */\n    createDoorControl(): DoorControl;\n\n    /**\n     * Determine the orientation of this wall with respect to a reference point\n     * @param point - Some reference point, relative to which orientation is determined\n     * @returns An orientation in CONST.WALL_DIRECTIONS which indicates whether the Point is left,\n     *          right, or collinear (both) with the Wall\n     */\n    orientPoint(point: Point): number;\n\n    protected override _createInteractionManager(): NonNullable<this['mouseInteractionManager']>;\n\n    override activateListeners(): void;\n\n    /**\n     * Draw a directional prompt icon for one-way walls to illustrate their direction of effect.\n     * @returns The drawn icon\n     * @internal\n     */\n    protected _drawDirection(): PIXI.Sprite | null;\n\n    override refresh(): this;\n\n    /**\n     * Compute an approximate Polygon which encloses the line segment providing a specific hitArea for the line\n     * @param coords - The original wall coordinates\n     * @param pad    - The amount of padding to apply\n     * @returns A constructed Polygon for the line\n     * @internal\n     */\n    protected _getWallHitPolygon(coords: [number, number, number, number], pad: number): PIXI.Polygon;\n\n    /**\n     * Given the properties of the wall - decide upon a color to render the wall for display on the WallsLayer\n     * @internal\n     */\n    protected _getWallColor(): number;\n\n    /**\n     * @param chain - (default: `false`)\n     */\n    protected override _onControl({ chain }?: PlaceableObject.ControlOptions & { chain?: boolean }): void;\n\n    protected override _onRelease(options?: PlaceableObject.ReleaseOptions): void;\n\n    override destroy(options?: Parameters<PlaceableObject['destroy']>[0]): void;\n\n    /**\n     * Test whether the Wall direction lies between two provided angles\n     * This test is used for collision and vision checks against one-directional walls\n     * @param lower - The lower-bound limiting angle in radians\n     * @param upper - The upper-bound limiting angle in radians\n     */\n    isDirectionBetweenAngles(lower: number, upper: number): boolean;\n\n    /**\n     * A simple test for whether a Ray can intersect a directional wall\n     * @param ray - The ray to test\n     * @returns Can an intersection occur?\n     */\n    canRayIntersect(ray: Ray): boolean;\n\n    /**\n     * Get an Array of Wall objects which are linked by a common coordinate\n     * @returns An object reporting ids and endpoints of the linked segments\n     */\n    getLinkedSegments(): {\n      ids: string[];\n      walls: WallsLayer['placeables'];\n      endpoints: Array<[x: number, y: number]>;\n    };\n\n    /**\n     * Determine whether this wall is beneath a roof tile, and is considered \"interior\", or not.\n     */\n    identifyInteriorState(): void;\n\n    /**\n     * Update any intersections with this wall.\n     */\n    updateIntersections(): void;\n\n    /**\n     * Record the intersection points between this wall and another, if any.\n     * @param other - The other wall.\n     */\n    protected _identifyIntersectionsWith(other: InstanceType<ConfiguredDocumentClassForName<'Wall'>>): void;\n\n    /**\n     * Remove this wall's intersections.\n     * @internal\n     */\n    protected _removeIntersections(): void;\n\n    protected override _onCreate(\n      data: foundry.data.WallData['_source'],\n      options: DocumentModificationOptions,\n      userId: string\n    ): void;\n\n    protected override _onUpdate(\n      changed: DeepPartial<foundry.data.WallData['_source']>,\n      options?: DocumentModificationOptions,\n      userId?: string\n    ): void;\n\n    protected override _onDelete(options: DocumentModificationOptions, userId: string): void;\n\n    /**\n     * Callback actions when a wall that contains a door is moved or its state is changed\n     * @param doorChange - Update vision and sound restrictions\n     *                     (default: `false`)\n     * @internal\n     */\n    protected _onModifyWall(doorChange?: boolean): Promise<void>;\n\n    protected override _canControl(user: InstanceType<ConfiguredDocumentClass<typeof User>>, event?: any): boolean;\n\n    protected override _onHoverIn(event: PIXI.InteractionEvent, options?: HoverInOptions): false | void;\n\n    protected override _onHoverOut(event: PIXI.InteractionEvent): false | void;\n\n    /**\n     * Handle mouse-hover events on the line segment itself, pulling the Wall to the front of the container stack\n     * @internal\n     */\n    protected _onMouseOverLine(event: PIXI.InteractionEvent): void;\n\n    protected override _onClickLeft(event: PIXI.InteractionEvent): boolean;\n\n    protected override _onClickLeft2(event: PIXI.InteractionEvent): void;\n\n    protected override _onClickRight2(event: PIXI.InteractionEvent): void;\n\n    protected override _onDragLeftStart(event: PIXI.InteractionEvent): void;\n\n    protected override _onDragLeftMove(event: PIXI.InteractionEvent): void;\n\n    protected override _onDragLeftDrop(event: PIXI.InteractionEvent): Promise<any>;\n  }\n}\n\ntype ConcreteWallDocument = InstanceType<ConfiguredDocumentClass<typeof WallDocument>>;\n"
    ]
  