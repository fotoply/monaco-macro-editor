
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\client\\apps\\forms\\scene-config.d.ts",
      "import type { ConfiguredDocumentClassForName, DocumentConstructor } from '../../../../types/helperTypes';\n\ndeclare global {\n  /**\n   * The Application responsible for configuring a single Scene document.   *\n   * @typeParam Options - the type of the options object\n   * @typeParam Data    - The data structure used to render the handlebars template.\n   */\n  class SceneConfig<\n    Options extends DocumentSheetOptions = DocumentSheetOptions,\n    Data extends object = SceneConfig.Data<Options>\n  > extends DocumentSheet<Options, Data, InstanceType<ConfiguredDocumentClassForName<'Scene'>>> {\n    /**\n     * @defaultValue\n     * ```typescript\n     * foundry.utils.mergeObject(super.defaultOptions, {\n     *   id: \"scene-config\",\n     *   classes: [\"sheet\", \"scene-sheet\"],\n     *   template: \"templates/scene/config.html\",\n     *   width: 560,\n     *   height: \"auto\",\n     *   tabs: [{navSelector: \".tabs\", contentSelector: \"form\", initial: \"basic\"}]\n     * });\n     * ```\n     */\n    static override get defaultOptions(): DocumentSheetOptions;\n\n    override get title(): string;\n\n    override close(options?: Application.CloseOptions | undefined): Promise<void>;\n\n    override render(force?: boolean, options?: Application.RenderOptions<Options>): this;\n\n    override getData(options?: Partial<DocumentSheetOptions>): Data | Promise<Data>;\n\n    /**\n     * Get an enumeration of the available grid types which can be applied to this Scene\n     * @internal\n     */\n    protected static _getGridTypes(): Record<foundry.CONST.GRID_TYPES, string>;\n\n    /**\n     * Get the available weather effect types which can be applied to this Scene\n     * @internal\n     */\n    protected _getWeatherTypes(): Record<string, string>;\n\n    /**\n     * Get the alphabetized Documents which can be chosen as a configuration for the Scene\n     * @internal\n     */\n    protected _getDocuments(collection: WorldCollection<DocumentConstructor, string>): { _id: string; name: string }[];\n\n    override activateListeners(html: JQuery): void;\n\n    /**\n     * Capture the current Scene position and zoom level as the initial view in the Scene config\n     * @param event - The originating click event\n     * @internal\n     */\n    protected _onCapturePosition(event: JQuery.ClickEvent): void;\n\n    protected override _onChangeInput(event: JQuery.ChangeEvent): void;\n\n    protected override _onChangeColorPicker(event: JQuery.ChangeEvent): void;\n\n    protected override _onChangeRange(event: JQuery.ChangeEvent): void;\n\n    /**\n     * Live update the scene as certain properties are changed.\n     * @param changed - The changed property.\n     * @internal\n     */\n    protected _previewScene(changed: string): void;\n\n    /**\n     * Reset the previewed darkness level, background color, grid alpha, and grid color back to their true values.\n     * @internal\n     */\n    protected _resetScenePreview(): void;\n\n    /**\n     * Handle updating the select menu of PlaylistSound options when the Playlist is changed\n     * @param event - The initiating select change event\n     * @internal\n     */\n    _onChangePlaylist(event: JQuery.ChangeEvent): void;\n\n    /**\n     * Handle click events to open the grid configuration application\n     * @param event - The originating click event\n     */\n    protected _onGridConfig(event: JQuery.ClickEvent): void;\n\n    protected override _updateObject(event: Event, formData: SceneConfig.FormData): Promise<unknown>;\n  }\n\n  namespace SceneConfig {\n    interface Data<Options extends DocumentSheetOptions = DocumentSheetOptions>\n      extends DocumentSheet.Data<InstanceType<ConfiguredDocumentClassForName<'Scene'>>, Options> {\n      gridTypes: ReturnType<typeof SceneConfig['_getGridTypes']>;\n      weatherTypes: ReturnType<SceneConfig['_getWeatherTypes']>;\n      playlists: ReturnType<SceneConfig['_getDocuments']>;\n      sounds: ReturnType<SceneConfig['_getDocuments']>;\n      journals: ReturnType<SceneConfig['_getDocuments']>;\n      hasGlobalThreshold: boolean;\n      data: DocumentSheet.Data<InstanceType<ConfiguredDocumentClassForName<'Scene'>>, Options>['data'] & {\n        /**\n         * @defaultValue `0`\n         */\n        globalLightThreshold: number;\n      };\n    }\n\n    type FormData = {\n      backgroundColor: string;\n      darkness: number;\n      fogExploration: boolean;\n      foreground: string;\n      globalLight: boolean;\n      globalLightThreshold: number;\n      grid: number | null;\n      gridAlpha: number;\n      gridColor: string;\n      gridDistance: number | null;\n      gridType: foundry.CONST.GRID_TYPES;\n      gridUnits: string;\n      hasGlobalThreshold: boolean;\n      height: number | null;\n      img: string;\n      'initial.scale': number | null;\n      'initial.x': number | null;\n      'initial.y': number | null;\n      journal: string;\n      name: string;\n      navName: string;\n      navigation: boolean;\n      padding: number;\n      'permission.default': foundry.CONST.DOCUMENT_PERMISSION_LEVELS;\n      playlist: string;\n      shiftX: number | null;\n      shiftY: number | null;\n      tokenVision: boolean;\n      weather: string;\n      width: number | null;\n    };\n  }\n}\n"
    ]
  