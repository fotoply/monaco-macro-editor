
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\client\\pixi\\sources\\base-source.d.ts",
      "/**\n * A helper class used by the Sight Layer to represent a source of vision or illumination.\n */\ndeclare abstract class PointSource {\n  /**\n   * @param object - The object responsible for the PointSource\n   */\n  constructor(object: PlaceableObject);\n\n  /**\n   * The object responsible for this source.\n   */\n  object: PlaceableObject;\n\n  /**\n   * The type of source represented by this data structure.\n   * Each subclass must implement this attribute.\n   * @remarks This is undefined in PointSource.\n   */\n  static sourceType: string | undefined;\n\n  /**\n   * The default Geometry stored in the GPU for all Point Source meshes.\n   */\n  static GEOMETRY: PIXI.Geometry;\n\n  /**\n   * A flag for whether this source is currently active (rendered) or not\n   * @defaultValue `false`\n   */\n  active: boolean;\n\n  /**\n   * The object of data which configures how this source is rendered\n   * @defaultValue `{}`\n   */\n  data: Partial<PointSource.Data>;\n\n  /**\n   * The maximum radius of emission for this source\n   * @defaultValue `0`\n   */\n  radius: number;\n\n  /**\n   * The restricted line-of-sight polygon that is generated by the origin and radius of this source.\n   * @defaultValue `undefined`\n   */\n  los: PointSourcePolygon | undefined;\n\n  /**\n   * A Graphics object with pre-computed geometry used for masking based on line-of-sight.\n   * @defaultValue `new PIXI.LegacyGraphics()`\n   */\n  losMask: PIXI.Graphics;\n\n  /**\n   * Is the angle of emission for this source limited?\n   * @defaultValue `false`\n   */\n  limited: boolean;\n\n  /**\n   * Boolean flags which control whether certain behaviors of the source must be enforced\n   * @defaultValue `{}`\n   */\n  protected _flags: {\n    renderFOV?: boolean;\n  } & Record<string, boolean>;\n\n  /**\n   * The x-coordinate of the point source origin.\n   */\n  get x(): number | undefined;\n\n  /**\n   * The y-coordinate of the point source origin.\n   */\n  get y(): number | undefined;\n\n  /**\n   * The type of source represented by this data structure.\n   */\n  get sourceType(): typeof PointSource['sourceType'];\n\n  /**\n   * A point is contained with the area of the source if it is within both the FOV circle as well as the LOS polygon.\n   * @param point - The point to test\n   * @returns Is the point contained\n   */\n  containsPoint(point: Point): boolean;\n\n  /**\n   * Steps that must be performed when the base source is destroyed.\n   */\n  destroy(): void;\n\n  fovTexture?: PIXI.RenderTexture | undefined;\n\n  abstract initialize(data?: Partial<PointSource.Data>): this;\n\n  /**\n   * Get power of 2 size pertaining to base-source radius and performance modes\n   * @returns The computed power of 2 size\n   */\n  getPowerOf2Size(): number;\n\n  /**\n   * Create a new Mesh for this source using a provided shader class\n   * @param shaderCls - The subclass of AdaptiveLightingShader being used for this Mesh\n   * @returns The created Mesh\n   */\n  protected _createMesh(shaderCls: ConstructorOf<AdaptiveLightingShader>): PIXI.Mesh;\n\n  /**\n   * Update the position and size of the mesh each time it is drawn.\n   * @param mesh - The Mesh being updated\n   * @returns The updated Mesh\n   */\n  protected _updateMesh(mesh: PIXI.Mesh): PIXI.Mesh;\n\n  /**\n   * Render this source to a texture which can be used for masking and blurring.\n   */\n  protected _renderTexture(): PIXI.RenderTexture;\n\n  /**\n   * Create a container that should be rendered to the fov texture for this source\n   * @returns The drawn container for the render texture\n   */\n  protected _drawRenderTextureContainer(): PIXI.Container;\n}\n\ndeclare namespace PointSource {\n  interface Data {\n    /** The x-coordinate of the source location */\n    x?: number;\n\n    /** The y-coordinate of the source location */\n    y?: number;\n\n    /** Whether or not the source is constrained by walls */\n    walls?: boolean;\n  }\n}\n"
    ]
  