
    export default [
      "typescript\\lib\\lib.es2018.intl.d.ts",
      "/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n\n/// <reference no-default-lib=\"true\"/>\r\n\n\ndeclare namespace Intl {\r\n\r\n    // http://cldr.unicode.org/index/cldr-spec/plural-rules#TOC-Determining-Plural-Categories\r\n    type LDMLPluralRule = \"zero\" | \"one\" | \"two\" | \"few\" | \"many\" | \"other\";\r\n    type PluralRuleType = \"cardinal\" | \"ordinal\";\r\n\r\n    interface PluralRulesOptions {\r\n        localeMatcher?: \"lookup\" | \"best fit\" | undefined;\r\n        type?: PluralRuleType | undefined;\r\n        minimumIntegerDigits?: number | undefined;\r\n        minimumFractionDigits?: number | undefined;\r\n        maximumFractionDigits?: number | undefined;\r\n        minimumSignificantDigits?: number | undefined;\r\n        maximumSignificantDigits?: number | undefined;\r\n    }\r\n\r\n    interface ResolvedPluralRulesOptions {\r\n        locale: string;\r\n        pluralCategories: LDMLPluralRule[];\r\n        type: PluralRuleType;\r\n        minimumIntegerDigits: number;\r\n        minimumFractionDigits: number;\r\n        maximumFractionDigits: number;\r\n        minimumSignificantDigits?: number;\r\n        maximumSignificantDigits?: number;\r\n    }\r\n\r\n    interface PluralRules {\r\n        resolvedOptions(): ResolvedPluralRulesOptions;\r\n        select(n: number): LDMLPluralRule;\r\n    }\r\n\r\n    const PluralRules: {\r\n        new (locales?: string | string[], options?: PluralRulesOptions): PluralRules;\r\n        (locales?: string | string[], options?: PluralRulesOptions): PluralRules;\r\n\r\n        supportedLocalesOf(locales: string | string[], options?: { localeMatcher?: \"lookup\" | \"best fit\" }): string[];\r\n    };\r\n\r\n    // We can only have one definition for 'type' in TypeScript, and so you can learn where the keys come from here:\r\n    type ES2018NumberFormatPartType = \"literal\" | \"nan\" | \"infinity\" | \"percent\" | \"integer\" | \"group\" | \"decimal\" | \"fraction\" | \"plusSign\" | \"minusSign\" | \"percentSign\" | \"currency\" | \"code\" | \"symbol\" | \"name\";\r\n    type ES2020NumberFormatPartType = \"compact\" | \"exponentInteger\" | \"exponentMinusSign\" | \"exponentSeparator\" | \"unit\" | \"unknown\";\r\n    type NumberFormatPartTypes = ES2018NumberFormatPartType | ES2020NumberFormatPartType;\r\n\r\n    interface NumberFormatPart {\r\n        type: NumberFormatPartTypes;\r\n        value: string;\r\n    }\r\n\r\n    interface NumberFormat {\r\n        formatToParts(number?: number | bigint): NumberFormatPart[];\r\n    }\r\n}\r\n"
    ]
  