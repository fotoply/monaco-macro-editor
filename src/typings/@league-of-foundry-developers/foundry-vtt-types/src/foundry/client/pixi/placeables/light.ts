
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\client\\pixi\\placeables\\light.d.ts",
      "import type { ConfiguredDocumentClassForName } from '../../../../types/helperTypes';\nimport { DocumentModificationOptions } from '../../../common/abstract/document.mjs';\n\ndeclare global {\n  /**\n   * An AmbientLight is an implementation of PlaceableObject which represents a dynamic light source within the Scene.\n   */\n  class AmbientLight extends PlaceableObject<InstanceType<ConfiguredDocumentClassForName<'AmbientLight'>>> {\n    constructor(document: InstanceType<ConfiguredDocumentClassForName<'AmbientLight'>>);\n\n    /**\n     * A reference to the PointSource object which defines this light source area of effect\n     */\n    source: LightSource;\n\n    /**\n     * A reference to the ControlIcon used to configure this light\n     * @defaultValue `undefined`\n     */\n    controlIcon: ControlIcon | undefined;\n\n    static override embeddedName: 'AmbientLight';\n\n    override get bounds(): NormalizedRectangle;\n\n    /**\n     * A convenience accessor to the LightData configuration object\n     */\n    get config(): foundry.data.LightData;\n\n    /**\n     * Test whether a specific AmbientLight source provides global illumination\n     */\n    get global(): boolean;\n\n    /**\n     * The maximum radius in pixels of the light field\n     */\n    get radius(): number;\n\n    /**\n     * Get the pixel radius of dim light emitted by this light source\n     */\n    get dimRadius(): number;\n\n    /**\n     * Get the pixel radius of bright light emitted by this light source\n     */\n    get brightRadius(): number;\n\n    /**\n     * Return whether the light source is currently visible in the scene\n     */\n    get isVisible(): boolean;\n\n    override draw(): Promise<this>;\n\n    override destroy(options?: Parameters<PlaceableObject['destroy']>[0]): void;\n\n    /**\n     * Draw the ControlIcon for the AmbientLight\n     * @internal\n     */\n    protected _drawControlIcon(): ControlIcon;\n\n    override refresh(): this;\n\n    /**\n     * Refresh the display of the ControlIcon for this AmbientLight source\n     */\n    refreshControl(): void;\n\n    /**\n     * The named identified for the source object associated with this light\n     */\n    get sourceId(): string;\n\n    /**\n     * Update the source object associated with this light\n     * @param options - (default: `{}}`)\n     */\n    updateSource(options?: AmbientLight.UpdateSourceOptions | undefined): void;\n\n    protected override _onCreate(\n      data: foundry.data.AmbientLightData['_source'],\n      options: DocumentModificationOptions,\n      userId: string\n    ): void;\n\n    protected override _onUpdate(\n      changed: DeepPartial<foundry.data.AmbientLightData['_source']>,\n      options?: DocumentModificationOptions,\n      userId?: string\n    ): void;\n\n    protected override _onDelete(options: DocumentModificationOptions, userId: string): void;\n\n    protected override _canHUD(user: InstanceType<ConfiguredDocumentClassForName<'User'>>, event?: any): boolean;\n\n    protected override _canConfigure(user: InstanceType<ConfiguredDocumentClassForName<'User'>>, event?: any): boolean;\n\n    protected override _onClickRight(event: PIXI.InteractionEvent): Promise<this>;\n\n    protected override _onDragLeftStart(event: PIXI.InteractionEvent): void;\n\n    protected override _onDragLeftMove(event: PIXI.InteractionEvent): void;\n\n    protected override _onDragLeftCancel(event: MouseEvent): void;\n  }\n\n  namespace AmbientLight {\n    interface UpdateSourceOptions {\n      /**\n       * Defer refreshing the LightingLayer to manually call that refresh later.\n       * @defaultValue `false`\n       */\n      defer?: boolean | undefined;\n\n      /**\n       * Indicate that this light source has been deleted.\n       * @defaultValue `false`\n       */\n      deleted?: boolean | undefined;\n    }\n  }\n}\n"
    ]
  