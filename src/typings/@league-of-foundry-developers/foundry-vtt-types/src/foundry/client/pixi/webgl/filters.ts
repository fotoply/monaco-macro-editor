
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\client\\pixi\\webgl\\filters.d.ts",
      "/**\n * This class defines an interface for masked custom filters\n */\ndeclare abstract class AbstractBaseMaskFilter extends PIXI.Filter {\n  /**\n   * The default vertex shader used by all instances of AbstractBaseMaskFilter\n   */\n  static vertexShader: string;\n\n  /**\n   * The fragment shader which renders this filter.\n   * A subclass of AbstractBaseMaskFilter must implement the fragmentShader(channel) static field.\n   */\n  static fragmentShader: ((channel: 'r' | 'g' | 'b') => string) | null;\n\n  /**\n   * A factory method for creating the filter using its defined default values\n   * @param defaultUniforms - Initial uniforms provided to the filter\n   *                          (default: `{}`)\n   * @param channel         - A color channel to target for masking.\n   *                          (default: `'r'`)\n   */\n  static create<T extends AbstractBaseMaskFilter>(\n    this: ConstructorOf<T>,\n    defaultUniforms?: ConstructorParameters<typeof PIXI.Filter>[2],\n    channel?: 'r' | 'g' | 'b'\n  ): T;\n\n  override apply(\n    filterManager: PIXI.systems.FilterSystem,\n    input: PIXI.RenderTexture,\n    output: PIXI.RenderTexture,\n    clear: PIXI.CLEAR_MODES,\n    currentState: any\n  ): void;\n}\n\n/**\n * A filter used to control channels intensity using an externally provided mask texture.\n * The mask channel used must be provided at filter creation.\n * Contributed by SecretFire#4843\n */\ndeclare class InverseOcclusionMaskFilter extends AbstractBaseMaskFilter {\n  static fragmentShader(channel: 'r' | 'g' | 'b'): string;\n\n  /**\n   * @param defaultUniforms - (default: `{}`)\n   * @param channel  - (default `'r'`)\n   */\n  static create<T extends InverseOcclusionMaskFilter>(\n    this: ConstructorOf<T>,\n    defaultUniforms?: ConstructorParameters<typeof PIXI.Filter>[2],\n    channel?: 'r' | 'g' | 'b'\n  ): T;\n}\n\n/**\n * An abstract filter which provides a framework for reusable definition\n */\ndeclare abstract class AbstractFilter extends PIXI.Filter {\n  /**\n   * The default uniforms used by the filter\n   * @defaultValue `{}`\n   */\n  static defaultUniforms: AbstractBaseShader.Uniforms;\n\n  /**\n   * The fragment shader which renders this filter.\n   * @defaultValue `undefined`\n   * @remarks This is a function in {@link GlowFilter}. See https://gitlab.com/foundrynet/foundryvtt/-/issues/6937\n   */\n  static fragmentShader: string | ((quality: number, distance: number) => string) | undefined;\n\n  /**\n   * The vertex shader which renders this filter.\n   * @defaultValue `undefined`\n   */\n  static vertexShader: string | undefined;\n\n  /**\n   * A factory method for creating the filter using its defined default values\n   * @param uniforms - (default: `{}`)\n   */\n  static create(uniforms: AbstractBaseShader.Uniforms): AbstractFilter;\n\n  /**\n   * Always target the resolution of the render texture or renderer\n   */\n  // @ts-expect-error this is a property on PIXI.Filter\n  get resolution(): number;\n  set resolution(value: number);\n\n  /**\n   * Always target the MSAA level of the render texture or renderer\n   */\n  get multisample(): PIXI.MSAA_QUALITY;\n  set multisample(value: PIXI.MSAA_QUALITY);\n}\n\n/**\n * A filter which forces all non-transparent pixels to a specific color and transparency.\n */\ndeclare class ForceColorFilter extends AbstractFilter {\n  /**\n   * @defaultValue\n   * ```typescript\n   * {\n   *   color: [1, 1, 1],\n   *   alpha: 1.0\n   * }\n   * ```\n   */\n  static defaultUniforms: AbstractBaseShader.Uniforms;\n\n  static fragmentShader: string;\n}\n\n/**\n * A filter which is rendering explored color according to FoW intensity.\n */\ndeclare class FogColorFilter extends AbstractFilter {\n  /**\n   * @defaultValue\n   * ```typescript\n   * {\n   *   exploredColor: [1, 1, 1]\n   * }\n   * ```\n   */\n  static defaultUniforms: AbstractBaseShader.Uniforms;\n\n  static fragmentShader: string;\n}\n\n/**\n * This filter turns pixels with an alpha channel &lt; alphaThreshold in transparent pixels\n * Then, optionally, it can turn the result in the chosen color (default: pure white).\n * The alpha [threshold,1] is re-mapped to [0,1] with an hermite interpolation slope to prevent pixelation.\n */\ndeclare class RoofMaskFilter extends AbstractFilter {\n  /**\n   * @defaultValue\n   * ```typescript\n   * {\n   *   alphaThreshold: 0.75,\n   *   turnToColor: false,\n   *   color: [1, 1, 1]\n   * }\n   * ```\n   */\n  static defaultUniforms: AbstractBaseShader.Uniforms;\n\n  static fragmentShader: string;\n}\n\n/**\n * A filter which implements an inner or outer glow around the source texture.\n * Incorporated from https://github.com/pixijs/filters/tree/main/filters/glow\n */\ndeclare class GlowFilter extends AbstractFilter {\n  /**\n   * @defaultValue\n   * ```typescript\n   * {\n   *   distance: 10,\n   *   innerStrength: 0,\n   *   glowColor: [1, 1, 1, 1],\n   *   quality: 0.1,\n   * }\n   * ```\n   */\n  static override defaultUniforms: AbstractBaseShader.Uniforms & { distance: number; quality: number };\n\n  /**\n   * @remarks This could change, see https://gitlab.com/foundrynet/foundryvtt/-/issues/6937\n   */\n  static override fragmentShader(quality: number, distance: number): string;\n\n  static override vertexShader: string;\n\n  static override create(uniforms: AbstractBaseShader.Uniforms): GlowFilter;\n}\n"
    ]
  