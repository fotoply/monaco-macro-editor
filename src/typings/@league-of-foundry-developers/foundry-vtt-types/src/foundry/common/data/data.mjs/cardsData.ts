
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\common\\data\\data.mjs\\cardsData.d.ts",
      "import {\n  ConfiguredData,\n  ConfiguredDocumentClass,\n  ConfiguredFlags,\n  ConfiguredSource,\n  FieldReturnType,\n  PropertiesToSource\n} from '../../../../types/helperTypes';\nimport type EmbeddedCollection from '../../abstract/embedded-collection.mjs';\nimport { DocumentData } from '../../abstract/module.mjs';\nimport * as documents from '../../documents.mjs';\nimport * as fields from '../fields.mjs';\n\ninterface CardsDataSchema extends DocumentSchema {\n  _id: fields.DocumentId;\n  name: fields.RequiredString;\n  type: FieldReturnType<\n    fields.RequiredString,\n    {\n      default: () => string;\n      validate: (t: unknown) => boolean;\n      validationError: '{name} {field} \"{value}\" is not a valid type';\n    }\n  >;\n  description: fields.BlankString;\n  img: FieldReturnType<fields.VideoField, { default: () => string }>;\n  data: fields.SystemDataField;\n  cards: fields.EmbeddedCollectionField<typeof documents.BaseCard>;\n  width: fields.PositiveIntegerField;\n  heigth: fields.PositiveIntegerField;\n  rotation: fields.AngleField;\n  displayCount: fields.BooleanField;\n  folder: fields.ForeignDocumentField<{ type: typeof documents.BaseFolder }>;\n  sort: fields.IntegerSortField;\n  permission: fields.DocumentPermissions;\n  flags: fields.ObjectField;\n}\n\ninterface CardsDataBaseProperties {\n  /**\n   * The _id which uniquely identifies this stack of Cards document\n   * @defaultValue `null`\n   */\n  _id: string | null;\n\n  /** The text name of this stack */\n  name: string;\n\n  /**\n   * The type of this stack, in BaseCards.metadata.types\n   * @defaultValue `game.system.documentTypes.Cards[0]`\n   */\n  type: string;\n\n  /**\n   * A text description of this stack\n   * @defaultValue `\"\"`\n   */\n  description: string;\n\n  /**\n   * An image or video which is used to represent the stack of cards\n   * @defaultValue `CardsData.DEFAULT_ICON`\n   */\n  img: string | null;\n\n  /**\n   * Game system data which is defined by the system template.json model\n   * @defaultValue template from template.json for type or `{}`\n   */\n  data: object;\n\n  /**\n   * A collection of Card documents which currently belong to this stack\n   * @defaultValue `new EmbeddedCollection(CardData, [], BaseCard.implementation)`\n   */\n  cards: EmbeddedCollection<ConfiguredDocumentClass<typeof documents.BaseCard>, CardsData>;\n\n  /** The visible width of this stack */\n  width: number | undefined;\n\n  /** The visible height of this stack */\n  height: number | undefined;\n\n  /**\n   * The angle of rotation of this stack\n   * @defaultValue `360`\n   */\n  rotation: number;\n\n  /**\n   * Whether or not to publicly display the number of cards in this stack\n   * @defaultValue `false`\n   */\n  displayCount: boolean;\n\n  /**\n   * The _id of a Folder which contains this document\n   * @defaultValue `null`\n   */\n  folder: string | null;\n\n  /**\n   * The sort order of this stack relative to others in its parent collection\n   * @defaultValue `0`\n   */\n  sort: number;\n\n  /**\n   * An object which configures user permissions to this stack\n   * @defaultValue `{ default: CONST.ENTITY_PERMISSIONS.NONE }`\n   */\n  permission: Record<string, foundry.CONST.DOCUMENT_PERMISSION_LEVELS>;\n\n  /**\n   * An object of optional key/value flags\n   * @defaultValue `{}`\n   */\n  flags: ConfiguredFlags<'Cards'>;\n}\n\ninterface CardsDataConstructorData {\n  /**\n   * The _id which uniquely identifies this stack of Cards document\n   * @defaultValue `null`\n   */\n  _id?: string | null | undefined;\n\n  /** The text name of this stack */\n  name: string;\n\n  /**\n   * The type of this stack, in BaseCards.metadata.types\n   * @defaultValue `game.system.documentTypes.Cards[0]`\n   */\n  type?: CardsDataSource['type'] | null | undefined;\n\n  /**\n   * A text description of this stack\n   * @defaultValue `\"\"`\n   */\n  description?: string | null | undefined;\n\n  /**\n   * An image or video which is used to represent the stack of cards\n   * @defaultValue `CardsData.DEFAULT_ICON`\n   */\n  img?: string | null | undefined;\n\n  /**\n   * Game system data which is defined by the system template.json model\n   * @defaultValue template from template.json for type or `{}`\n   */\n  data?: DeepPartial<CardsDataSource['data']> | null | undefined;\n\n  /**\n   * A collection of Card documents which currently belong to this stack\n   * @defaultValue `new EmbeddedCollection(CardData, [], BaseCard.implementation)`\n   */\n  cards?: ConstructorParameters<ConfiguredDocumentClass<typeof documents.BaseCard>>[0][] | null | undefined;\n\n  /** The visible width of this stack */\n  width?: number | null | undefined;\n\n  /** The visible height of this stack */\n  height?: number | null | undefined;\n\n  /**\n   * The angle of rotation of this stack\n   * @defaultValue `360`\n   */\n  rotation?: number | null | undefined;\n\n  /**\n   * Whether or not to publicly display the number of cards in this stack\n   * @defaultValue `false`\n   */\n  displayCount?: boolean | null | undefined;\n\n  /**\n   * The _id of a Folder which contains this document\n   * @defaultValue `null`\n   */\n  folder?: InstanceType<ConfiguredDocumentClass<typeof documents.BaseFolder>> | string | null | undefined;\n\n  /**\n   * The sort order of this stack relative to others in its parent collection\n   * @defaultValue `0`\n   */\n  sort?: number | null | undefined;\n\n  /**\n   * An object which configures user permissions to this stack\n   * @defaultValue `{ default: CONST.ENTITY_PERMISSIONS.NONE }`\n   */\n  permission?: Record<string, foundry.CONST.DOCUMENT_PERMISSION_LEVELS> | null | undefined;\n\n  /**\n   * An object of optional key/value flags\n   * @defaultValue `{}`\n   */\n  flags?: ConfiguredFlags<'Cards'> | null | undefined;\n}\n\ntype CardsDataBaseSource = PropertiesToSource<CardsDataBaseProperties>;\ntype CardsDataProperties = CardsDataBaseProperties & ConfiguredData<'Cards'>;\ntype CardsDataSource = CardsDataBaseSource & ConfiguredSource<'Cards'>;\n\ntype DocumentDataConstructor = Pick<typeof DocumentData, keyof typeof DocumentData>;\n\ninterface CardsDataConstructor extends DocumentDataConstructor {\n  new (data: CardsDataConstructorData, document?: documents.BaseCards | null | undefined): CardsData;\n\n  defineSchema(): CardsDataSchema;\n\n  /**\n   * The default icon used for a cards stack that does not have a custom image set\n   * @defaultValue `\"icons/svg/card-hand.svg\"`\n   */\n  DEFAULT_ICON: string;\n}\n\n/**\n * The data schema of a stack of multiple Cards.\n * Each stack can represent a Deck, a Hand, or a Pile.\n * @see BaseCards\n */\nexport type CardsData = DocumentData<\n  CardsDataSchema,\n  CardsDataProperties,\n  CardsDataSource,\n  CardsDataConstructorData,\n  documents.BaseCards\n> &\n  CardsDataProperties;\n\nexport const CardsData: CardsDataConstructor;\n"
    ]
  