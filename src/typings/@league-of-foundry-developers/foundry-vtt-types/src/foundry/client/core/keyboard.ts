
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\client\\core\\keyboard.d.ts",
      "/**\n * A set of helpers and management functions for dealing with user input from keyboard events.\n * {@link https://keycode.info/}\n */\ndeclare class KeyboardManager {\n  constructor();\n\n  /**\n   * The set of key codes which are currently depressed (down)\n   */\n  downKeys: Set<string>;\n\n  /**\n   * The set of movement keys which were recently pressed\n   */\n  moveKeys: Set<string>;\n\n  /**\n   * Allowed modifier keys\n   */\n  static MODIFIER_KEYS: {\n    CONTROL: 'Control';\n    SHIFT: 'Shift';\n    ALT: 'Alt';\n  };\n\n  /**\n   * Track which KeyboardEvent#code presses associate with each modifier\n   */\n  static MODIFIER_CODES: {\n    Alt: ['AltLeft', 'AltRight'];\n    Control: ['ControlLeft', 'ControlRight', 'MetaLeft', 'MetaRight'];\n    Shift: ['ShiftLeft', 'ShiftRight'];\n  };\n\n  /**\n   * Key codes which are \"protected\" and should not be used because they are reserved for browser-level actions.\n   */\n  static PROTECTED_KEYS: ['F5', 'F11', 'F12', 'PrintScreen', 'ScrollLock', 'NumLock', 'CapsLock'];\n\n  /** The OS-specific string display for what their Command key is */\n  static CONTROL_KEY_STRING: 'âŒ˜' | 'Control';\n\n  /**\n   * An special mapping of how special KeyboardEvent#code values should map to displayed strings or symbols.\n   * Values in this configuration object override any other display formatting rules which may be applied.\n   */\n  static KEYCODE_DISPLAY_MAPPING: {\n    ArrowLeft: 'ðŸ¡¸';\n    ArrowRight: 'ðŸ¡º';\n    ArrowUp: 'ðŸ¡¹';\n    ArrowDown: 'ðŸ¡»';\n    Backquote: '`';\n    Backslash: '\\\\';\n    BracketLeft: '[';\n    BracketRight: ']';\n    Comma: ',';\n    Equal: '=';\n    MetaLeft: 'âŒ˜' | 'âŠž';\n    Minus: '-';\n    NumpadAdd: 'Numpad+';\n    NumpadSubtract: 'Numpad-';\n    Period: '.';\n    Quote: \"'\";\n    Semicolon: ';';\n    Slash: '/';\n  };\n\n  /**\n   * Test whether a Form Element currently has focus\n   */\n  get hasFocus(): boolean;\n\n  /**\n   * Emulates a key being pressed, triggering the Keyboard event workflow.\n   * @param up       - If True, emulates the `keyup` Event. Else, the `keydown` event\n   * @param code     - The KeyboardEvent#code which is being pressed\n   * @param altKey   - Emulate the ALT modifier as pressed\n   *                   (default: `false`)\n   * @param ctrlKey  - Emulate the CONTROL modifier as pressed\n   *                   (default: `false`)\n   * @param shiftKey - Emulate the SHIFT modifier as pressed\n   *                   (default: `false`)\n   * @param repeat   - Emulate this as a repeat event\n   *                   (default: `false`)\n   */\n  static emulateKeypress(\n    up: boolean,\n    key: string,\n    {\n      altKey,\n      ctrlKey,\n      shiftKey,\n      repeat\n    }?: { altKey?: boolean; ctrlKey?: boolean; shiftKey?: boolean; repeat?: boolean }\n  ): KeyboardEventContext;\n\n  /**\n   * Format a KeyboardEvent#code into a displayed string.\n   * @param code - The input code\n   * @returns The displayed string for this code\n   */\n  static getKeycodeDisplayString(code: string): string;\n\n  /**\n   * Get a standardized keyboard context for a given event.\n   * Every individual keypress is uniquely identified using the KeyboardEvent#code property.\n   * A list of possible key codes is documented here: https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/code/code_values\n   *\n   * @param event - The originating keypress event\n   * @param up    - A flag for whether the key is down or up\n   *                (default: `false`)\n   * @returns The standardized context of the event\n   */\n  static getKeyboardEventContext(event: KeyboardEvent, up: boolean): KeyboardEventContext;\n\n  /**\n   * Report whether a modifier in KeyboardManager.MODIFIER_KEYS is currently actively depressed.\n   * @param modifier - A modifier in MODIFIER_KEYS\n   * @returns Is this modifier key currently down (active)?\n   */\n  isModifierActive(modifier: string): boolean;\n\n  /**\n   * Converts a Keyboard Context event into a string representation, such as \"C\" or \"Control+C\"\n   * @param context          - The standardized context of the event\n   * @param includeModifiers - If True, includes modifiers in the string representation\n   *                           (default: `true`)\n   * @internal\n   */\n  protected static _getContextDisplayString(context: KeyboardEventContext, includeModifiers?: boolean): string;\n\n  /**\n   * Given a standardized pressed key, find all matching registered Keybind Actions.\n   * @param context - A standardized keyboard event context\n   * @returns The matched Keybind Actions. May be empty.\n   */\n  protected static _getMatchingActions(context: KeyboardEventContext): KeybindingAction[];\n\n  /**\n   * Test whether a keypress context matches the registration for a keybinding action\n   * @param action  - The keybinding action\n   * @param context - The keyboard event context\n   * @returns Does the context match the action requirements?\n   * @internal\n   */\n  protected static _testContext(action: KeybindingAction, context: KeyboardEventContext): boolean;\n\n  /**\n   * Given a registered Keybinding Action, executes the action with a given event and context\n   *\n   * @param keybind - The registered Keybinding action to execute\n   * @param context - The gathered context of the event\n   * @returns Returns true if the keybind was consumed\n   * @internal\n   */\n  protected static _executeKeybind(keybind: KeybindingAction, context: KeyboardEventContext): boolean;\n\n  /**\n   * Processes a keyboard event context, checking it against registered keybinding actions\n   * @param context - The keyboard event context\n   * @internal\n   */\n  protected _processKeyboardContext(context: KeyboardEventContext): void;\n\n  /**\n   * Reset tracking for which keys are in the down and released states\n   * @internal\n   */\n  protected _reset(): void;\n\n  /**\n   * Handle a key press into the down position\n   * @param event - The originating keyboard event\n   * @param up    - A flag for whether the key is down or up\n   * @internal\n   */\n  protected _handleKeyboardEvent(event: KeyboardEvent, up: boolean): void;\n\n  /**\n   * Input events do not fire with isComposing = false at the end of a composition event in Chrome\n   * See: https://github.com/w3c/uievents/issues/202\n   */\n  protected _onCompositionEnd(event: CompositionEvent): void;\n\n  /** @deprecated since v9, will be removed in v10 */\n  static get MOUSE_WHEEL_RATE_LIMIT(): number;\n\n  /**\n   * @deprecated since V9, will be removed in V10\n   * Return whether the key code is currently in the DOWN state\n   * @param code - The key code to test\n   */\n  isDown(code: string): boolean;\n\n  /** @deprecated since v9, will be removed in v10 */\n  static isControl(event: KeyboardEvent | PIXI.InteractionEvent): boolean;\n\n  /**\n   * @deprecated since v9, will be removed in v10\n   * @see KeyboardManager.isControl\n   */\n  isCtrl(event: Event | PIXI.InteractionEvent): boolean;\n\n  /** @deprecated since v9, will be removed in v10 */\n  get _downKeys(): Set<string>;\n\n  /** @deprecated since v9, will be removed in v10 */\n  static DIGIT_KEYS: ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0'];\n\n  /** @deprecated since v9, will be removed in v10 */\n  static MOVEMENT_KEYS: {\n    W: ['up'];\n    A: ['left'];\n    S: ['down'];\n    D: ['right'];\n    ARROWUP: ['up'];\n    ARROWRIGHT: ['right'];\n    ARROWDOWN: ['down'];\n    ARROWLEFT: ['left'];\n    NUMPAD1: ['down', 'left'];\n    NUMPAD2: ['down'];\n    NUMPAD3: ['down', 'right'];\n    NUMPAD4: ['left'];\n    NUMPAD6: ['right'];\n    NUMPAD7: ['up', 'left'];\n    NUMPAD8: ['up'];\n    NUMPAD9: ['up', 'right'];\n  };\n\n  /** @deprecated since v9, will be removed in v10 */\n  static ZOOM_KEYS: {\n    PAGEUP: 'in';\n    PAGEDOWN: 'out';\n    NUMPADADD: 'in';\n    NUMPADSUBTRACT: 'out';\n  };\n\n  /** @deprecated since v9, will be removed in v10 */\n  static standardizeKey(key: string): string;\n\n  /** @deprecated since v9, will be removed in v10 */\n  get digitKeys(): typeof KeyboardManager.DIGIT_KEYS;\n\n  /** @deprecated since v9, will be removed in v10 */\n  get zoomKeys(): KeybindingActionBinding[];\n}\n"
    ]
  