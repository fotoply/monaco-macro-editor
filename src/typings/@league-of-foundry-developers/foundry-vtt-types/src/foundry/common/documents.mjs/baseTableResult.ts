
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\common\\documents.mjs\\baseTableResult.d.ts",
      "import { ConfiguredDocumentClass } from '../../../types/helperTypes';\nimport { DocumentMetadata } from '../abstract/document.mjs';\nimport { Document } from '../abstract/module.mjs';\nimport type { TableResultDataConstructorData } from '../data/data.mjs/tableResultData';\nimport { BaseRollTable } from './baseRollTable';\nimport { BaseUser } from './baseUser';\n\ntype TableResultMetadata = Merge<\n  DocumentMetadata,\n  {\n    name: 'TableResult';\n    collection: 'results';\n    label: 'DOCUMENT.TableResult';\n    labelPlural: 'DOCUMENT.TableResults';\n    types: [\n      `${typeof CONST.TABLE_RESULT_TYPES.TEXT}`,\n      `${typeof CONST.TABLE_RESULT_TYPES.DOCUMENT}`,\n      `${typeof CONST.TABLE_RESULT_TYPES.COMPENDIUM}`\n    ];\n    permissions: {\n      update: (user: BaseUser, doc: BaseTableResult, data: DeepPartial<TableResultDataConstructorData>) => boolean;\n    };\n  }\n>;\n\n/**\n * The base TableResult model definition which defines common behavior of an TableResult document between both client and server.\n */\nexport declare class BaseTableResult extends Document<\n  foundry.data.TableResultData,\n  InstanceType<ConfiguredDocumentClass<typeof BaseRollTable>>,\n  TableResultMetadata\n> {\n  static override get schema(): typeof foundry.data.TableResultData;\n\n  static override get metadata(): TableResultMetadata;\n\n  /**\n   * Is a user able to update an existing TableResult?\n   */\n  protected static _canUpdate(\n    user: BaseUser,\n    doc: BaseTableResult,\n    data: DeepPartial<TableResultDataConstructorData>\n  ): boolean;\n\n  override testUserPermission(\n    user: BaseUser,\n    permission: keyof typeof foundry.CONST.DOCUMENT_PERMISSION_LEVELS | foundry.CONST.DOCUMENT_PERMISSION_LEVELS,\n    { exact }?: { exact?: boolean }\n  ): boolean;\n}\n"
    ]
  