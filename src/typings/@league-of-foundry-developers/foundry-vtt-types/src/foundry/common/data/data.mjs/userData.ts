
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\common\\data\\data.mjs\\userData.d.ts",
      "import {\n  ConfiguredDocumentClass,\n  ConfiguredFlags,\n  FieldReturnType,\n  PropertiesToSource\n} from '../../../../types/helperTypes';\nimport DocumentData from '../../abstract/data.mjs';\nimport * as documents from '../../documents.mjs';\nimport * as fields from '../fields.mjs';\n\ninterface UserDataSchema extends DocumentSchema {\n  _id: fields.DocumentId;\n  avatar: fields.ImageField;\n  character: fields.ForeignDocumentField<{ type: typeof documents.BaseActor; required: false }>;\n  color: FieldReturnType<fields.ColorField, { required: true }>;\n  hotbar: DocumentField<Record<number | `${number}`, string>> & {\n    required: true;\n    default: Record<number | `${number}`, never>;\n    validate: typeof _validateHotbar;\n    validationError: 'Invalid User hotbar data structure';\n  };\n  name: fields.RequiredString;\n  password: fields.BlankString;\n  passwordSalt: fields.StringField;\n  permissions: FieldReturnType<\n    fields.DocumentPermissions,\n    {\n      default: Record<string, never>;\n      validate: typeof _validatePermissions;\n    }\n  >;\n  role: DocumentField<foundry.CONST.USER_ROLES> & {\n    required: true;\n    nullable: false;\n    default: typeof foundry.CONST.USER_ROLES.PLAYER;\n  };\n  flags: fields.ObjectField;\n}\n\ninterface UserDataProperties {\n  /**\n   * The _id which uniquely identifies this User document.\n   * @defaultValue `null`\n   */\n  _id: string | null;\n\n  /** The user's avatar image. */\n  avatar: string | null | undefined;\n\n  /** A linked Actor document that is this user's impersonated character. */\n  character: string | null;\n\n  /** A color to represent this user. */\n  color: string | null | undefined;\n\n  /**\n   * A mapping of hotbar slot number to Macro id that represents this user's hotbar\n   * configuration.\n   * @defaultValue `{}`\n   */\n  hotbar: Record<number | `${number}`, string>;\n\n  /** The user's name. */\n  name: string;\n\n  /**\n   * The user's password. Available only on the Server side for security.\n   * @defaultValue `\"\"`\n   */\n  password: string;\n\n  /** The user's password salt. Available only on the Server side for security. */\n  passwordSalt: string | undefined;\n\n  /**\n   * The user's individual permission configuration, see CONST.USER_PERMISSIONS.\n   * @defaultValue `{}`\n   */\n  permissions: Partial<Record<keyof typeof foundry.CONST.USER_PERMISSIONS, boolean>>;\n\n  /**\n   * The user's role, see CONST.USER_ROLES.\n   * @defaultValue `foundry.CONST.USER_ROLES.PLAYER`\n   */\n  role: foundry.CONST.USER_ROLES;\n\n  /**\n   * An object of optional key/value flags.\n   * @defaultValue `{}`\n   */\n  flags: ConfiguredFlags<'User'>;\n}\n\ninterface UserDataConstructorData {\n  /**\n   * The _id which uniquely identifies this User document.\n   * @defaultValue `null`\n   */\n  _id?: string | null | undefined;\n\n  /** The user's avatar image. */\n  avatar?: string | null | undefined;\n\n  /** A linked Actor document that is this user's impersonated character. */\n  character?: InstanceType<ConfiguredDocumentClass<typeof documents.BaseActor>> | string | null | undefined;\n\n  /** A color to represent this user. */\n  color?: string | null | undefined;\n\n  /**\n   * A mapping of hotbar slot number to Macro id that represents this user's hotbar\n   * configuration.\n   * @defaultValue `{}`\n   */\n  hotbar?: Record<number | `${number}`, string> | null | undefined;\n\n  /** The user's name. */\n  name: string;\n\n  /**\n   * The user's password. Available only on the Server side for security.\n   * @defaultValue `\"\"`\n   */ password?: string | null | undefined;\n\n  /** The user's password salt. Available only on the Server side for security. */\n  passwordSalt?: string | null | undefined;\n\n  /**\n   * The user's individual permission configuration, see CONST.USER_PERMISSIONS.\n   * @defaultValue `{}`\n   */\n  permissions?: Partial<Record<keyof typeof foundry.CONST.USER_PERMISSIONS, boolean>> | null | undefined;\n\n  /**\n   * The user's role, see CONST.USER_ROLES.\n   * @defaultValue `foundry.CONST.USER_ROLES.PLAYER`\n   */\n  role?: foundry.CONST.USER_ROLES | null | undefined;\n\n  /**\n   * An object of optional key/value flags.\n   * @defaultValue `{}`\n   */\n  flags?: ConfiguredFlags<'User'> | null | undefined;\n}\n\ntype UserDataSource = PropertiesToSource<UserDataProperties>;\n\n/**\n * The data schema for a User document\n */\nexport class UserData extends DocumentData<\n  UserDataSchema,\n  UserDataProperties,\n  UserDataSource,\n  UserDataConstructorData,\n  documents.BaseUser\n> {\n  constructor(data: UserDataConstructorData, document?: documents.BaseUser | null);\n\n  static override defineSchema(): UserDataSchema;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface UserData extends UserDataProperties {}\n\n/**\n * Validate the structure of the User hotbar object\n * @param bar - The attempted hotbar data\n */\ndeclare function _validateHotbar(bar: unknown): boolean;\n\n/**\n * Validate the structure of the User permissions object\n * @param perms - The attempted permissions data\n */\ndeclare function _validatePermissions(perms: unknown): boolean;\n"
    ]
  