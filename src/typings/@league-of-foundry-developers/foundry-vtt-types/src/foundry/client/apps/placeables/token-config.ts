
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\client\\apps\\placeables\\token-config.d.ts",
      "import type { ConfiguredDocumentClassForName } from '../../../../types/helperTypes';\nimport type { TokenBarData } from '../../../common/data/data.mjs/tokenBarData';\n\ndeclare global {\n  /**\n   * The Application responsible for configuring a single Token document within a parent Scene.\n   * Note that due to an oversight, this class does not inherit from {@link DocumentSheet} as it was intended to, and will\n   * be changed in v10.\n   * @typeParam Options - The type of the options object\n   * @typeParam Data    - The data structure used to render the handlebars template.\n   */\n  class TokenConfig<\n    Options extends FormApplicationOptions = FormApplicationOptions,\n    Data extends object = TokenConfig.Data<Options>\n  > extends FormApplication<\n    Options,\n    Data,\n    InstanceType<ConfiguredDocumentClassForName<'Token'>> | InstanceType<ConfiguredDocumentClassForName<'Actor'>>\n  > {\n    constructor(\n      object:\n        | InstanceType<ConfiguredDocumentClassForName<'Token'>>\n        | InstanceType<ConfiguredDocumentClassForName<'Actor'>>,\n      options?: Partial<Options>\n    );\n\n    token: InstanceType<ConfiguredDocumentClassForName<'Token'>> | PrototypeTokenDocument;\n\n    /**\n     * @defaultValue\n     * ```typescript\n     * foundry.utils.mergeObject(super.defaultOptions, {\n     *   classes: [\"sheet\", \"token-sheet\"],\n     *   template: \"templates/scene/token-config.html\",\n     *   width: 480,\n     *   height: \"auto\",\n     *   tabs: [\n     *     {navSelector: '.tabs[data-group=\"main\"]', contentSelector: \"form\", initial: \"character\"},\n     *     {navSelector: '.tabs[data-group=\"light\"]', contentSelector: '.tab[data-tab=\"light\"]', initial: \"basic\"}\n     *   ],\n     *   sheetConfig: true\n     * })\n     * ```\n     */\n    static override get defaultOptions(): FormApplicationOptions;\n\n    override get id(): string;\n\n    /**\n     * A convenience accessor to test whether we are configuring the prototype Token for an Actor.\n     */\n    get isPrototype(): boolean;\n\n    /**\n     * Convenience access to the Actor document that this Token represents\n     */\n    get actor(): InstanceType<ConfiguredDocumentClassForName<'Actor'>>;\n\n    override get title(): string;\n\n    override getData(options?: Partial<Options>): Data | Promise<Data>;\n\n    override render(force?: boolean, options?: Application.RenderOptions<Options>): Promise<this>;\n\n    protected override _renderInner(...args: [Data]): Promise<JQuery>;\n\n    /**\n     * Get an Object of image paths and filenames to display in the Token sheet\n     * @internal\n     */\n    protected _getAlternateTokenImages(): Promise<Record<string, string>>;\n\n    protected override _getHeaderButtons(): Application.HeaderButton[];\n\n    /**\n     * Shim for {@link DocumentSheet#_onConfigureSheet} that will be replaced in v10 when this class subclasses it.\n     * @internal\n     */\n    protected _onConfigureSheet(event: JQuery.ClickEvent): void;\n\n    override activateListeners(html: JQuery): void;\n\n    protected override _updateObject(event: Event, formData: TokenConfig.FormData): Promise<unknown>;\n\n    /**\n     * Handle Token assignment requests to update the default prototype Token\n     * @param event - The left-click event on the assign token button\n     * @internal\n     */\n    protected _onAssignToken(event: JQuery.ClickEvent): void;\n\n    /**\n     * Handle changing the attribute bar in the drop-down selector to update the default current and max value\n     * @internal\n     */\n    protected _onBarChange(ev: JQuery.ChangeEvent): void;\n  }\n\n  namespace TokenConfig {\n    interface Attributes {\n      bar: string[][];\n      value: string[][];\n    }\n\n    interface Data<Options extends FormApplicationOptions = FormApplicationOptions> {\n      cssClasses: string;\n      isPrototype: boolean;\n      hasAlternates: boolean;\n      alternateImages: Record<string, string> | [];\n      object: foundry.data.PrototypeTokenData | foundry.data.TokenData;\n      options: Options;\n      gridUnits: string;\n      barAttributes: Record<string, string[]>;\n      bar1: ReturnType<TokenDocument['getBarAttribute']> | undefined;\n      bar2: ReturnType<TokenDocument['getBarAttribute']> | undefined;\n      colorationTechniques: AdaptiveLightingShader.ColorationTechniques;\n      displayModes: Record<foundry.CONST.TOKEN_DISPLAY_MODES, string>;\n      actors: { _id: string; name: string }[];\n      dispositions: Record<foundry.CONST.TOKEN_DISPOSITIONS, string>;\n      lightAnimations: { [Key in keyof typeof CONFIG.Canvas.lightAnimations]: string } & { '': string };\n      isGM: boolean;\n    }\n\n    interface FormData {\n      actorId: string;\n      actorLink: boolean;\n      alternateImages?: string;\n      alpha: number;\n      'bar1.attribute': string;\n      'bar2.attribute': string;\n      brightLight: number | null;\n      brightSight: number | null;\n      dimLight: number | null;\n      dimSight: number | null;\n      displayBars: foundry.CONST.TOKEN_DISPLAY_MODES;\n      displayName: foundry.CONST.TOKEN_DISPLAY_MODES;\n      disposition: foundry.CONST.TOKEN_DISPOSITIONS;\n      elevation: number | null;\n      height: number | null;\n      img: string;\n      lightAlpha: number;\n      lightAngle: number | null;\n      'lightAnimation.intensity': number;\n      'lightAnimation.speed': number;\n      'lightAnimation.type': string;\n      lightColor: string;\n      lockRotation: boolean;\n      mirrorX: boolean;\n      mirrorY: boolean;\n      name: StringTerm;\n      rotation: number | null;\n      scale: number;\n      sightAngle: number | null;\n      tint: string;\n      vision: boolean;\n      width: number | null;\n      x: number | null;\n      y: number | null;\n    }\n  }\n\n  /**\n   * A sheet that alters the values of the default Token configuration used when new Token documents are created.\n   */\n  class DefaultTokenConfig<\n    Options extends FormApplicationOptions = FormApplicationOptions,\n    Data extends DefaultTokenConfig.Data = DefaultTokenConfig.Data\n  > extends TokenConfig<Options, Data> {\n    constructor(object: unknown, options?: Partial<Options> | undefined);\n\n    data: foundry.data.TokenData;\n\n    object: InstanceType<ConfiguredDocumentClassForName<'Token'>>;\n\n    token: InstanceType<ConfiguredDocumentClassForName<'Token'>>;\n\n    /**\n     * The named world setting that stores the default Token configuration\n     * @defaultValue `\"defaultToken\"`\n     */\n    static SETTING: string;\n\n    /**\n     * @defaultValue\n     * ```typescript\n     * foundry.utils.mergeObject(super.defaultOptions, {\n     *   template: \"templates/scene/default-token-config.html\",\n     *   sheetConfig: false\n     * })\n     * ```\n     */\n    static override get defaultOptions(): FormApplicationOptions;\n\n    override get id(): string;\n\n    override get title(): string;\n\n    override getData(options: unknown): Data | Promise<Data>;\n\n    override _getSubmitData(\n      updateData?: Parameters<TokenConfig['_getSubmitData']>[0]\n    ): ReturnType<TokenConfig['_getSubmitData']>;\n\n    override _updateObject(event: Event, formData?: object): Promise<unknown>;\n\n    override activateListeners(html: JQuery): void;\n\n    /**\n     * Reset the form to default values\n     */\n    reset(): void;\n\n    protected override _onBarChange(): Promise<void>;\n  }\n\n  namespace DefaultTokenConfig {\n    interface Data<Options extends FormApplicationOptions = FormApplicationOptions>\n      extends Omit<TokenConfig.Data<Options>, 'object' | 'bar1' | 'bar2'> {\n      object: foundry.data.TokenData['_source'];\n      isDefault: true;\n      barAttributes: ReturnType<typeof TokenDocument['getTrackedAttributeChoices']>;\n      bar1: TokenBarData;\n      bar2: TokenBarData;\n    }\n  }\n}\n"
    ]
  