
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\client\\pixi\\sources\\light-source.d.ts",
      "import type { ConfiguredObjectClassForName } from '../../../../types/helperTypes';\n\ndeclare global {\n  /** @see {@link foundry.data.LightData} */\n  interface LightSourceData extends PointSource.Data {\n    /** @defaultValue `0` */\n    x: number;\n\n    /** @defaultValue `0` */\n    y: number;\n\n    /**\n     * An optional z-index sorting for the source\n     * @defaultValue `null`\n     */\n    z: number | null;\n\n    /**\n     * The angle of rotation for this point source\n     * @defaultValue `0`\n     */\n    rotation: number;\n\n    /**\n     * An opacity for the emitted light, if any\n     * @defaultValue `0.5`\n     */\n    alpha: number;\n\n    /**\n     * An animation configuration for the source\n     * @defaultValue `{ type: null }`\n     */\n    animation: LightAnimationConfiguration;\n\n    /**\n     * The angle of emission for this point source\n     * @defaultValue `360`\n     */\n    angle: number;\n\n    /**\n     * The allowed radius of bright vision or illumination\n     * @defaultValue `0`\n     */\n    bright: number;\n\n    /**\n     * A tint color for the emitted light, if any\n     * @defaultValue `null`\n     */\n    color: number | null;\n\n    /**\n     * The coloration technique applied in the shader\n     * @defaultValue `1`\n     */\n    coloration: number;\n\n    /**\n     * The amount of contrast this light applies to the background texture\n     * @defaultValue `0.0`\n     */\n    contrast: number;\n\n    /**\n     * A darkness range (min and max) for which the source should be active\n     * @defaultValue `{ min: 0, max: 1 }`\n     */\n    darkness: { min: number; max: number };\n\n    /**\n     * The allowed radius of dim vision or illumination\n     * @defaultValue `0`\n     */\n    dim: number;\n\n    /** Fade the difference between bright, dim, and dark gradually? */\n    gradual: boolean;\n\n    /**\n     * The luminosity applied in the shader\n     * @defaultValue `0.0`\n     */\n    luminosity: number;\n\n    /**\n     * The amount of color saturation this light applies to the background texture\n     * @defaultValue `0.0`\n     */\n    saturation: number;\n\n    /**\n     * The depth of shadows this light applies to the background texture\n     * @defaultValue `0.0`\n     */\n    shadows: number;\n\n    /** @defaultValue `true` */\n    walls: boolean;\n\n    /**\n     * Whether or not this source provides a source of vision\n     * @defaultValue `false`\n     */\n    vision: boolean;\n\n    /** An integer seed to synchronize (or de-synchronize) animations */\n    seed: number;\n  }\n\n  interface LightAnimationConfiguration {\n    /** The human-readable (localized) label for the animation */\n    label: string;\n\n    /** The animation function that runs every frame */\n    animation: (this: LightSource, dt: number, animation: LightAnimationConfiguration) => void;\n\n    /** A custom illumination shader used by this animation */\n    illuminationShader: AdaptiveIlluminationShader;\n\n    /** A custom coloration shader used by this animation */\n    colorationShader: AdaptiveColorationShader;\n\n    /** A custom background shader used by this animation */\n    backgroundShader: AdaptiveBackgroundShader;\n\n    /** The animation seed */\n    seed?: number;\n\n    /** The animation time */\n    time?: number;\n\n    /** @defaultValue `null` */\n    type?: keyof typeof CONFIG.Canvas.lightAnimations | null;\n  }\n\n  /**\n   * A specialized subclass of the PointSource abstraction which is used to control the rendering of light sources.\n   */\n  class LightSource extends PointSource {\n    /** @param object - The light-emitting object that generates this light source */\n    constructor(object: InstanceType<ConfiguredObjectClassForName<'AmbientLight' | 'Token'>>);\n\n    /**\n     * The light or darkness container for this source\n     * @defaultValue `this._createMesh(AdaptiveBackgroundShader)`\n     */\n    background: PIXI.Mesh;\n\n    /**\n     * The light or darkness container for this source\n     * @defaultValue `this._createMesh(AdaptiveIlluminationShader)`\n     */\n    illumination: PIXI.Mesh;\n\n    /**\n     * This visible color container for this source\n     * @defaultValue `this._createMesh(AdaptiveColorationShader)`\n     */\n    coloration: PIXI.Mesh;\n\n    static override sourceType: 'light';\n\n    /**\n     * Strength of the blur for light source edges\n     * @defaultValue `3`\n     */\n    static BLUR_STRENGTH: number;\n\n    /**\n     * Keys in the LightSourceData structure which, when modified, change the appearance of the light\n     * @internal\n     * @defaultValue\n     * ```javascript\n     * [\n     *   \"dim\", \"bright\", \"gradual\", \"alpha\", \"coloration\", \"color\",\n     *   \"contrast\", \"saturation\", \"shadows\", \"luminosity\"\n     * ]\n     * ```\n     */\n    protected static _appearanceKeys: string[];\n\n    /**\n     * The object of data which configures how the source is rendered\n     * @defaultValue `{}`\n     */\n    data: Partial<LightSourceData>;\n\n    /**\n     * The animation configuration applied to this source\n     * @defaultValue `{}`\n     */\n    animation: LightAnimationConfiguration;\n\n    /**\n     * Internal flag for whether this is a darkness source\n     * @defaultValue `false`\n     */\n    isDarkness: boolean;\n\n    /**\n     * The rendered field-of-vision texture for the source for use within shaders.\n     * @defaultValue `undefined`\n     */\n    fovTexture: PIXI.RenderTexture | undefined;\n\n    /**\n     * To know if a light source is a preview or not. False by default.\n     * @defaultValue `false`\n     */\n    preview: boolean;\n\n    /**\n     * The ratio of dim:bright as part of the source radius\n     * @defaultValue `undefined`\n     */\n    ratio: number | undefined;\n\n    /**\n     * Track which uniforms need to be reset\n     * @internal\n     * @defaultValue\n     * ```javascript\n     * {\n     *   background: true,\n     *   illumination: true,\n     *   coloration: true\n     * }\n     * ```\n     */\n    protected _resetUniforms: {\n      background: boolean;\n      illumination: boolean;\n      coloration: boolean;\n    };\n\n    /**\n     * To track if a source is temporarily shutdown to avoid glitches\n     * @defaultValue `{ illumination: false }`\n     * @internal\n     */\n    protected _shutdown: { illumination: boolean };\n\n    /**\n     * Initialize the source with provided object data.\n     * @param data - Initial data provided to the point source\n     * @returns A reference to the initialized source\n     */\n    initialize(data?: Partial<LightSourceData> & { color?: string | number | null }): this;\n\n    /**\n     * Initialize the PointSource with new input data\n     * @param data - Initial data provided to the light source\n     * @returns The changes compared to the prior data\n     * @internal\n     */\n    protected _initializeData(\n      data: Partial<LightSourceData> & { color?: string | number | null }\n    ): Partial<LightSourceData>;\n\n    /**\n     * Initialize the shaders used for this source, swapping to a different shader if the animation has changed.\n     * @internal\n     */\n    protected _initializeShaders(): void;\n\n    /**\n     * Initialize the blend mode and vertical sorting of this source relative to others in the container.\n     * @internal\n     */\n    protected _initializeBlending(): void;\n\n    /**\n     * Render the containers used to represent this light source within the LightingLayer\n     */\n    drawMeshes(): {\n      background: ReturnType<LightSource['drawBackground']>;\n      light: ReturnType<LightSource['drawLight']>;\n      color: ReturnType<LightSource['drawColor']>;\n    };\n\n    /**\n     * Draw the display of this source for background container.\n     * @returns The rendered light container\n     */\n    drawBackground(): PIXI.Container | null;\n\n    /**\n     * Draw the display of this source for the darkness/light container of the SightLayer.\n     * @returns The rendered light container\n     */\n    drawLight(): PIXI.Container | null;\n\n    /**\n     * Draw and return a container used to depict the visible color tint of the light source on the LightingLayer\n     * @returns An updated color container for the source\n     */\n    drawColor(): PIXI.Container | null;\n\n    /**\n     * Update shader uniforms by providing data from this PointSource\n     * @param shader - The shader being updated\n     * @internal\n     */\n    protected _updateColorationUniforms(shader: AdaptiveColorationShader): void;\n\n    /**\n     * Update shader uniforms by providing data from this PointSource\n     * @param shader - The shader being updated\n     * @internal\n     */\n    protected _updateIlluminationUniforms(shader: AdaptiveIlluminationShader): void;\n\n    /**\n     * Update shader uniforms by providing data from this PointSource\n     * @param shader - The shader being updated\n     * @internal\n     */\n    protected _updateBackgroundUniforms(shader: AdaptiveBackgroundShader): void;\n\n    /**\n     * Update shader uniforms shared by all shader types\n     * @param shader - The shader being updated\n     * @internal\n     */\n    protected _updateCommonUniforms(shader: AdaptiveLightingShader): void;\n\n    /**\n     * Map luminosity value to exposure value\n     * luminosity[-1  , 0  [ =\\> Darkness =\\> map to exposure ]   0, 1]\n     * luminosity[ 0  , 0.5[ =\\> Light    =\\> map to exposure [-0.5, 0[\n     * luminosity[ 0.5, 1  ] =\\> Light    =\\> map to exposure [   0, 1]\n     * @param lum - The luminosity value\n     * @returns The exposure value\n     * @internal\n     */\n    protected _mapLuminosity(lum: number): number;\n\n    /**\n     * Animate the PointSource, if an animation is enabled and if it currently has rendered containers.\n     * @param dt - Delta time\n     */\n    animate(dt: number): void;\n\n    /**\n     * A torch animation where the luminosity and coloration decays each frame and is revitalized by flashes\n     * @param dt        - Delta time\n     * @param speed     - The animation speed, from 1 to 10\n     *                    (default: `5`)\n     * @param intensity - The animation intensity, from 1 to 10\n     *                    (default: `5`)\n     */\n    animateTorch(dt: number, { speed, intensity }?: { speed: number; intensity: number }): void;\n\n    /**\n     * A basic \"pulse\" animation which expands and contracts.\n     * @param dt        - Delta time\n     * @param speed     - The animation speed, from 1 to 10\n     *                    (default: `5`)\n     * @param intensity - The animation intensity, from 1 to 10\n     *                    (default: `5`)\n     * @param reverse   - Is the animation reversed?\n     *                    (default: `false`)\n     */\n    animatePulse(\n      dt: number,\n      { speed, intensity, reverse }?: { speed?: number; intensity?: number; reverse?: boolean }\n    ): void;\n\n    /**\n     * Emanate waves of light from the source origin point\n     * @param dt        - Delta time\n     * @param speed     - The animation speed, from 1 to 10\n     *                    (default: `5`)\n     * @param intensity - The animation intensity, from 1 to 10\n     *                    (default: `5`)\n     * @param reverse   - Is the animation reversed?\n     *                    (default: `false`)\n     */\n    animateTime(\n      dt: number,\n      { speed, intensity, reverse }?: { speed?: number; intensity?: number; reverse?: boolean }\n    ): void;\n\n    /**\n     * Evolve a value using a stochastic AR(1) process\n     * @param y      - The current value\n     * @param phi    - The decay rate of prior values\n     *                 (default: `0.5`)\n     * @param center - The stationary mean of the series\n     *                 (default: `0`)\n     * @param sigma  - The volatility of the process - standard deviation of the error term\n     *                 (default: `0.1`)\n     * @param max    - The maximum allowed outcome, or null\n     *                 (default: `null`)\n     * @param min    - The minimum allowed outcome, or null\n     *                 (default: `null`)\n     * @returns The new value of the process\n     * @internal\n     */\n    protected _ar1(\n      y: number,\n      {\n        phi,\n        center,\n        sigma,\n        max,\n        min\n      }?: { phi?: number; center?: number; sigma?: number; max?: number | null; min?: number | null }\n    ): number;\n  }\n}\n"
    ]
  