
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\client\\ui\\context.d.ts",
      "interface ContextMenuEntry {\n  /**\n   * The context menu label. Can be localized.\n   */\n  name: string;\n\n  /**\n   * A string containing an HTML icon element for the menu item\n   */\n  icon: string;\n\n  /**\n   * The function to call when the menu item is clicked. Receives the HTML element of the SidebarTab entry that this context menu is for.\n   */\n  callback: (target: JQuery) => void;\n\n  /**\n   * A function to call to determine if this item appears in the menu. Receives the HTML element of the SidebarTab entry that this context menu is for.\n   */\n  condition?: boolean | ((target: JQuery) => boolean);\n}\n\n/**\n * Display a right-click activated Context Menu which provides a dropdown menu of options\n * A ContextMenu is constructed by designating a parent HTML container and a target selector\n * An Array of menuItems defines the entries of the menu which is displayed\n */\ndeclare class ContextMenu {\n  /**\n   * @param element   - The containing HTML element within which the menu is positioned\n   * @param selector  - A CSS selector which activates the context menu.\n   * @param menuItems - An Array of entries to display in the menu\n   * @param eventName - Optionally override the triggering event which can spawn the menu\n   *                    (default: `'contextmenu'`)\n   */\n  constructor(\n    element: JQuery,\n    selector: string | null | undefined,\n    menuItems: ContextMenuEntry[],\n    { eventName }?: { eventName?: string }\n  );\n\n  /**\n   * The target HTMLElement being selected\n   */\n  element: JQuery;\n\n  /**\n   * The target CSS selector which activates the menu\n   * @defaultValue `element.attr(\"id\")`\n   */\n  selector: string;\n\n  /**\n   * An interaction event name which activates the menu\n   */\n  eventName: string;\n\n  /**\n   * The array of menu items being rendered\n   */\n  menuItems: ContextMenuEntry[];\n\n  /**\n   * Track which direction the menu is expanded in\n   * @defaultValue `false`\n   */\n  protected _expandUp: boolean;\n\n  /**\n   * A convenience accessor to the context menu HTML object\n   */\n  get menu(): JQuery;\n\n  /**\n   * Create a ContextMenu for this Application and dispatch hooks.\n   * @param app       - The Application this ContextMenu belongs to.\n   * @param html      - The Application's rendered HTML.\n   * @param selector  - The target CSS selector which activates the menu.\n   * @param menuItems - The array of menu items being rendered.\n   * @param hookName  - The name of the hook to call.\n   *                    (default: `'EntryContext'`)\n   */\n  static create(\n    app: Application,\n    html: JQuery,\n    selector: string,\n    menuItems: ContextMenuEntry[],\n    hookName?: string\n  ): ContextMenu;\n\n  /**\n   * Attach a ContextMenu instance to an HTML selector\n   */\n  bind(): void;\n\n  /**\n   * Closes the menu and removes it from the DOM.\n   * @param options - Options to configure the closing behavior.\n   */\n  close(options?: ContextMenu.CloseOptions | undefined): Promise<void>;\n\n  /** @internal */\n  protected _close(): void;\n\n  /** @internal */\n  protected _animateOpen(menu: JQuery): Promise<void>;\n\n  /** @internal */\n  protected _animateClose(menu: JQuery): Promise<void>;\n\n  /**\n   * Render the Context Menu by iterating over the menuItems it contains\n   * Check the visibility of each menu item, and only render ones which are allowed by the item's logical condition\n   * Attach a click handler to each item which is rendered\n   * @param target - The target element to which the context menu is attached\n   */\n  render(target: JQuery): void | Promise<void>;\n\n  /**\n   * Set the position of the context menu, taking into consideration whether the menu should expand upward or downward\n   */\n  protected _setPosition(html: JQuery, target: JQuery): void;\n\n  static eventListeners(): void;\n}\n\ndeclare namespace ContextMenu {\n  interface CloseOptions {\n    /**\n     * Animate the context menu closing.\n     * @defaultValue `true`\n     */\n    animate?: boolean;\n  }\n}\n"
    ]
  