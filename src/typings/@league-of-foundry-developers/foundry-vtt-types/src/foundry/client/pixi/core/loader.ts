
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\client\\pixi\\core\\loader.d.ts",
      "import type { ConfiguredDocumentClassForName } from '../../../../types/helperTypes';\n\ndeclare global {\n  /**\n   * A Loader class which helps with loading video and image textures\n   */\n  class TextureLoader {\n    /**\n     * The cached mapping of textures\n     */\n    cache: Map<string, { tex: PIXI.BaseTexture; time: number }>;\n\n    /**\n     * The duration in milliseconds for which a texture will remain cached\n     * @defaultValue `1000 * 60 * 15`\n     */\n    static CACHE_TTL: number;\n\n    /**\n     * Load all the textures which are required for a particular Scene\n     * @param scene   - The Scene to load\n     * @param options - Additional options that configure texture loading\n     *                  (default: `{}`)\n     */\n    static loadSceneTextures(\n      scene: InstanceType<ConfiguredDocumentClassForName<'Scene'>>,\n      options?: Partial<TextureLoader.LoadSceneTextureOptions>\n    ): Promise<void[]>;\n\n    /**\n     * Load an Array of provided source URL paths\n     * @param sources - The source URLs to load\n     * @param options - Additional options which modify loading\n     * @returns A Promise which resolves once all textures are loaded\n     */\n    load(sources: string[], options?: Partial<TextureLoader.LoadOptions>): Promise<PIXI.BaseTexture | void[]>;\n\n    /**\n     * Load a single texture on-demand from a given source URL path\n     * @param src - The source texture path to load\n     * @returns The loaded texture object\n     */\n    loadTexture(src: string): Promise<PIXI.BaseTexture>;\n\n    /**\n     * Log texture loading progress in the console and in the Scene loading bar\n     * @internal\n     */\n    protected _onProgress(src: string, progress: TextureLoader.Progress): void;\n\n    /**\n     * Log failed texture loading\n     * @internal\n     */\n    protected _onError(src: string, progress: TextureLoader.Progress, error: Error): void;\n\n    /**\n     * Load an image texture from a provided source url\n     */\n    loadImageTexture(src: string): Promise<PIXI.BaseTexture>;\n\n    /**\n     * Use the Fetch API to retrieve a resource and return a Blob instance for it.\n     * @param options - Options to configure the loading behaviour.\n     *                  (default: `{}`)\n     * @internal\n     */\n    protected _fetchResource(\n      src: string,\n      options?: {\n        /**\n         * Append a cache-busting query parameter to the request.\n         * @defaultValue `false`\n         */\n        bustCache?: boolean | undefined;\n      }\n    ): Promise<Blob>;\n\n    /**\n     * Return a URL with a cache-busting query parameter appended.\n     * @param src - The source URL being attempted\n     * @returns The new URL, or false on a failure.\n     * @internal\n     */\n    protected _getCacheBustURL(src: string): string | false;\n\n    /**\n     * Load a video texture from a provided source url\n     */\n    loadVideoTexture(src: string): Promise<PIXI.BaseTexture>;\n\n    /**\n     * Add an image url to the texture cache\n     * @param src - The source URL\n     * @param tex - The readied texture\n     */\n    setCache(src: string, tex: PIXI.BaseTexture): void;\n\n    /**\n     * Retrieve a texture from the texture cache\n     * @param src - The source URL\n     */\n    getCache(src: string): PIXI.BaseTexture | undefined;\n\n    /**\n     * Expire (and destroy) textures from the cache which have not been used for more than CACHE_TTL milliseconds.\n     */\n    expireCache(): void;\n\n    /**\n     * A global reference to the singleton texture loader\n     */\n    static loader: TextureLoader;\n  }\n\n  namespace TextureLoader {\n    interface LoadSceneTextureOptions {\n      /**\n       * Destroy other expired textures\n       * @defaultValue `true`\n       */\n      expireCache: boolean;\n    }\n\n    interface LoadOptions {\n      /**\n       * The status message to display in the load bar\n       */\n      message?: string | undefined;\n\n      /**\n       * Expire other cached textures?\n       * @defaultValue `true`\n       */\n      expireCache: boolean;\n    }\n\n    interface Progress {\n      message: string;\n      loaded: number;\n      failed: number;\n      total: number;\n      pct: number;\n    }\n  }\n\n  /**\n   * Test whether a file source exists by performing a HEAD request against it\n   * @param src - The source URL or path to test\n   * @returns Does the file exist at the provided url?\n   */\n  function srcExists(src: string): Promise<boolean>;\n\n  /**\n   * Get a single texture from the cache\n   */\n  function getTexture(src: string): PIXI.Texture | null;\n\n  /**\n   * Load a single texture and return a Promise which resolves once the texture is ready to use\n   * @param src      - The requested texture source\n   * @param options  - Additional options which modify texture loading\n   */\n  function loadTexture(\n    src: string,\n    options?: {\n      /** A fallback texture to use if the requested source is unavailable or invalid */\n      fallback?: string | undefined;\n    }\n  ): Promise<PIXI.Texture | null>;\n}\n"
    ]
  